<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="de.uka.ilkd.key.nparser.TestTacletEquality" tests="2032" skipped="0" failures="0" errors="0" timestamp="2023-04-03T11:36:24" hostname="fv-az571-892" time="3.939">
  <properties/>
  <testcase name="[1] abortJavaCardTransactionAPI, abortJavaCardTransactionAPI {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #jcsystemType.#abortTransaction()@#jcsystemType;&#10;... }\] (post))&#10;\replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #abortJavaCardTransaction;&#10;... }\] (post)]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.016"/>
  <testcase name="[2] abortJavaCardTransactionBox, abortJavaCardTransactionBox {&#10;\find(==&gt;box_transaction\[{ ..&#10;  #abortJavaCardTransaction;&#10;... }\] (post))&#10;\replacewith([]==&gt;[update-application(elem-update(heap)(anon(savedHeap,allObjects(java.lang.Object::&lt;transactionConditionallyUpdated&gt;),heap)),box(post))]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[3] abortJavaCardTransactionDiamond, abortJavaCardTransactionDiamond {&#10;\find(==&gt;diamond_transaction\[{ ..&#10;  #abortJavaCardTransaction;&#10;... }\] (post))&#10;\replacewith([]==&gt;[update-application(elem-update(heap)(anon(savedHeap,allObjects(java.lang.Object::&lt;transactionConditionallyUpdated&gt;),heap)),diamond(post))]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[4] accDefinition, accDefinition {&#10;\find(acc(h,s,o,o2))&#10;\varcond(\notFreeIn(fv (variable), o2 (deltaObject term)), \notFreeIn(fv (variable), o (java.lang.Object term)), \notFreeIn(fv (variable), s (LocSet term)), \notFreeIn(fv (variable), h (Heap term)))&#10;\replacewith(and(and(not(equals(o,null)),not(equals(o2,null))),exists{fv (variable)}(and(elementOf(o,fv,s),equals(deltaObject::select(h,o,fv),o2))))) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[5] acosIsNaN, acosIsNaN {&#10;\find(acosDouble(arg))&#10;\add [imp(or(or(doubleIsNaN(arg),ltDouble(arg,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))),gtDouble(arg,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),doubleIsNaN(acosDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[6] acosRange, acosRange {&#10;\find(acosDouble(arg))&#10;\add [imp(and(geqDouble(arg,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),leqDouble(arg,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),and(geqDouble(acosDouble(arg),DFP(0(#))),leqDouble(acosDouble(arg),DFP(8(4(8(5(4(0(2(5(5(6(5(6(6(5(2(4(1(6(4(#)))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[7] activeUseAddition, activeUseAddition {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left + #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left + #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[8] activeUseBitwiseAnd, activeUseBitwiseAnd {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left &amp; #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left &amp; #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[9] activeUseBitwiseNegation, activeUseBitwiseNegation {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = ~#left;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = ~#left;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[10] activeUseBitwiseOr, activeUseBitwiseOr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left | #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left | #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[11] activeUseBitwiseXOr, activeUseBitwiseXOr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left ^ #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left ^ #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[12] activeUseByteCast, activeUseByteCast {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = (byte) #seShortIntLong;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = (byte) #seShortIntLong;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[13] activeUseCharCast, activeUseCharCast {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = (char) #seByteShortIntLong;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = (char) #seByteShortIntLong;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[14] activeUseDivision, activeUseDivision {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left / #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left / #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[15] activeUseIntCast, activeUseIntCast {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = (int) #seLong;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = (int) #seLong;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[16] activeUseModulo, activeUseModulo {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left % #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left % #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[17] activeUseMultiplication, activeUseMultiplication {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left * #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left * #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[18] activeUseShiftLeft, activeUseShiftLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left &lt;&lt; #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left &lt;&lt; #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[19] activeUseShiftRight, activeUseShiftRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left &gt;&gt; #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left &gt;&gt; #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[20] activeUseShortCast, activeUseShortCast {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = (short) #seIntLong;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = (short) #seIntLong;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[21] activeUseStaticFieldReadAccess, activeUseStaticFieldReadAccess {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #sv;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = @(#sv);&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[22] activeUseStaticFieldReadAccess2, activeUseStaticFieldReadAccess2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #v.#sv;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = @(#sv);&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[23] activeUseStaticFieldWriteAccess, activeUseStaticFieldWriteAccess {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[24] activeUseStaticFieldWriteAccess2, activeUseStaticFieldWriteAccess2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v.#sv = #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[25] activeUseStaticFieldWriteAccess3, activeUseStaticFieldWriteAccess3 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #arr[#idx];&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #arr[#idx];&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[26] activeUseStaticFieldWriteAccess4, activeUseStaticFieldWriteAccess4 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v.#sv = #arr[#idx];&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #arr[#idx];&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[27] activeUseStaticFieldWriteAccess5, activeUseStaticFieldWriteAccess5 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #v1.#a;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#a (program Variable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#a) #v0 = #v1.#a;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[28] activeUseStaticFieldWriteAccess6, activeUseStaticFieldWriteAccess6 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v.#sv = #v1.#a;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#a (program Variable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#a) #v0 = #v1.#a;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[29] activeUseSubtraction, activeUseSubtraction {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left - #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left - #right;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[30] activeUseUnaryMinus, activeUseUnaryMinus {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = -#left;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = -#left;&#10;  @(#sv) = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[31] activeUseUnsignedShiftRight, activeUseUnsignedShiftRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sv = #left &gt;&gt;&gt; #right;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#sv (program StaticVariable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#sv) #v0 = #left &gt;&gt;&gt; #right;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[32] add_eq, add_eq {&#10;\find(equals(i0,i1))&#10;\replacewith(equals(add(i,i0),add(i,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[33] add_eq_back, add_eq_back {&#10;\find(equals(add(i1,i),add(i1,i0)))&#10;\replacewith(equals(i,i0)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[34] add_eq_back_2, add_eq_back_2 {&#10;\find(equals(add(i,i1),add(i0,i1)))&#10;\replacewith(equals(i,i0)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[35] add_eq_back_2_fst_comm, add_eq_back_2_fst_comm {&#10;\find(equals(add(i1,i),add(i0,i1)))&#10;\replacewith(equals(i,i0)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[36] add_eq_back_3, add_eq_back_3 {&#10;\find(equals(i1,add(i1,i0)))&#10;\replacewith(equals(Z(0(#)),i0)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[37] add_equations, add_equations {&#10;\assumes ([equals(i,i0)]==&gt;[]) &#10;\find(equals(j,j0)==&gt;)&#10;\add [equals(add(i,j),add(i0,j0))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[38] add_equations_right, add_equations_right {&#10;\assumes ([equals(i,i0)]==&gt;[]) &#10;\find(==&gt;equals(j,j0))&#10;\add []==&gt;[equals(add(i,j),add(i0,j0))] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[39] add_greater, add_greater {&#10;\find(gt(i,i0))&#10;\replacewith(gt(add(i1,i),add(i1,i0))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[40] add_greatereq, add_greatereq {&#10;\find(geq(i,i0))&#10;\replacewith(geq(add(i1,i),add(i1,i0))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[41] add_less, add_less {&#10;\find(lt(i,i0))&#10;\replacewith(lt(add(i1,i),add(i1,i0))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[42] add_less_back, add_less_back {&#10;\find(lt(add(i1,i),add(i1,i0)))&#10;\replacewith(lt(i,i0)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[43] add_less_back_zero_1, add_less_back_zero_1 {&#10;\find(lt(i,add(i,i1)))&#10;\replacewith(lt(Z(0(#)),i1)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[44] add_less_back_zero_1_comm, add_less_back_zero_1_comm {&#10;\find(lt(i,add(i1,i)))&#10;\replacewith(lt(Z(0(#)),i1)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[45] add_less_back_zero_2, add_less_back_zero_2 {&#10;\find(lt(add(i,i1),i))&#10;\replacewith(lt(i1,Z(0(#)))) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[46] add_less_back_zero_2_comm, add_less_back_zero_2_comm {&#10;\find(lt(add(i1,i),i))&#10;\replacewith(lt(i1,Z(0(#)))) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[47] add_lesseq, add_lesseq {&#10;\find(leq(i,i0))&#10;\replacewith(leq(add(i1,i),add(i1,i0))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[48] add_literals, add_literals {&#10;\find(add(Z(iz),Z(jz)))&#10;\replacewith(#add(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[49] add_non_neg_square, add_non_neg_square {&#10;\add [geq(mul(squareFac,squareFac),Z(0(#)))]==&gt;[] &#10;\heuristics(inEqSimp_nonNegSquares, inEqSimp_special_nonLin)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[50] add_sub_elim_left, add_sub_elim_left {&#10;\find(add(neg(i),i))&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[51] add_sub_elim_right, add_sub_elim_right {&#10;\find(add(i,neg(i)))&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[52] add_sub_step, add_sub_step {&#10;\find(add(neg(i),neg(i0)))&#10;\replacewith(neg(add(i,i0))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[53] add_two_inequations_1, add_two_inequations_1 {&#10;\assumes ([lt(i,i0)]==&gt;[]) &#10;\find(lt(j,j0)==&gt;)&#10;\add [lt(add(i,j),add(i0,j0))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[54] add_two_inequations_2, add_two_inequations_2 {&#10;\assumes ([leq(i,i0)]==&gt;[]) &#10;\find(leq(j,j0)==&gt;)&#10;\add [leq(add(i,j),add(i0,j0))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[55] add_zero_left, add_zero_left {&#10;\find(add(Z(0(#)),i))&#10;\replacewith(i) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[56] add_zero_right, add_zero_right {&#10;\find(add(i,Z(0(#))))&#10;\replacewith(i) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[57] addition_associative, addition_associative {&#10;\find(add(add(i0,i1),add(j0,j1)))&#10;\replacewith(add(add(j0,i1),add(i0,j1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[58] allFieldsEq, allFieldsEq {&#10;\find(equals(allFields(o1),allFields(o2)))&#10;\replacewith(equals(o1,o2)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[59] allFieldsSubsetOf, allFieldsSubsetOf {&#10;\assumes ([subset(allFields(o),s)]==&gt;[]) &#10;\find(elementOf(o,f,s))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[60] allFieldsUnfold, allFieldsUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \all_fields(#nseObj);&#10;... }\] (post))&#10;\varcond(\new(#vObjNew (program Variable), \typeof(#nseObj (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseObj) #vObjNew = #nseObj;&#10;  #v = \all_fields(#vObjNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[61] allLeft, allLeft {&#10;\find(all{u (variable)}(b)==&gt;)&#10;\add [subst{u (variable)}(t,b)]==&gt;[] &#10;\heuristics(gamma)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[62] allLeftHide, allLeftHide {&#10;\find(all{u (variable)}(b)==&gt;)&#10;\addrules [insert_hidden {&#10;\add [all{u (variable)}(b)]==&gt;[] &#10;Choices: true}] \replacewith([subst{u (variable)}(t,b)]==&gt;[]) &#10;\heuristics(gamma_destructive)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[63] allObjectsAssignment, allObjectsAssignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \all_objects(#eObj.#a);&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#v (program Variable))(allObjects(#memberPVToField(#a))),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.014"/>
  <testcase name="[64] allRight, allRight {&#10;\find(==&gt;all{u (variable)}(b))&#10;\replacewith([]==&gt;[subst{u (variable)}(sk,b)]) &#10;\heuristics(delta)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[65] all_bool, all_bool {&#10;\find(all{x (variable)}(c))&#10;\replacewith(and(subst{x (variable)}(FALSE,c),subst{x (variable)}(TRUE,c))) &#10;\heuristics(boolean_cases)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[66] all_pull_out0, all_pull_out0 {&#10;\find(and(all{u (variable)}(b),c))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(all{u (variable)}(and(b,c))) &#10;\heuristics(pullOutQuantifierAll)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[67] all_pull_out1, all_pull_out1 {&#10;\find(and(c,all{u (variable)}(b)))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(all{u (variable)}(and(c,b))) &#10;\heuristics(pullOutQuantifierAll)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[68] all_pull_out2, all_pull_out2 {&#10;\find(or(all{u (variable)}(b),c))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(all{u (variable)}(or(b,c))) &#10;\heuristics(pullOutQuantifierAll)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[69] all_pull_out3, all_pull_out3 {&#10;\find(or(c,all{u (variable)}(b)))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(all{u (variable)}(or(c,b))) &#10;\heuristics(pullOutQuantifierAll)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[70] all_pull_out4, all_pull_out4 {&#10;\find(and(all{u (variable)}(b),all{u2 (variable)}(c)))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(all{u (variable)}(and(b,subst{u2 (variable)}(u,c)))) &#10;\heuristics(pullOutQuantifierUnifying, pullOutQuantifierAll)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[71] all_unused, all_unused {&#10;\find(all{u (variable)}(b))&#10;\varcond(\notFreeIn(u (variable), b (formula)))&#10;\replacewith(b) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[72] allocateInstance, allocateInstance {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #t.#allocate()@#t;&#10;... }\] (post))&#10;\varcond(\hasSort(#t2 (program Type), alphaObj), )&#10;\add [and(and(not(equals(#lhs,null)),imp(wellFormed(heap),equals(boolean::select(heap,#lhs,java.lang.Object::&lt;created&gt;),FALSE))),equals(alphaObj::exactInstance(#lhs),TRUE))]==&gt;[] \replacewith([]==&gt;[update-application(elem-update(heap)(create(heap,#lhs)),#allmodal(post))]) &#10;\heuristics(method_expand)&#10;Choices: (programRules:Java &amp; permissions:off)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[73] allocateInstanceWithLength, allocateInstanceWithLength {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #t.#allocate(#len)@#t;&#10;... }\] (post))&#10;\varcond(\hasSort(#t2 (program Type), alphaObj), )&#10;\add [and(and(not(equals(#lhs,null)),imp(wellFormed(heap),and(equals(boolean::select(heap,#lhs,java.lang.Object::&lt;created&gt;),FALSE),equals(length(#lhs),#len)))),equals(alphaObj::exactInstance(#lhs),TRUE))]==&gt;[] \replacewith([]==&gt;[update-application(elem-update(heap)(store(store(create(heap,#lhs),#lhs,java.lang.Object::&lt;transient&gt;,Z(0(#))…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[74] altAxiom, altAxiom {&#10;\find(match(alt(rexp1,rexp2),string))&#10;\replacewith(or(match(rexp1,string),match(rexp2,string))) &#10;\heuristics(simplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[75] andJIntDef, andJIntDef {&#10;\find(andJint(left,right))&#10;\replacewith(moduloInt(binaryAnd(left,right))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[76] andLeft, andLeft {&#10;\find(and(b,c)==&gt;)&#10;\replacewith([b,c]==&gt;[]) &#10;\heuristics(alpha)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[77] andRight, andRight {&#10;\find(==&gt;and(b,c))&#10;\replacewith([]==&gt;[c]) ;&#10;\replacewith([]==&gt;[b]) &#10;\heuristics(beta)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[78] applyEq, applyEq {&#10;\assumes ([equals(s,t1)]==&gt;[]) &#10;\find(s)&#10;\sameUpdateLevel\replacewith(t1) &#10;\heuristics(apply_select_eq, apply_equations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[79] applyEqReverse, applyEqReverse {&#10;\assumes ([equals(s,t1)]==&gt;[]) &#10;\find(t1)&#10;\sameUpdateLevel\replacewith(s) &#10;\heuristics(apply_auxiliary_eq)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[80] applyEqRigid, applyEqRigid {&#10;\assumes ([equals(sr,tr1)]==&gt;[]) &#10;\find(sr)&#10;\replacewith(tr1) &#10;\heuristics(apply_equations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[81] applyEq_and_gen0, applyEq_and_gen0 {&#10;\find(and(equals(applyEqLeft,applyEqOther),equals(applyEqLeft,applyEqRight)))&#10;\replacewith(and(equals(applyEqRight,applyEqOther),equals(applyEqLeft,applyEqRight))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[82] applyEq_and_gen1, applyEq_and_gen1 {&#10;\find(and(and(b,equals(applyEqLeft,applyEqOther)),equals(applyEqLeft,applyEqRight)))&#10;\replacewith(and(and(b,equals(applyEqRight,applyEqOther)),equals(applyEqLeft,applyEqRight))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[83] applyEq_and_gen2, applyEq_and_gen2 {&#10;\find(and(not(equals(applyEqLeft,applyEqOther)),equals(applyEqLeft,applyEqRight)))&#10;\replacewith(and(not(equals(applyEqRight,applyEqOther)),equals(applyEqLeft,applyEqRight))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[84] applyEq_and_gen3, applyEq_and_gen3 {&#10;\find(and(and(b,not(equals(applyEqLeft,applyEqOther))),equals(applyEqLeft,applyEqRight)))&#10;\replacewith(and(and(b,not(equals(applyEqRight,applyEqOther))),equals(applyEqLeft,applyEqRight))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[85] applyEq_and_int0, applyEq_and_int0 {&#10;\find(and(geq(applyEqLeft,applyEqOther),equals(applyEqLeft,applyEqRight)))&#10;\replacewith(and(geq(applyEqRight,applyEqOther),equals(applyEqLeft,applyEqRight))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[86] applyEq_and_int1, applyEq_and_int1 {&#10;\find(and(and(b,geq(applyEqLeft,applyEqOther)),equals(applyEqLeft,applyEqRight)))&#10;\replacewith(and(and(b,geq(applyEqRight,applyEqOther)),equals(applyEqLeft,applyEqRight))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[87] applyEq_and_int2, applyEq_and_int2 {&#10;\find(and(leq(applyEqLeft,applyEqOther),equals(applyEqLeft,applyEqRight)))&#10;\replacewith(and(leq(applyEqRight,applyEqOther),equals(applyEqLeft,applyEqRight))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[88] applyEq_and_int3, applyEq_and_int3 {&#10;\find(and(and(b,leq(applyEqLeft,applyEqOther)),equals(applyEqLeft,applyEqRight)))&#10;\replacewith(and(and(b,leq(applyEqRight,applyEqOther)),equals(applyEqLeft,applyEqRight))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[89] applyEq_and_int4, applyEq_and_int4 {&#10;\find(and(equals(applyEqLeft,applyEqRight),geq(applyEqLeft,applyEqOther)))&#10;\replacewith(and(equals(applyEqLeft,applyEqRight),geq(applyEqRight,applyEqOther))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[90] applyEq_and_int5, applyEq_and_int5 {&#10;\find(and(and(b,equals(applyEqLeft,applyEqRight)),geq(applyEqLeft,applyEqOther)))&#10;\replacewith(and(and(b,equals(applyEqLeft,applyEqRight)),geq(applyEqRight,applyEqOther))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[91] applyEq_and_int6, applyEq_and_int6 {&#10;\find(and(equals(applyEqLeft,applyEqRight),leq(applyEqLeft,applyEqOther)))&#10;\replacewith(and(equals(applyEqLeft,applyEqRight),leq(applyEqRight,applyEqOther))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[92] applyEq_and_int7, applyEq_and_int7 {&#10;\find(and(and(b,equals(applyEqLeft,applyEqRight)),leq(applyEqLeft,applyEqOther)))&#10;\replacewith(and(and(b,equals(applyEqLeft,applyEqRight)),leq(applyEqRight,applyEqOther))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[93] applyEq_or_gen0, applyEq_or_gen0 {&#10;\find(or(equals(applyEqLeft,applyEqOther),not(equals(applyEqLeft,applyEqRight))))&#10;\replacewith(or(equals(applyEqRight,applyEqOther),not(equals(applyEqLeft,applyEqRight)))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[94] applyEq_or_gen1, applyEq_or_gen1 {&#10;\find(or(or(b,equals(applyEqLeft,applyEqOther)),not(equals(applyEqLeft,applyEqRight))))&#10;\replacewith(or(or(b,equals(applyEqRight,applyEqOther)),not(equals(applyEqLeft,applyEqRight)))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[95] applyEq_or_gen2, applyEq_or_gen2 {&#10;\find(or(not(equals(applyEqLeft,applyEqOther)),not(equals(applyEqLeft,applyEqRight))))&#10;\replacewith(or(not(equals(applyEqRight,applyEqOther)),not(equals(applyEqLeft,applyEqRight)))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[96] applyEq_or_gen3, applyEq_or_gen3 {&#10;\find(or(or(b,not(equals(applyEqLeft,applyEqOther))),not(equals(applyEqLeft,applyEqRight))))&#10;\replacewith(or(or(b,not(equals(applyEqRight,applyEqOther))),not(equals(applyEqLeft,applyEqRight)))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[97] applyEq_or_int0, applyEq_or_int0 {&#10;\find(or(geq(applyEqLeft,applyEqOther),not(equals(applyEqLeft,applyEqRight))))&#10;\replacewith(or(geq(applyEqRight,applyEqOther),not(equals(applyEqLeft,applyEqRight)))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[98] applyEq_or_int1, applyEq_or_int1 {&#10;\find(or(or(b,geq(applyEqLeft,applyEqOther)),not(equals(applyEqLeft,applyEqRight))))&#10;\replacewith(or(or(b,geq(applyEqRight,applyEqOther)),not(equals(applyEqLeft,applyEqRight)))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[99] applyEq_or_int2, applyEq_or_int2 {&#10;\find(or(leq(applyEqLeft,applyEqOther),not(equals(applyEqLeft,applyEqRight))))&#10;\replacewith(or(leq(applyEqRight,applyEqOther),not(equals(applyEqLeft,applyEqRight)))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[100] applyEq_or_int3, applyEq_or_int3 {&#10;\find(or(or(b,leq(applyEqLeft,applyEqOther)),not(equals(applyEqLeft,applyEqRight))))&#10;\replacewith(or(or(b,leq(applyEqRight,applyEqOther)),not(equals(applyEqLeft,applyEqRight)))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[101] applyEq_or_int4, applyEq_or_int4 {&#10;\find(or(not(equals(applyEqLeft,applyEqRight)),geq(applyEqLeft,applyEqOther)))&#10;\replacewith(or(not(equals(applyEqLeft,applyEqRight)),geq(applyEqRight,applyEqOther))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[102] applyEq_or_int5, applyEq_or_int5 {&#10;\find(or(or(b,not(equals(applyEqLeft,applyEqRight))),geq(applyEqLeft,applyEqOther)))&#10;\replacewith(or(or(b,not(equals(applyEqLeft,applyEqRight))),geq(applyEqRight,applyEqOther))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[103] applyEq_or_int6, applyEq_or_int6 {&#10;\find(or(not(equals(applyEqLeft,applyEqRight)),leq(applyEqLeft,applyEqOther)))&#10;\replacewith(or(not(equals(applyEqLeft,applyEqRight)),leq(applyEqRight,applyEqOther))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[104] applyEq_or_int7, applyEq_or_int7 {&#10;\find(or(or(b,not(equals(applyEqLeft,applyEqRight))),leq(applyEqLeft,applyEqOther)))&#10;\replacewith(or(or(b,not(equals(applyEqLeft,applyEqRight))),leq(applyEqRight,applyEqOther))) &#10;\heuristics(apply_equations_andOr)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[105] applyOnElementary, applyOnElementary {&#10;\find(update-application(u,elem-update(#pv (program Variable))(t)))&#10;\replacewith(elem-update(#pv (program Variable))(update-application(u,t))) &#10;\heuristics(update_apply_on_update)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[106] applyOnPV, applyOnPV {&#10;\find(update-application(elem-update(#pv (program Variable))(t),#pv))&#10;\replacewith(t) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[107] applyOnParallel, applyOnParallel {&#10;\find(update-application(u,parallel-upd(u2,u3)))&#10;\replacewith(parallel-upd(update-application(u,u2),update-application(u,u3))) &#10;\heuristics(update_apply_on_update)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[108] applyOnRigidFormula, applyOnRigidFormula {&#10;\find(update-application(u,phi))&#10;\varcond(\applyUpdateOnRigid(u (update), phi (formula), result (formula)), )&#10;\replacewith(result) &#10;\heuristics(update_apply)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[109] applyOnRigidTerm, applyOnRigidTerm {&#10;\find(update-application(u,t))&#10;\varcond(\applyUpdateOnRigid(u (update), t (any term), result (any term)), )&#10;\replacewith(result) &#10;\heuristics(update_apply)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[110] applyOnSkip, applyOnSkip {&#10;\find(update-application(u,skip))&#10;\replacewith(skip) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[111] applySkip1, applySkip1 {&#10;\find(update-application(skip,t))&#10;\replacewith(t) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[112] applySkip2, applySkip2 {&#10;\find(update-application(skip,phi))&#10;\replacewith(phi) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[113] applySkip3, applySkip3 {&#10;\find(update-application(skip,u))&#10;\replacewith(u) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[114] apply_eq_boolean, apply_eq_boolean {&#10;\assumes ([]==&gt;[equals(bo,TRUE)]) &#10;\find(bo)&#10;\sameUpdateLevel\replacewith(FALSE) &#10;\heuristics(apply_equations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[115] apply_eq_boolean_2, apply_eq_boolean_2 {&#10;\assumes ([]==&gt;[equals(bo,FALSE)]) &#10;\find(bo)&#10;\sameUpdateLevel\replacewith(TRUE) &#10;\heuristics(apply_equations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[116] apply_eq_boolean_rigid, apply_eq_boolean_rigid {&#10;\assumes ([]==&gt;[equals(br,TRUE)]) &#10;\find(br)&#10;\replacewith(FALSE) &#10;\heuristics(apply_equations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[117] apply_eq_boolean_rigid_2, apply_eq_boolean_rigid_2 {&#10;\assumes ([]==&gt;[equals(br,FALSE)]) &#10;\find(br)&#10;\replacewith(TRUE) &#10;\heuristics(apply_equations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[118] apply_eq_monomials, apply_eq_monomials {&#10;\assumes ([equals(applyEqDivisor,i0)]==&gt;[]) &#10;\find(applyEqDividend)&#10;\sameUpdateLevel\replacewith(add(mul(#divideMonomials(applyEqDividend,applyEqDivisor),add(i0,mul(applyEqDivisor,Z(neglit(1(#)))))),applyEqDividend)) &#10;\heuristics(notHumanReadable, apply_equations, polySimp_applyEq)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[119] apply_eq_monomials_rigid, apply_eq_monomials_rigid {&#10;\assumes ([equals(applyEqDivisorr,i0r)]==&gt;[]) &#10;\find(applyEqDividend)&#10;\replacewith(add(mul(#divideMonomials(applyEqDividend,applyEqDivisorr),add(i0r,mul(applyEqDivisorr,Z(neglit(1(#)))))),applyEqDividend)) &#10;\heuristics(notHumanReadable, apply_equations, polySimp_applyEqRigid)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[120] apply_eq_pseudo_eq, apply_eq_pseudo_eq {&#10;\assumes ([equals(mul(aePseudoLeft,aePseudoLeftCoeff),aePseudoRight)]==&gt;[]) &#10;\find(equals(aePseudoTargetLeft,aePseudoTargetRight))&#10;\sameUpdateLevel\replacewith(if-then-else(and(equals(aePseudoTargetLeft,mul(aePseudoLeft,aePseudoTargetFactor)),not(equals(aePseudoLeftCoeff,Z(0(#))))),equals(mul(aePseudoRight,aePseudoTargetFactor),mul(aePseudoTargetRight,aePseudoLeftCoeff)),equals(aePseudoTargetLeft,aePseudoTargetRight))) &#10;\heuristics(notHumanReadable, notHumanReadable, polySimp_applyEqPs…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[121] apply_eq_pseudo_geq, apply_eq_pseudo_geq {&#10;\assumes ([equals(mul(aePseudoLeft,aePseudoLeftCoeff),aePseudoRight)]==&gt;[]) &#10;\find(geq(aePseudoTargetLeft,aePseudoTargetRight))&#10;\sameUpdateLevel\replacewith(if-then-else(and(equals(aePseudoTargetLeft,mul(aePseudoLeft,aePseudoTargetFactor)),gt(aePseudoLeftCoeff,Z(0(#)))),geq(mul(aePseudoRight,aePseudoTargetFactor),mul(aePseudoTargetRight,aePseudoLeftCoeff)),geq(aePseudoTargetLeft,aePseudoTargetRight))) &#10;\heuristics(notHumanReadable, polySimp_applyEqPseudo, polySimp_leftNonUnit)&#10;Choices…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[122] apply_eq_pseudo_leq, apply_eq_pseudo_leq {&#10;\assumes ([equals(mul(aePseudoLeft,aePseudoLeftCoeff),aePseudoRight)]==&gt;[]) &#10;\find(leq(aePseudoTargetLeft,aePseudoTargetRight))&#10;\sameUpdateLevel\replacewith(if-then-else(and(equals(aePseudoTargetLeft,mul(aePseudoLeft,aePseudoTargetFactor)),gt(aePseudoLeftCoeff,Z(0(#)))),leq(mul(aePseudoRight,aePseudoTargetFactor),mul(aePseudoTargetRight,aePseudoLeftCoeff)),leq(aePseudoTargetLeft,aePseudoTargetRight))) &#10;\heuristics(notHumanReadable, polySimp_applyEqPseudo, polySimp_leftNonUnit)&#10;Choices…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[123] apply_subst, apply_subst {&#10;\find(subst{u (variable)}(t,target))&#10;\replacewith(subst{u (variable)}(t,target)) &#10;\heuristics(try_apply_subst)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[124] apply_subst_for, apply_subst_for {&#10;\find(subst{u (variable)}(t,phi))&#10;\replacewith(subst{u (variable)}(t,phi)) &#10;\heuristics(try_apply_subst)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[125] array2seqDef, array2seqDef {&#10;\find(array2seq(h,a))&#10;\varcond(\notFreeIn(u (variable), h (Heap term)), \notFreeIn(u (variable), a (java.lang.Object term)))&#10;\replacewith(seqDef{u (variable)}(Z(0(#)),length(a),any::select(h,a,arr(u)))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[126] arrayCreation, arrayCreation {&#10;\find(#normal ( (modal operator))\[{ ..&#10;  #lhs = #na;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#na (program ArrayCreation))))&#10;\replacewith(#normal ( (modal operator))\[{ ..&#10;  #typeof(#na) #v0;&#10;  init-array-creation(#na)&#10;  #lhs = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[127] arrayCreationWithInitializers, arrayCreationWithInitializers {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #arrayinitializer;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#lhs (program LeftHandSide))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#lhs) #v0;&#10;  init-array-creation(#arrayinitializer)&#10;  #lhs = #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[128] arrayInitialisation, arrayInitialisation {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  for (int #v = #se; #v &lt; this.#length; #v++)&#10;    this[#v] = #lit;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(heap)(memset(heap,arrayRange(#a,#se,sub(length(#a),Z(1(#)))),#lit)),#allmodal(post))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[129] arrayLengthIsAShort, arrayLengthIsAShort {&#10;\find(length(o))&#10;\sameUpdateLevel\add [inShort(length(o))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[130] arrayLengthNotNegative, arrayLengthNotNegative {&#10;\find(length(o))&#10;\sameUpdateLevel\add [geq(length(o),Z(0(#)))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[131] array_post_declaration, array_post_declaration {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #arraypost&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  array-post-declaration(#arraypost)&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[132] array_self_reference, array_self_reference {&#10;\assumes ([wellFormed(heapSV)]==&gt;[equals(array,null)]) &#10;\find(arrayStoreValid(array,G::select(heapSV,array,arr(idx))))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[133] array_self_reference_eq, array_self_reference_eq {&#10;\assumes ([wellFormed(heapSV),equals(G::select(heapSV,array,arr(idx)),EQ)]==&gt;[equals(array,null)]) &#10;\find(arrayStoreValid(array,EQ))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[134] array_store_known_dynamic_array_type, array_store_known_dynamic_array_type {&#10;\assumes ([equals(J::exactInstance(array),TRUE)]==&gt;[]) &#10;\find(arrayStoreValid(array,obj))&#10;\sameUpdateLevel\varcond(\isReference[non_null]( J ), )&#10;\replacewith(or(equals(obj,null),equals(#arrayBaseInstanceOf(J::exactInstance(array),obj),TRUE))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[135] asinIsNaN, asinIsNaN {&#10;\find(asinDouble(arg))&#10;\add [imp(or(or(doubleIsNaN(arg),ltDouble(arg,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))),gtDouble(arg,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),doubleIsNaN(asinDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.01"/>
  <testcase name="[136] asineIsZero, asineIsZero {&#10;\find(asinDouble(arg))&#10;\add [imp(equals(arg,DFP(0(#))),equals(asinDouble(arg),DFP(0(#))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[137] asineRange, asineRange {&#10;\find(asinDouble(arg))&#10;\add [imp(and(geqDouble(arg,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),leqDouble(arg,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),and(geqDouble(asinDouble(arg),negDouble(DFP(2(5(3(5(7(6(4(2(9(6(5(0(3(5(7(9(0(6(4(#)))))))))))))))))))))),leqDouble(asinDouble(arg),DFP(2(5(3(5(7(6(4(2(9(6(5(0(3(5(7(9(0(6(4(#)))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[138] assertSafe, assertSafe {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  assert #e1;&#10;... }\] (b))&#10;\varcond(\new(#condition (program Variable), \typeof(#e1 (program Expression))), \not \containsAssignment( #e1 ), )&#10;\add [equals(oldHeap,heap)]==&gt;[] \replacewith([]==&gt;[\[{&#10;  method-frame (#ex) {&#10;    #typeof(#e1) #condition = #e1;&#10;  }&#10;}\] (all{f (variable)}(all{o (variable)}(or(and(not(equals(o,null)),equals(boolean::select(oldHeap,o,java.lang.Object::&lt;created&gt;),FALSE)),equals(any::select(oldHeap,o,f),any::select(heap,o,f))…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[139] assertSafeWithMessage, assertSafeWithMessage {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  assert #e1 : #e2;&#10;... }\] (b))&#10;\varcond(\new(#message (program Variable), \typeof(#e2 (program Expression))), \new(#condition (program Variable), \typeof(#e1 (program Expression))), \not \containsAssignment( #e1 ), \not \containsAssignment( #e2 ), )&#10;\add [equals(oldHeap,heap)]==&gt;[] \replacewith([]==&gt;[\[{&#10;  method-frame (#ex) {&#10;    #typeof(#e1) #condition = #e1;&#10;    #typeof(#e2) #message = #e2;&#10;  }&#10;}\] (all{f (variable)}(all{o (variable)…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[140] assignment, assignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(#se),#allmodal(post))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[141] assignmentAdditionBigint1, assignmentAdditionBigint1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seBigint + #seAny;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(add(#seBigint,#seAny)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[142] assignmentAdditionBigint2, assignmentAdditionBigint2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seAny + #seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(add(#seAny,#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[143] assignmentAdditionDouble, assignmentAdditionDouble {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 + #seDouble1;&#10;... }\] (post))&#10;\varcond(\not\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[144] assignmentAdditionDoubleStrictFP, assignmentAdditionDoubleStrictFP {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 + #seDouble1;&#10;... }\] (post))&#10;\varcond(\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(addDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeDoubleAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[145] assignmentAdditionFloat, assignmentAdditionFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 + #seFloat1;&#10;... }\] (post))&#10;\varcond(\not\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[146] assignmentAdditionFloatStrictFP, assignmentAdditionFloatStrictFP {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 + #seFloat1;&#10;... }\] (post))&#10;\varcond(\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(addFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[147] assignmentAdditionInt, assignmentAdditionInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 + #seCharByteShortInt1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddInt(#seCharByteShortInt0,#seCharByteShortInt1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[148] assignmentAdditionLong, assignmentAdditionLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt + #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddLong(#seCharByteShortInt,#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[149] assignmentAdditionLong2, assignmentAdditionLong2 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong + #seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddLong(#seLong,#seCharByteShortInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[150] assignmentAdditionLong3, assignmentAdditionLong3 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 + #seLong1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddLong(#seLong0,#seLong1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[151] assignmentBitwiseAndInt, assignmentBitwiseAndInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 &amp; #seCharByteShortInt1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseAndInt(#seCharByteShortInt0,#seCharByteShortInt1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[152] assignmentBitwiseAndLong, assignmentBitwiseAndLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt &amp; #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseAndLong(#seCharByteShortInt,#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[153] assignmentBitwiseAndLong2, assignmentBitwiseAndLong2 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong &amp; #seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseAndLong(#seLong,#seCharByteShortInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[154] assignmentBitwiseAndLong3, assignmentBitwiseAndLong3 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 &amp; #seLong1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseAndLong(#seLong0,#seLong1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[155] assignmentBitwiseOrInt, assignmentBitwiseOrInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 | #seCharByteShortInt1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseOrInt(#seCharByteShortInt0,#seCharByteShortInt1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[156] assignmentBitwiseOrLong, assignmentBitwiseOrLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt | #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseOrLong(#seCharByteShortInt,#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[157] assignmentBitwiseOrLong2, assignmentBitwiseOrLong2 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong | #seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseOrLong(#seLong,#seCharByteShortInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[158] assignmentBitwiseOrLong3, assignmentBitwiseOrLong3 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 | #seLong1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseOrLong(#seLong0,#seLong1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[159] assignmentBitwiseXOrInt, assignmentBitwiseXOrInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 ^ #seCharByteShortInt1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseXOrInt(#seCharByteShortInt0,#seCharByteShortInt1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[160] assignmentBitwiseXOrLong, assignmentBitwiseXOrLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt ^ #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseXOrLong(#seCharByteShortInt,#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[161] assignmentBitwiseXOrLong2, assignmentBitwiseXOrLong2 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong ^ #seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseXOrLong(#seLong,#seCharByteShortInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[162] assignmentBitwiseXOrLong3, assignmentBitwiseXOrLong3 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 ^ #seLong1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseXOrLong(#seLong0,#seLong1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[163] assignmentDivisionBigint1, assignmentDivisionBigint1 {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seBigint / #seAny;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#seAny,Z(0(#))))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#loc (program Variable))(div(#seBigint,#seAny)),#allmodal(post))]) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: ((programRules:Java &amp; bigint:on) &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[164] assignmentDivisionBigint2, assignmentDivisionBigint2 {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seAny / #seBigint;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#seBigint,Z(0(#))))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#loc (program Variable))(div(#seAny,#seBigint)),#allmodal(post))]) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: ((programRules:Java &amp; bigint:on) &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[165] assignmentDivisionDouble, assignmentDivisionDouble {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 / #seDouble1;&#10;... }\] (post))&#10;\varcond(\not\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaDivDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[166] assignmentDivisionDoubleStrictFP, assignmentDivisionDoubleStrictFP {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 / #seDouble1;&#10;... }\] (post))&#10;\varcond(\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(divDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeDoubleAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[167] assignmentDivisionFloat, assignmentDivisionFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 / #seFloat1;&#10;... }\] (post))&#10;\varcond(\not\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaDivFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[168] assignmentDivisionFloatStrictFP, assignmentDivisionFloatStrictFP {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 / #seFloat1;&#10;... }\] (post))&#10;\varcond(\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(divFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[169] assignmentDivisionInt, assignmentDivisionInt {&#10;\find(==&gt;#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 / #seCharByteShortInt1;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#seCharByteShortInt1,Z(0(#))))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#loc (program Variable))(javaDivInt(#seCharByteShortInt0,#seCharByteShortInt1)),#normalassign(post))]) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[170] assignmentDivisionLong, assignmentDivisionLong {&#10;\find(==&gt;#normalassign ( (modal operator))\[{ ..&#10;  #loc = #se / #seLong;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#seLong,Z(0(#))))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#loc (program Variable))(javaDivLong(#se,#seLong)),#normalassign(post))]) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[171] assignmentDivisionLong2, assignmentDivisionLong2 {&#10;\find(==&gt;#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong / #seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#seCharByteShortInt,Z(0(#))))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#loc (program Variable))(javaDivLong(#seLong,#seCharByteShortInt)),#normalassign(post))]) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[172] assignmentModDouble, assignmentModDouble {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 % #seDouble1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaModDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[173] assignmentModFloat, assignmentModFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 % #seFloat1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaModFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[174] assignmentModulo, assignmentModulo {&#10;\find(==&gt;#normalassign ( (modal operator))\[{ ..&#10;  #loc = #se0 % #se1;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#se1,Z(0(#))))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#loc (program Variable))(javaMod(#se0,#se1)),#normalassign(post))]) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[175] assignmentModuloBigint1, assignmentModuloBigint1 {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seBigint % #seAny;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#seAny,Z(0(#))))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#loc (program Variable))(mod(#seBigint,#seAny)),#allmodal(post))]) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: ((programRules:Java &amp; bigint:on) &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[176] assignmentModuloBigint2, assignmentModuloBigint2 {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seAny % #seBigint;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#seBigint,Z(0(#))))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#loc (program Variable))(mod(#seAny,#seBigint)),#allmodal(post))]) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: ((programRules:Java &amp; bigint:on) &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[177] assignmentMultiplicationBigint1, assignmentMultiplicationBigint1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seBigint * #seAny;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(mul(#seBigint,#seAny)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[178] assignmentMultiplicationBigint2, assignmentMultiplicationBigint2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seAny * #seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(mul(#seAny,#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[179] assignmentMultiplicationDouble, assignmentMultiplicationDouble {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 * #seDouble1;&#10;... }\] (post))&#10;\varcond(\not\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaMulDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[180] assignmentMultiplicationDoubleStrictFP, assignmentMultiplicationDoubleStrictFP {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 * #seDouble1;&#10;... }\] (post))&#10;\varcond(\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(mulDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeDoubleAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[181] assignmentMultiplicationFloat, assignmentMultiplicationFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 * #seFloat1;&#10;... }\] (post))&#10;\varcond(\not\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaMulFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[182] assignmentMultiplicationFloatStrictFP, assignmentMultiplicationFloatStrictFP {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 * #seFloat1;&#10;... }\] (post))&#10;\varcond(\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(mulFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[183] assignmentMultiplicationInt, assignmentMultiplicationInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 * #seCharByteShortInt1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaMulInt(#seCharByteShortInt0,#seCharByteShortInt1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[184] assignmentMultiplicationLong, assignmentMultiplicationLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt * #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaMulLong(#seCharByteShortInt,#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[185] assignmentMultiplicationLong2, assignmentMultiplicationLong2 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong * #seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaMulLong(#seLong,#seCharByteShortInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[186] assignmentMultiplicationLong3, assignmentMultiplicationLong3 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 * #seLong1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaMulLong(#seLong0,#seLong1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[187] assignmentShiftLeftInt, assignmentShiftLeftInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 &lt;&lt; #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaShiftLeftInt(#seCharByteShortInt0,#se)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[188] assignmentShiftLeftLong, assignmentShiftLeftLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 &lt;&lt; #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaShiftLeftLong(#seLong0,#se)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[189] assignmentShiftRightInt, assignmentShiftRightInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 &gt;&gt; #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaShiftRightInt(#seCharByteShortInt0,#se)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[190] assignmentShiftRightLong, assignmentShiftRightLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 &gt;&gt; #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaShiftRightLong(#seLong0,#se)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[191] assignmentSubtractionBigint1, assignmentSubtractionBigint1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seBigint - #seAny;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(sub(#seBigint,#seAny)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[192] assignmentSubtractionBigint2, assignmentSubtractionBigint2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = #seAny - #seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(sub(#seAny,#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[193] assignmentSubtractionDouble, assignmentSubtractionDouble {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 - #seDouble1;&#10;... }\] (post))&#10;\varcond(\not\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaSubDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[194] assignmentSubtractionDoubleStrictFP, assignmentSubtractionDoubleStrictFP {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble0 - #seDouble1;&#10;... }\] (post))&#10;\varcond(\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(subDouble(#seDouble0,#seDouble1)),#normalassign(post))) &#10;\heuristics(executeDoubleAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[195] assignmentSubtractionFloat, assignmentSubtractionFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 - #seFloat1;&#10;... }\] (post))&#10;\varcond(\not\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaSubFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[196] assignmentSubtractionFloatStrictFP, assignmentSubtractionFloatStrictFP {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat0 - #seFloat1;&#10;... }\] (post))&#10;\varcond(\isStrictFp, )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(subFloat(#seFloat0,#seFloat1)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[197] assignmentSubtractionInt, assignmentSubtractionInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 - #seCharByteShortInt1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaSubInt(#seCharByteShortInt0,#seCharByteShortInt1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[198] assignmentSubtractionLong, assignmentSubtractionLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt - #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaSubLong(#seCharByteShortInt,#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[199] assignmentSubtractionLong2, assignmentSubtractionLong2 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong - #seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaSubLong(#seLong,#seCharByteShortInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[200] assignmentSubtractionLong3, assignmentSubtractionLong3 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 - #seLong1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaSubLong(#seLong0,#seLong1)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[201] assignmentUnsignedShiftRightInt, assignmentUnsignedShiftRightInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt0 &gt;&gt;&gt; #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaUnsignedShiftRightInt(#seCharByteShortInt0,#se)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[202] assignmentUnsignedShiftRightLong, assignmentUnsignedShiftRightLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong0 &gt;&gt;&gt; #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaUnsignedShiftRightLong(#seLong0,#se)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[203] assignment_array2, assignment_array2 {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #v = #v0[#se];&#10;... }\] (post))&#10;\varcond(\hasSort(\elemSort(#v0 (program Variable)), G), )&#10;\add [and(not(equals(#v0,null)),or(leq(length(#v0),#se),lt(#se,Z(0(#)))))]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\add [equals(#v0,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#v (program Variable))(G::select(heap,#v0,arr(#se))),#allmodal(post))]) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (progr…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[204] assignment_read_attribute, assignment_read_attribute {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #v0 = #v.#a;&#10;... }\] (post))&#10;\varcond( \not \static(#a (program Variable)),  \not \isArrayLength(#a (program Variable)), \hasSort(#a (program Variable), G), \not\isThisReference (#v (program Variable)), )&#10;\add [equals(#v,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#v0 (program Variable))(G::select(heap,#v,#memberPVToField(#a))),#allmodal(post))]) &#10;\heuristics(simplify_prog_subset, simpl…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[205] assignment_read_attribute_this, assignment_read_attribute_this {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #v0 = #v.#a;&#10;... }\] (post))&#10;\varcond( \not \static(#a (program Variable)),  \not \isArrayLength(#a (program Variable)), \hasSort(#a (program Variable), G), \isThisReference (#v (program Variable)), )&#10;\replacewith([]==&gt;[update-application(elem-update(#v0 (program Variable))(G::select(heap,#v,#memberPVToField(#a))),#allmodal(post))]) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; runtimeException…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[206] assignment_read_length, assignment_read_length {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #v0 = #v.#length;&#10;... }\] (post))&#10;\varcond(\not\isThisReference (#v (program Variable)), )&#10;\add [equals(#v,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#v0 (program Variable))(length(#v)),#allmodal(post))]) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[207] assignment_read_length_this, assignment_read_length_this {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v0 = #v.#length;&#10;... }\] (post))&#10;\sameUpdateLevel\varcond(\isThisReference (#v (program Variable)), )&#10;\replacewith(update-application(elem-update(#v0 (program Variable))(length(#v)),#allmodal(post))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[208] assignment_read_static_attribute, assignment_read_static_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v0 = @(#sv);&#10;... }\] (post))&#10;\sameUpdateLevel\varcond(\hasSort(#sv (program StaticVariable), G), )&#10;\replacewith(update-application(elem-update(#v0 (program Variable))(G::select(heap,null,#memberPVToField(#sv))),#allmodal(post))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[209] assignment_read_static_attribute_with_variable_prefix, assignment_read_static_attribute_with_variable_prefix {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = @(#v.#sv);&#10;... }\] (post))&#10;\varcond(\hasSort(#sv (program StaticVariable), G), )&#10;\replacewith(update-application(elem-update(#loc (program Variable))(G::select(heap,#v,#memberPVToField(#sv))),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.007"/>
  <testcase name="[210] assignment_to_primitive_array_component, assignment_to_primitive_array_component {&#10;\find(==&gt;#normal ( (modal operator))\[{ ..&#10;  #v[#se] = #se0;&#10;... }\] (post))&#10;\varcond( \not \isReferenceArray(#v (program Variable)), )&#10;\add [and(not(equals(#v,null)),or(leq(length(#v),#se),lt(#se,Z(0(#)))))]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\add [equals(#v,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(heap)(store(heap,#v,arr(#se),#se0)),#normal(post))]) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (progra…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[211] assignment_to_primitive_array_component_transaction, assignment_to_primitive_array_component_transaction {&#10;\find(==&gt;#transaction ( (modal operator))\[{ ..&#10;  #v[#se] = #se0;&#10;... }\] (post))&#10;\varcond( \not \isReferenceArray(#v (program Variable)), )&#10;\add [and(not(equals(#v,null)),or(leq(length(#v),#se),lt(#se,Z(0(#)))))]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\add [equals(#v,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(heap)(store(heap,#v,arr(#se),#se0)),update-application(elem-update(savedHeap)(if-then-else(equals(int:…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[212] assignment_to_reference_array_component, assignment_to_reference_array_component {&#10;\find(==&gt;#normal ( (modal operator))\[{ ..&#10;  #v[#se] = #se0;&#10;... }\] (post))&#10;\varcond(\isReferenceArray(#v (program Variable)), )&#10;\add [and(and(and(not(equals(#v,null)),lt(#se,length(#v))),geq(#se,Z(0(#)))),not(arrayStoreValid(#v,#se0)))]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\add [and(not(equals(#v,null)),or(leq(length(#v),#se),lt(#se,Z(0(#)))))]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\add [equals(#v,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[update-applic…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[213] assignment_to_reference_array_component_transaction, assignment_to_reference_array_component_transaction {&#10;\find(==&gt;#transaction ( (modal operator))\[{ ..&#10;  #v[#se] = #se0;&#10;... }\] (post))&#10;\varcond(\isReferenceArray(#v (program Variable)), )&#10;\add [and(and(and(not(equals(#v,null)),lt(#se,length(#v))),geq(#se,Z(0(#)))),not(arrayStoreValid(#v,#se0)))]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\add [and(not(equals(#v,null)),or(leq(length(#v),#se),lt(#se,Z(0(#)))))]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\add [equals(#v,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[214] assignment_write_array_this_access_normalassign, assignment_write_array_this_access_normalassign {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  this[#se] = #se0;&#10;... }\] (post))&#10;\replacewith(imp(and(lt(#se,length(#v)),lt(Z(neglit(1(#))),#se)),update-application(elem-update(heap)(store(heap,#v,arr(#se),#se0)),#allmodal(post)))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; permissions:off)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[215] assignment_write_attribute, assignment_write_attribute {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #v.#a = #se;&#10;... }\] (post))&#10;\varcond( \not \static(#a (program Variable)), \not\isThisReference (#v (program Variable)), )&#10;\add [equals(#v,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(heap)(store(heap,#v,#memberPVToField(#a),#se)),#allmodal(post))]) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[216] assignment_write_attribute_this, assignment_write_attribute_this {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #v.#a = #se;&#10;... }\] (post))&#10;\varcond( \not \static(#a (program Variable)), \isThisReference (#v (program Variable)), )&#10;\replacewith([]==&gt;[update-application(elem-update(heap)(store(heap,#v,#memberPVToField(#a),#se)),#allmodal(post))]) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[217] assignment_write_static_attribute, assignment_write_static_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  @(#sv) = #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(heap)(store(heap,null,#memberPVToField(#sv),#se)),#allmodal(post))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[218] assignment_write_static_attribute_with_variable_prefix, assignment_write_static_attribute_with_variable_prefix {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  @(#v.#sv) = #se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(heap)(store(heap,#v,#memberPVToField(#sv),#se)),#allmodal(post))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[219] associativeLawIntersect, associativeLawIntersect {&#10;\find(intersect(s1,intersect(s2,s3)))&#10;\replacewith(intersect(intersect(s1,s2),s3)) &#10;\heuristics(conjNormalForm)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[220] associativeLawUnion, associativeLawUnion {&#10;\find(union(s1,union(s2,s3)))&#10;\replacewith(union(union(s1,s2),s3)) &#10;\heuristics(conjNormalForm)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[221] atan2IsNaN, atan2IsNaN {&#10;\find(atan2Double(arg1,arg2))&#10;\add [imp(or(doubleIsNaN(arg1),doubleIsNaN(arg2)),doubleIsNaN(atan2Double(arg1,arg2)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[222] atan2Range, atan2Range {&#10;\find(atan2Double(arg1,arg2))&#10;\add [imp(and(not(doubleIsNaN(arg1)),not(doubleIsNaN(arg2))),and(geqDouble(atan2Double(arg1,arg2),negDouble(DFP(8(4(8(5(4(0(2(5(5(6(5(6(6(5(2(4(1(6(4(#)))))))))))))))))))))),leqDouble(atan2Double(arg1,arg2),DFP(8(4(8(5(4(0(2(5(5(6(5(6(6(5(2(4(1(6(4(#)))))))))))))))))))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[223] atanIsNaN, atanIsNaN {&#10;\find(atanDouble(arg))&#10;\add [imp(doubleIsNaN(arg),doubleIsNaN(atanDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[224] atanIsZero, atanIsZero {&#10;\find(atanDouble(arg))&#10;\add [imp(equals(arg,DFP(0(#))),equals(atanDouble(arg),DFP(0(#))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[225] atanRange, atanRange {&#10;\find(atanDouble(arg))&#10;\add [imp(not(doubleIsNaN(arg)),and(geqDouble(atanDouble(arg),negDouble(DFP(2(5(3(5(7(6(4(2(9(6(5(0(3(5(7(9(0(6(4(#)))))))))))))))))))))),leqDouble(atanDouble(arg),DFP(2(5(3(5(7(6(4(2(9(6(5(0(3(5(7(9(0(6(4(#)))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[226] autoInductGEQ_Lemma_1, autoInductGEQ_Lemma_1 {&#10;\find(==&gt;and(all{uSub (variable)}(imp(leq(t,uSub),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(leq(t,uSub),b))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,b),true)]) &#10;\heuristics(induction_var, auto_induction_lemma)&#10;Choices: integerSimplificationRul…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[227] autoInductGEQ_Lemma_2, autoInductGEQ_Lemma_2 {&#10;\find(==&gt;and(all{uSub (variable)}(or(gt(t,uSub),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(leq(t,uSub),b))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,b),true)]) &#10;\heuristics(induction_var, auto_induction_lemma)&#10;Choices: integerSimplificationRules…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.021"/>
  <testcase name="[228] autoInductGEQ_Lemma_3, autoInductGEQ_Lemma_3 {&#10;\find(==&gt;and(all{uSub (variable)}(or(lt(uSub,t),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(leq(t,uSub),b))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,b),true)]) &#10;\heuristics(induction_var, auto_induction_lemma)&#10;Choices: integerSimplificationRules…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[229] autoInductGEQ_Lemma_5, autoInductGEQ_Lemma_5 {&#10;\find(==&gt;and(all{uSub (variable)}(or(or(gt(t,uSub),psi),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(leq(t,uSub),or(psi,b)))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),or(psi,b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),or(psi,b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,or(psi,b)),true)]) &#10;\heuristics(induction_var, auto_induction_le…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[230] autoInductGEQ_Lemma_6, autoInductGEQ_Lemma_6 {&#10;\find(==&gt;and(all{uSub (variable)}(or(or(lt(uSub,t),psi),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(leq(t,uSub),or(psi,b)))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),or(psi,b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),or(psi,b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,or(psi,b)),true)]) &#10;\heuristics(induction_var, auto_induction_le…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[231] autoInductGT_Lemma_1, autoInductGT_Lemma_1 {&#10;\find(==&gt;and(all{uSub (variable)}(imp(lt(t,uSub),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(lt(t,uSub),b))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),b),true)]) &#10;\heuristics(induction_var, auto_induction_lemma)&#10;Choices: integerSimplif…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[232] autoInductGT_Lemma_2, autoInductGT_Lemma_2 {&#10;\find(==&gt;and(all{uSub (variable)}(or(geq(t,uSub),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(lt(t,uSub),b))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),b),true)]) &#10;\heuristics(induction_var, auto_induction_lemma)&#10;Choices: integerSimplif…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[233] autoInductGT_Lemma_3, autoInductGT_Lemma_3 {&#10;\find(==&gt;and(all{uSub (variable)}(or(leq(uSub,t),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(lt(t,uSub),b))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),b),true)]) &#10;\heuristics(induction_var, auto_induction_lemma)&#10;Choices: integerSimplif…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[234] autoInductGT_Lemma_5, autoInductGT_Lemma_5 {&#10;\find(==&gt;and(all{uSub (variable)}(or(or(geq(t,uSub),psi),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(lt(t,uSub),or(psi,b)))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),or(psi,b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),or(psi,b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),or(psi,b)),true)]) &#10;\heuristics(auto_induction_lemma…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[235] autoInductGT_Lemma_6, autoInductGT_Lemma_6 {&#10;\find(==&gt;and(all{uSub (variable)}(or(or(leq(uSub,t),psi),b)),phi))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([all{uSub (variable)}(imp(lt(t,uSub),or(psi,b)))]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),or(psi,b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),or(psi,b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),or(psi,b)),true)]) &#10;\heuristics(induction_var, auto_…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[236] autoInduct_Lemma, autoInduct_Lemma {&#10;\find(==&gt;and(all{uSub (variable)}(b),phi))&#10;\replacewith([all{uSub (variable)}(b)]==&gt;[phi]) ;&#10;\replacewith([]==&gt;[imp(and(leq(sk,Z(0(#))),subst{uSub (variable)}(sk,b)),subst{uSub (variable)}(sub(sk,Z(1(#))),b))]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(sk,b)),subst{uSub (variable)}(add(sk,Z(1(#))),b))]) ;&#10;\replacewith([]==&gt;[subst{uSub (variable)}(Z(0(#)),b)]) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[237] auto_int_induction_geqZero, auto_int_induction_geqZero {&#10;\find(==&gt;all{uSub (variable)}(b))&#10;\replacewith([]==&gt;[imp(and(leq(sk,Z(0(#))),subst{uSub (variable)}(sk,b)),subst{uSub (variable)}(sub(sk,Z(1(#))),b))]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(sk,b)),subst{uSub (variable)}(add(sk,Z(1(#))),b))]) ;&#10;\replacewith([]==&gt;[subst{uSub (variable)}(Z(0(#)),b)]) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[238] auto_int_induction_geqZeroLeft, auto_int_induction_geqZeroLeft {&#10;\find(exists{uSub (variable)}(b)==&gt;)&#10;\replacewith([]==&gt;[imp(and(leq(sk,Z(0(#))),subst{uSub (variable)}(sk,not(b))),subst{uSub (variable)}(sub(sk,Z(1(#))),not(b)))]) ;&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(sk,not(b))),subst{uSub (variable)}(add(sk,Z(1(#))),not(b)))]) ;&#10;\replacewith([]==&gt;[subst{uSub (variable)}(Z(0(#)),not(b))]) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[239] auto_int_induction_geq_1, auto_int_induction_geq_1 {&#10;\find(==&gt;all{uSub (variable)}(imp(leq(t,uSub),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,b),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[240] auto_int_induction_geq_2, auto_int_induction_geq_2 {&#10;\find(==&gt;all{uSub (variable)}(or(gt(t,uSub),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,b),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[241] auto_int_induction_geq_3, auto_int_induction_geq_3 {&#10;\find(==&gt;all{uSub (variable)}(or(lt(uSub,t),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,b),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[242] auto_int_induction_geq_5, auto_int_induction_geq_5 {&#10;\find(==&gt;all{uSub (variable)}(or(or(gt(t,uSub),psi),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),or(psi,b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),or(psi,b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,or(psi,b)),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[243] auto_int_induction_geq_6, auto_int_induction_geq_6 {&#10;\find(==&gt;all{uSub (variable)}(or(or(lt(uSub,t),psi),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),or(psi,b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),or(psi,b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,or(psi,b)),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[244] auto_int_induction_geq_Left1, auto_int_induction_geq_Left1 {&#10;\find(exists{uSub (variable)}(and(leq(t,uSub),b))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),not(b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),not(b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,not(b)),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[245] auto_int_induction_geq_Left2, auto_int_induction_geq_Left2 {&#10;\find(exists{uSub (variable)}(and(geq(uSub,t),b))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(0(#))),subst{uSub (variable)}(add(t,sk),not(b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),not(b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(t,not(b)),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[246] auto_int_induction_gt_1, auto_int_induction_gt_1 {&#10;\find(==&gt;all{uSub (variable)}(imp(lt(t,uSub),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),b),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[247] auto_int_induction_gt_2, auto_int_induction_gt_2 {&#10;\find(==&gt;all{uSub (variable)}(or(geq(t,uSub),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),b),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[248] auto_int_induction_gt_3, auto_int_induction_gt_3 {&#10;\find(==&gt;all{uSub (variable)}(or(leq(uSub,t),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),b)),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),b),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),b),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[249] auto_int_induction_gt_5, auto_int_induction_gt_5 {&#10;\find(==&gt;all{uSub (variable)}(or(or(geq(t,uSub),psi),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),or(psi,b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),or(psi,b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),or(psi,b)),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[250] auto_int_induction_gt_6, auto_int_induction_gt_6 {&#10;\find(==&gt;all{uSub (variable)}(or(or(leq(uSub,t),psi),b)))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),or(psi,b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),or(psi,b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),or(psi,b)),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[251] auto_int_induction_gt_Left1, auto_int_induction_gt_Left1 {&#10;\find(exists{uSub (variable)}(and(lt(t,uSub),b))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),not(b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),not(b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),not(b)),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[252] auto_int_induction_gt_Left2, auto_int_induction_gt_Left2 {&#10;\find(exists{uSub (variable)}(and(gt(uSub,t),b))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), t (int term)))&#10;\replacewith([]==&gt;[imp(and(geq(sk,Z(1(#))),subst{uSub (variable)}(add(t,sk),not(b))),#ExpandQueries(subst{uSub (variable)}(add(t,add(sk,Z(1(#)))),not(b)),true))]) ;&#10;\replacewith([]==&gt;[#ExpandQueries(subst{uSub (variable)}(add(t,Z(1(#))),not(b)),true)]) &#10;\heuristics(induction_var, auto_induction)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[253] beginJavaCardTransactionAPI, beginJavaCardTransactionAPI {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #jcsystemType.#beginTransaction()@#jcsystemType;&#10;... }\] (post))&#10;\replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #beginJavaCardTransaction;&#10;... }\] (post)]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[254] beginJavaCardTransactionBox, beginJavaCardTransactionBox {&#10;\find(==&gt;\[{ ..&#10;  #beginJavaCardTransaction;&#10;... }\] (post))&#10;\replacewith([]==&gt;[update-application(elem-update(savedHeap)(heap),box_transaction(post))]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[255] beginJavaCardTransactionDiamond, beginJavaCardTransactionDiamond {&#10;\find(==&gt;\&lt;{ ..&#10;  #beginJavaCardTransaction;&#10;... }\&gt; (post))&#10;\replacewith([]==&gt;[update-application(elem-update(savedHeap)(heap),diamond_transaction(post))]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[256] binaryAndOne, binaryAndOne {&#10;\find(binaryAnd(left,Z(1(#))))&#10;\replacewith(if-then-else(equals(mod(left,Z(2(#))),Z(0(#))),Z(0(#)),Z(1(#)))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[257] binaryAndSymm, binaryAndSymm {&#10;\find(binaryAnd(left,right))&#10;\replacewith(binaryAnd(right,left)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[258] binaryAndZeroLeft, binaryAndZeroLeft {&#10;\find(binaryAnd(Z(0(#)),right))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[259] binaryAndZeroRight, binaryAndZeroRight {&#10;\find(binaryAnd(left,Z(0(#))))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[260] binaryAnd_literals, binaryAnd_literals {&#10;\find(binaryAnd(Z(iz),Z(jz)))&#10;\replacewith(#BinaryAnd(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[261] binaryOrGte, binaryOrGte {&#10;\find(binaryOr(left,right))&#10;\sameUpdateLevel\add [imp(and(geq(left,Z(0(#))),geq(right,Z(0(#)))),and(and(geq(binaryOr(left,right),left),geq(binaryOr(left,right),right)),leq(binaryOr(left,right),mul(Z(2(#)),if-then-else(gt(left,right),left,right)))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[262] binaryOrInInt, binaryOrInInt {&#10;\find(binaryOr(left,right))&#10;\sameUpdateLevel\add [imp(and(inRangeInt(left),inRangeInt(right)),inRangeInt(binaryOr(left,right)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[263] binaryOrNeutralLeft, binaryOrNeutralLeft {&#10;\find(binaryOr(Z(0(#)),right))&#10;\replacewith(right) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[264] binaryOrNeutralRight, binaryOrNeutralRight {&#10;\find(binaryOr(left,Z(0(#))))&#10;\replacewith(left) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[265] binaryOrSign, binaryOrSign {&#10;\find(binaryOr(left,right))&#10;\sameUpdateLevel\add [geq(mul(if-then-else(and(geq(left,Z(0(#))),geq(right,Z(0(#)))),Z(1(#)),Z(neglit(1(#)))),binaryOr(left,right)),Z(0(#)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[266] binaryOr_literals, binaryOr_literals {&#10;\find(binaryOr(Z(iz),Z(jz)))&#10;\replacewith(#BinaryOr(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[267] binaryXOr_literals, binaryXOr_literals {&#10;\find(binaryXOr(Z(iz),Z(jz)))&#10;\replacewith(#BinaryXOr(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[268] bitwiseNegateJIntDefinition, bitwiseNegateJIntDefinition {&#10;\find(bitwiseNegateJint(i))&#10;\replacewith(sub(neg(i),Z(1(#)))) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[269] bitwiseNegateJlongDefinition, bitwiseNegateJlongDefinition {&#10;\find(bitwiseNegateJlong(i))&#10;\replacewith(sub(neg(i),Z(1(#)))) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[270] bitwiseNegationInt, bitwiseNegationInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = ~#seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseNegateInt(#se)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[271] bitwiseNegationLong, bitwiseNegationLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = ~#se;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaBitwiseNegateLong(#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[272] blockBreak, blockBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  break;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[273] blockBreakLabel, blockBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb0:&#10;  {&#10;    break;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  do-break(#lb0:&#10;  break;)&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[274] blockBreakLabeled, blockBreakLabeled {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  break;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[275] blockBreakNoLabel, blockBreakNoLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  break;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[276] blockContinue, blockContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    continue;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  continue;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[277] blockContinueLabeled, blockContinueLabeled {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    continue;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  continue;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[278] blockEmpty, blockEmpty {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {}&#10;... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[279] blockEmptyLabel, blockEmptyLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb:&#10;  {}&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {}&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[280] blockReturn, blockReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  return #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[281] blockReturnLabel1, blockReturnLabel1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb:&#10;  return #se;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  return #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[282] blockReturnLabel2, blockReturnLabel2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb:&#10;  {&#10;    return #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  return #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[283] blockReturnNoValue, blockReturnNoValue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  return;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[284] blockThrow, blockThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    throw #e;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  throw #e;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[285] boolean_equal, boolean_equal {&#10;\find(equals(bo,bo))&#10;\replacewith(true) &#10;\heuristics(concrete, simplify_boolean)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[286] boolean_equal_2, boolean_equal_2 {&#10;\find(equiv(equals(b1,TRUE),equals(b2,TRUE)))&#10;\replacewith(equals(b1,b2)) &#10;\heuristics(concrete, simplify_boolean)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[287] boolean_false_commute, boolean_false_commute {&#10;\find(equals(FALSE,bo))&#10;\replacewith(equals(bo,FALSE)) &#10;\heuristics(simplify_boolean)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[288] boolean_not_equal_1, boolean_not_equal_1 {&#10;\find(equals(TRUE,FALSE))&#10;\replacewith(false) &#10;\heuristics(concrete, simplify_boolean)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[289] boolean_not_equal_2, boolean_not_equal_2 {&#10;\find(equals(FALSE,TRUE))&#10;\replacewith(false) &#10;\heuristics(concrete, simplify_boolean)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[290] boolean_true_commute, boolean_true_commute {&#10;\find(equals(TRUE,bo))&#10;\replacewith(equals(bo,TRUE)) &#10;\heuristics(simplify_boolean)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[291] boxToDiamond, boxToDiamond {&#10;\find(\[{ ..&#10;  #s&#10;... }\] (post))&#10;\replacewith(not(\&lt;{ ..&#10;  #s&#10;... }\&gt; (not(post)))) &#10;\heuristics(boxDiamondConv)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[292] boxToDiamondTransaction, boxToDiamondTransaction {&#10;\find(box_transaction\[{ ..&#10;  #s&#10;... }\] (post))&#10;\replacewith(not(diamond_transaction\[{ ..&#10;  #s&#10;... }\] (not(post)))) &#10;\heuristics(boxDiamondConv)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[293] box_and_left, box_and_left {&#10;\find(#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (and(post,post1))==&gt;)&#10;\replacewith([and(#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post),#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post1))]==&gt;[]) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[294] box_and_right, box_and_right {&#10;\find(==&gt;#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (and(post,post1)))&#10;\replacewith([]==&gt;[#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post1)]) ;&#10;\replacewith([]==&gt;[#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post)]) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[295] box_or_left, box_or_left {&#10;\find(#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (or(post,post1))==&gt;)&#10;\replacewith([or(#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post),#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post1))]==&gt;[]) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[296] box_or_right, box_or_right {&#10;\find(==&gt;#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (or(post,post1)))&#10;\replacewith([]==&gt;[or(#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post),#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post1))]) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[297] box_true, box_true {&#10;\find(#box ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (true))&#10;\replacewith(true) &#10;\heuristics(modal_tautology)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[298] bprod_all_positive, bprod_all_positive {&#10;\find(bprod{uSub (variable)}(i0,i1,t1))&#10;\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [imp(all{uSub (variable)}(imp(and(leq(i0,uSub),lt(uSub,i1)),geq(t1,Z(0(#))))),geq(bprod{uSub (variable)}(i0,i1,t1),Z(0(#))))]==&gt;[] &#10;Choices: (integerSimplificationRules:full &amp; sequences:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[299] bprod_commutative_associative, bprod_commutative_associative {&#10;\find(bprod{uSub (variable)}(i0,i2,mul(t,t2)))&#10;\varcond(\notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\replacewith(mul(bprod{uSub (variable)}(i0,i2,t),bprod{uSub1 (variable)}(i0,i2,subst{uSub (variable)}(uSub1,t2)))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[300] bprod_empty, bprod_empty {&#10;\find(bprod{uSub (variable)}(i0,i1,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(Z(1(#))) ;&#10;\add []==&gt;[leq(i1,i0)] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[301] bprod_equal_one_right, bprod_equal_one_right {&#10;\find(==&gt;equals(bprod{uSub (variable)}(i0,i2,t),Z(1(#))))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add []==&gt;[all{uSub (variable)}(subst{uSub (variable)}(uSub,imp(and(geq(uSub,i0),lt(uSub,i2)),equals(t,Z(1(#))))))] &#10;\heuristics(comprehensions)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[302] bprod_equal_zero_right, bprod_equal_zero_right {&#10;\find(==&gt;equals(bprod{uSub (variable)}(i0,i2,t),Z(0(#))))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add []==&gt;[exists{uSub (variable)}(subst{uSub (variable)}(uSub,and(and(geq(uSub,i0),lt(uSub,i2)),equals(t,Z(0(#))))))] &#10;\heuristics(comprehensions)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[303] bprod_find, bprod_find {&#10;\find(bprod{uSub (variable)}(low,high,t))&#10;\varcond(\notFreeIn(uSub (variable), high (int term)), \notFreeIn(uSub (variable), middle (int term)), \notFreeIn(uSub (variable), low (int term)))&#10;\replacewith(if-then-else(and(leq(low,middle),leq(middle,high)),mul(bprod{uSub (variable)}(low,middle,t),bprod{uSub (variable)}(middle,high,t)),bprod{uSub (variable)}(low,high,t))) &#10;\heuristics(triggered, comprehension_split)&#10;Choices: integerSimplificationRules:full&#10;\trigger{middle (int term)} bprod{uSub (v…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[304] bprod_induction_lower, bprod_induction_lower {&#10;\find(bprod{uSub (variable)}(i0,i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(mul(bprod{uSub (variable)}(add(i0,Z(1(#))),i2,t),if-then-else(lt(i0,i2),subst{uSub (variable)}(i0,t),Z(1(#))))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[305] bprod_induction_lower_concrete, bprod_induction_lower_concrete {&#10;\find(bprod{uSub (variable)}(add(Z(neglit(1(#))),i0),i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(mul(bprod{uSub (variable)}(i0,i2,t),if-then-else(lt(add(Z(neglit(1(#))),i0),i2),subst{uSub (variable)}(add(Z(neglit(1(#))),i0),t),Z(1(#))))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[306] bprod_induction_upper, bprod_induction_upper {&#10;\find(bprod{uSub (variable)}(i0,i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(mul(bprod{uSub (variable)}(i0,sub(i2,Z(1(#))),t),if-then-else(lt(i0,i2),subst{uSub (variable)}(sub(i2,Z(1(#))),t),Z(1(#))))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[307] bprod_induction_upper_concrete, bprod_induction_upper_concrete {&#10;\find(bprod{uSub (variable)}(i0,add(Z(1(#)),i2),t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(mul(bprod{uSub (variable)}(i0,i2,t),if-then-else(leq(i0,i2),subst{uSub (variable)}(i2,t),Z(1(#))))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[308] bprod_invert_index, bprod_invert_index {&#10;\find(bprod{uSub (variable)}(i0,i1,t))&#10;\varcond(\notFreeIn(uSub1 (variable), t (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(bprod{uSub1 (variable)}(neg(i1),neg(i0),subst{uSub (variable)}(neg(uSub1),t))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[309] bprod_invert_index_concrete, bprod_invert_index_concrete {&#10;\find(bprod{uSub (variable)}(mul(i0,Z(neglit(1(#)))),mul(i1,Z(neglit(1(#)))),t))&#10;\varcond(\notFreeIn(uSub1 (variable), t (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(bprod{uSub1 (variable)}(i1,i0,subst{uSub (variable)}(neg(uSub1),t))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[310] bprod_lower_equals_upper, bprod_lower_equals_upper {&#10;\find(bprod{uSub (variable)}(i0,i0,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(Z(1(#))) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[311] bprod_one, bprod_one {&#10;\find(bprod{uSub (variable)}(i0,i1,Z(1(#))))&#10;\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(Z(1(#))) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[312] bprod_one_factor, bprod_one_factor {&#10;\find(bprod{uSub (variable)}(i0,i1,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(if-then-else(equals(add(i0,Z(1(#))),i1),subst{uSub (variable)}(i0,t),bprod{uSub (variable)}(i0,i1,t))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[313] bprod_one_factor_concrete1, bprod_one_factor_concrete1 {&#10;\find(bprod{uSub (variable)}(i0,add(Z(1(#)),i0),t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(subst{uSub (variable)}(i0,t)) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[314] bprod_one_factor_concrete2, bprod_one_factor_concrete2 {&#10;\find(bprod{uSub (variable)}(add(Z(neglit(1(#))),i0),i0,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(subst{uSub (variable)}(add(Z(neglit(1(#))),i0),t)) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[315] bprod_shift_index, bprod_shift_index {&#10;\find(bprod{uSub (variable)}(i0,i1,t))&#10;\varcond(\notFreeIn(uSub1 (variable), t (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(bprod{uSub1 (variable)}(Z(0(#)),sub(i1,i0),subst{uSub (variable)}(add(uSub1,i0),t))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[316] bprod_split, bprod_split {&#10;\find(bprod{uSub (variable)}(i0,i1,t1))&#10;\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(if-then-else(and(leq(i0,middle),leq(middle,i1)),mul(bprod{uSub (variable)}(i0,middle,t1),bprod{uSub (variable)}(middle,i1,t1)),bprod{uSub (variable)}(i0,i1,t1))) &#10;Choices: (integerSimplificationRules:full &amp; sequences:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[317] bprod_zero, bprod_zero {&#10;\find(bprod{uSub (variable)}(i0,i1,Z(0(#))))&#10;\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(if-then-else(lt(i0,i1),Z(0(#)),Z(1(#)))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[318] break, break {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb0:&#10;  break;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  do-break(#lb0:&#10;  break;)&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[319] bsum_add, bsum_add {&#10;\find(add(bsum{uSub1 (variable)}(i0,i1,t1),bsum{uSub2 (variable)}(i2,i3,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub2 (variable), i3 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub1 (variable), i3 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFree…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[320] bsum_add_concrete, bsum_add_concrete {&#10;\find(add(bsum{uSub1 (variable)}(i0,i1,t1),bsum{uSub2 (variable)}(i1,i3,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub2 (variable), i3 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub1 (variable), i3 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\replacewith(bsum{uSub1 (variable)}(i0,i3,su…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[321] bsum_commutative_associative, bsum_commutative_associative {&#10;\find(bsum{uSub (variable)}(i0,i2,add(t,t2)))&#10;\varcond(\notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\replacewith(add(bsum{uSub (variable)}(i0,i2,t),bsum{uSub1 (variable)}(i0,i2,subst{uSub (variable)}(uSub1,t2)))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[322] bsum_def, bsum_def {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(if-then-else(lt(i0,i1),add(bsum{uSub (variable)}(i0,sub(i1,Z(1(#))),t),subst{uSub (variable)}(sub(i1,Z(1(#))),t)),Z(0(#)))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[323] bsum_distributive, bsum_distributive {&#10;\find(bsum{uSub (variable)}(i0,i2,mul(t,t1)))&#10;\varcond(\notFreeIn(uSub (variable), t1 (int term)), \notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(mul(bsum{uSub (variable)}(i0,i2,t),t1)) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[324] bsum_empty, bsum_empty {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(Z(0(#))) ;&#10;\add []==&gt;[leq(i1,i0)] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[325] bsum_equal_except_one_index, bsum_equal_except_one_index {&#10;\find(==&gt;equals(bsum{uSub1 (variable)}(i0,i1,t1),add(bsum{uSub2 (variable)}(i0,i1,t2),t)))&#10;\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), index (int term)), \notFreeIn(uSub1 (variable), index (int term)), \notFreeIn(uSub2 (variable), t (int term)), \notFreeIn(uSub1 (variable), t (int term)), \notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 …" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[326] bsum_equal_split1, bsum_equal_split1 {&#10;\find(==&gt;equals(bsum{uSub1 (variable)}(i0,i1,t1),bsum{uSub2 (variable)}(i0,i2,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\add []==&gt;[and(and(leq(i0,i1),leq(i0,i…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[327] bsum_equal_split2, bsum_equal_split2 {&#10;\assumes ([equals(bsum{uSub1 (variable)}(i0,i1,t1),i)]==&gt;[]) &#10;\find(==&gt;equals(bsum{uSub2 (variable)}(i0,i2,t2),i))&#10;\varcond(\notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\add []…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[328] bsum_equal_split3, bsum_equal_split3 {&#10;\find(==&gt;equals(bsum{uSub1 (variable)}(i1,i0,t1),bsum{uSub2 (variable)}(i2,i0,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\add []==&gt;[and(and(leq(i1,i0),leq(i2,i…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[329] bsum_equal_split4, bsum_equal_split4 {&#10;\assumes ([equals(bsum{uSub1 (variable)}(i1,i0,t1),i)]==&gt;[]) &#10;\find(==&gt;equals(bsum{uSub2 (variable)}(i2,i0,t2),i))&#10;\varcond(\notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\add []…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[330] bsum_induction_lower, bsum_induction_lower {&#10;\find(bsum{uSub (variable)}(i0,i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(add(bsum{uSub (variable)}(add(i0,Z(1(#))),i2,t),if-then-else(lt(i0,i2),subst{uSub (variable)}(i0,t),Z(0(#))))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[331] bsum_induction_lower2, bsum_induction_lower2 {&#10;\find(bsum{uSub (variable)}(i0,i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(sub(bsum{uSub (variable)}(sub(i0,Z(1(#))),i2,t),if-then-else(lt(sub(i0,Z(1(#))),i2),subst{uSub (variable)}(sub(i0,Z(1(#))),t),Z(0(#))))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[332] bsum_induction_lower2_concrete, bsum_induction_lower2_concrete {&#10;\find(bsum{uSub (variable)}(add(Z(1(#)),i0),i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(sub(bsum{uSub (variable)}(i0,i2,t),if-then-else(lt(i0,i2),subst{uSub (variable)}(i0,t),Z(0(#))))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[333] bsum_induction_lower_concrete, bsum_induction_lower_concrete {&#10;\find(bsum{uSub (variable)}(add(Z(neglit(1(#))),i0),i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(add(bsum{uSub (variable)}(i0,i2,t),if-then-else(lt(add(Z(neglit(1(#))),i0),i2),subst{uSub (variable)}(add(Z(neglit(1(#))),i0),t),Z(0(#))))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[334] bsum_induction_upper, bsum_induction_upper {&#10;\find(bsum{uSub (variable)}(i0,i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(add(bsum{uSub (variable)}(i0,sub(i2,Z(1(#))),t),if-then-else(lt(i0,i2),subst{uSub (variable)}(sub(i2,Z(1(#))),t),Z(0(#))))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[335] bsum_induction_upper2, bsum_induction_upper2 {&#10;\find(bsum{uSub (variable)}(i0,i2,t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(sub(bsum{uSub (variable)}(i0,add(i2,Z(1(#))),t),if-then-else(lt(i0,add(i2,Z(1(#)))),subst{uSub (variable)}(i2,t),Z(0(#))))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[336] bsum_induction_upper2_concrete, bsum_induction_upper2_concrete {&#10;\find(bsum{uSub (variable)}(i0,add(Z(neglit(1(#))),i2),t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(sub(bsum{uSub (variable)}(i0,i2,t),if-then-else(lt(i0,i2),subst{uSub (variable)}(sub(i2,Z(1(#))),t),Z(0(#))))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[337] bsum_induction_upper_concrete, bsum_induction_upper_concrete {&#10;\find(bsum{uSub (variable)}(i0,add(Z(1(#)),i2),t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(add(bsum{uSub (variable)}(i0,i2,t),if-then-else(leq(i0,i2),subst{uSub (variable)}(i2,t),Z(0(#))))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[338] bsum_induction_upper_concrete_2, bsum_induction_upper_concrete_2 {&#10;\find(bsum{uSub (variable)}(Z(iz),Z(jz),t))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(add(bsum{uSub (variable)}(Z(iz),sub(Z(jz),Z(1(#))),t),if-then-else(leq(Z(iz),sub(Z(jz),Z(1(#)))),subst{uSub (variable)}(sub(Z(jz),Z(1(#))),t),Z(0(#))))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[339] bsum_invert_index, bsum_invert_index {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\varcond(\notFreeIn(uSub1 (variable), t (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(bsum{uSub1 (variable)}(neg(i1),neg(i0),subst{uSub (variable)}(neg(uSub1),t))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[340] bsum_invert_index_concrete, bsum_invert_index_concrete {&#10;\find(bsum{uSub (variable)}(mul(i0,Z(neglit(1(#)))),mul(i1,Z(neglit(1(#)))),t))&#10;\varcond(\notFreeIn(uSub1 (variable), t (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(bsum{uSub1 (variable)}(i1,i0,subst{uSub (variable)}(neg(uSub1),t))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[341] bsum_less_same_index, bsum_less_same_index {&#10;\find(==&gt;lt(bsum{uSub1 (variable)}(i0,i1,t1),bsum{uSub2 (variable)}(i0,i1,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\add []==&gt;[and(all{uSub1 (variable)}(imp(and(geq(uSub1,i0),lt(uSub1,i1)),leq(t1,subst{uSub2 (variable)}(uSub1,t2)))),exists{uSub1…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[342] bsum_lower_bound, bsum_lower_bound {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), j (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [imp(all{uSub (variable)}(imp(and(geq(uSub,i0),lt(uSub,i1)),geq(t,j))),geq(bsum{uSub (variable)}(i0,i1,t),if-then-else(gt(sub(i1,i0),Z(0(#))),mul(sub(i1,i0),j),Z(0(#)))))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[343] bsum_lower_equals_upper, bsum_lower_equals_upper {&#10;\find(bsum{uSub (variable)}(i0,i0,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[344] bsum_num_of_bounds, bsum_num_of_bounds {&#10;\find(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#)))))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [leq(Z(0(#)),bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#))))),imp(leq(i0,i2),leq(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#)))),sub(i2,i0)))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[345] bsum_num_of_bounds2, bsum_num_of_bounds2 {&#10;\find(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#)))))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [leq(Z(0(#)),bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#))))),imp(leq(i0,i2),leq(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#)))),sub(i2,i0)))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[346] bsum_num_of_gt0, bsum_num_of_gt0 {&#10;\find(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#)))))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [imp(gt(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#)))),Z(0(#))),exists{uSub (variable)}(and(and(leq(i0,uSub),lt(uSub,i2)),phi)))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[347] bsum_num_of_gt0_alt, bsum_num_of_gt0_alt {&#10;\find(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#)))))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [imp(gt(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#)))),Z(0(#))),exists{uSub (variable)}(and(and(leq(i0,uSub),lt(uSub,i2)),not(phi))))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[348] bsum_num_of_is_max, bsum_num_of_is_max {&#10;\find(equals(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#)))),sub(i2,i0))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [all{uSub (variable)}(imp(and(geq(uSub,i0),lt(uSub,i2)),phi))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[349] bsum_num_of_is_max2, bsum_num_of_is_max2 {&#10;\assumes ([gt(i2,i0)]==&gt;[]) &#10;\find(all{uSub (variable)}(imp(and(geq(uSub,i0),lt(uSub,i2)),phi))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [equals(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#)))),sub(i2,i0))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[350] bsum_num_of_is_max3, bsum_num_of_is_max3 {&#10;\find(equals(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#)))),sub(i2,i0))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [all{uSub (variable)}(imp(and(geq(uSub,i0),lt(uSub,i2)),not(phi)))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[351] bsum_num_of_is_max4, bsum_num_of_is_max4 {&#10;\assumes ([gt(i2,i0)]==&gt;[]) &#10;\find(all{uSub (variable)}(imp(and(geq(uSub,i0),lt(uSub,i2)),not(phi)))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [equals(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#)))),sub(i2,i0))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[352] bsum_num_of_lt_max, bsum_num_of_lt_max {&#10;\assumes ([and(gt(i2,i0),geq(i0,Z(0(#))))]==&gt;[]) &#10;\find(lt(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#)))),sub(i2,i0))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [exists{uSub (variable)}(and(and(geq(uSub,i0),lt(uSub,i2)),not(phi)))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[353] bsum_num_of_lt_max2, bsum_num_of_lt_max2 {&#10;\assumes ([and(gt(i2,i0),geq(i0,Z(0(#))))]==&gt;[]) &#10;\find(exists{uSub (variable)}(and(and(geq(uSub,i0),lt(uSub,i2)),not(phi)))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [lt(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(1(#)),Z(0(#)))),sub(i2,i0))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[354] bsum_num_of_lt_max3, bsum_num_of_lt_max3 {&#10;\assumes ([and(gt(i2,i0),geq(i0,Z(0(#))))]==&gt;[]) &#10;\find(lt(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#)))),sub(i2,i0))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [exists{uSub (variable)}(and(and(geq(uSub,i0),lt(uSub,i2)),phi))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[355] bsum_num_of_lt_max4, bsum_num_of_lt_max4 {&#10;\assumes ([and(gt(i2,i0),geq(i0,Z(0(#))))]==&gt;[]) &#10;\find(exists{uSub (variable)}(and(and(geq(uSub,i0),lt(uSub,i2)),phi))==&gt;)&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [lt(bsum{uSub (variable)}(i0,i2,if-then-else(phi,Z(0(#)),Z(1(#)))),sub(i2,i0))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[356] bsum_one_summand, bsum_one_summand {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(if-then-else(equals(add(i0,Z(1(#))),i1),subst{uSub (variable)}(i0,t),bsum{uSub (variable)}(i0,i1,t))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[357] bsum_one_summand_concrete1, bsum_one_summand_concrete1 {&#10;\find(bsum{uSub (variable)}(i0,add(Z(1(#)),i0),t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(subst{uSub (variable)}(i0,t)) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[358] bsum_one_summand_concrete2, bsum_one_summand_concrete2 {&#10;\find(bsum{uSub (variable)}(add(Z(neglit(1(#))),i0),i0,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(subst{uSub (variable)}(add(Z(neglit(1(#))),i0),t)) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[359] bsum_positive, bsum_positive {&#10;\find(==&gt;geq(bsum{uSub (variable)}(i0,i1,t),Z(0(#))))&#10;\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add []==&gt;[all{uSub (variable)}(imp(and(geq(uSub,i0),lt(uSub,i1)),geq(t,Z(0(#)))))] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[360] bsum_positive1, bsum_positive1 {&#10;\find(bsum{uSub (variable)}(i0,i1,if-then-else(b,Z(1(#)),Z(0(#)))))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [geq(bsum{uSub (variable)}(i0,i1,if-then-else(b,Z(1(#)),Z(0(#)))),Z(0(#)))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[361] bsum_positive2, bsum_positive2 {&#10;\find(bsum{uSub (variable)}(i0,i1,if-then-else(b,Z(0(#)),Z(1(#)))))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [geq(bsum{uSub (variable)}(i0,i1,if-then-else(b,Z(0(#)),Z(1(#)))),Z(0(#)))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[362] bsum_positive_lower_bound_element, bsum_positive_lower_bound_element {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), index (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [leq(subst{uSub (variable)}(index,t),bsum{uSub (variable)}(i0,i1,t))]==&gt;[] ;&#10;\add []==&gt;[and(and(all{uSub (variable)}(imp(and(and(geq(uSub,i0),lt(uSub,i1)),not(equals(uSub,index))),geq(t,Z(0(#))))),leq(i0,index)),lt(index,i1))] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[363] bsum_same_summand, bsum_same_summand {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\varcond(\notFreeIn(uSub (variable), t (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(if-then-else(geq(i1,i0),mul(t,sub(i1,i0)),Z(0(#)))) &#10;\heuristics(simplify)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[364] bsum_shift_index, bsum_shift_index {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\varcond(\notFreeIn(uSub1 (variable), t (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(bsum{uSub1 (variable)}(Z(0(#)),sub(i1,i0),subst{uSub (variable)}(add(uSub1,i0),t))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[365] bsum_split, bsum_split {&#10;\find(bsum{uSub (variable)}(low,high,t))&#10;\varcond(\notFreeIn(uSub (variable), high (int term)), \notFreeIn(uSub (variable), middle (int term)), \notFreeIn(uSub (variable), low (int term)))&#10;\replacewith(if-then-else(and(leq(low,middle),leq(middle,high)),add(bsum{uSub (variable)}(low,middle,t),bsum{uSub (variable)}(middle,high,t)),bsum{uSub (variable)}(low,high,t))) &#10;\heuristics(triggered, comprehension_split)&#10;Choices: integerSimplificationRules:full&#10;\trigger{middle (int term)} bsum{uSub (variab…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[366] bsum_split_in_three, bsum_split_in_three {&#10;\find(bsum{uSub (variable)}(i0,i2,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), t (int term)), \notFreeIn(uSub (variable), i1 (int term)))&#10;\replacewith(add(add(bsum{uSub (variable)}(i0,i1,t),subst{uSub (variable)}(i1,t)),bsum{uSub1 (variable)}(add(i1,Z(1(#))),i2,subst{uSub (variable)}(uSub1,t)))) ;&#10;\add []==&gt;[and(leq(i0,i1),lt(i1,i2))] &#10;Choi…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[367] bsum_sub_same_index, bsum_sub_same_index {&#10;\find(sub(bsum{uSub1 (variable)}(i0,i1,t1),bsum{uSub2 (variable)}(i0,i1,t2)))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)))&#10;\add [equals(bsum{uSub1 (variable)}(i0,i1,sub(t1,subst{uSub2 (variable)}(uSub1,t2))),sub(bsum{uSub1 (variable)}(i0,i…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[368] bsum_upper_bound, bsum_upper_bound {&#10;\find(bsum{uSub (variable)}(i0,i1,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), j (int term)), \notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add [imp(all{uSub (variable)}(imp(and(geq(uSub,i0),lt(uSub,i1)),leq(t,j))),leq(bsum{uSub (variable)}(i0,i1,t),if-then-else(gt(sub(i1,i0),Z(0(#))),mul(sub(i1,i0),j),Z(0(#)))))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[369] bsum_zero, bsum_zero {&#10;\find(bsum{uSub (variable)}(i0,i1,Z(0(#))))&#10;\varcond(\notFreeIn(uSub (variable), i1 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[370] bsum_zero_right, bsum_zero_right {&#10;\find(==&gt;equals(bsum{uSub (variable)}(i0,i2,t),Z(0(#))))&#10;\varcond(\notFreeIn(uSub (variable), i2 (int term)), \notFreeIn(uSub (variable), i0 (int term)))&#10;\add []==&gt;[all{uSub (variable)}(subst{uSub (variable)}(uSub,imp(and(geq(uSub,i0),lt(uSub,i2)),equals(t,Z(0(#))))))] &#10;\heuristics(comprehensions)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[371] cancel_equation, cancel_equation {&#10;\find(equals(mul(eqLeft,Fac),mul(eqRight,Fac)))&#10;\add []==&gt;[not(equals(Fac,Z(0(#))))] ;&#10;\replacewith(equals(eqLeft,eqRight)) &#10;\heuristics(simplify_enlarging)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[372] cancel_gtNeg, cancel_gtNeg {&#10;\assumes ([lt(Fac,Z(0(#)))]==&gt;[]) &#10;\find(lt(Less,More)==&gt;)&#10;\add [gt(mul(Less,Fac),mul(More,Fac))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[373] cancel_gtPos, cancel_gtPos {&#10;\assumes ([gt(Fac,Z(0(#)))]==&gt;[]) &#10;\find(lt(Less,More)==&gt;)&#10;\add [lt(mul(Less,Fac),mul(More,Fac))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[374] case_distinction_l, case_distinction_l {&#10;\find(b==&gt;)&#10;\addrules [to_false {&#10;\find(b==&gt;)&#10;\replacewith([false]==&gt;[]) &#10;\heuristics(simplify)&#10;Choices: true}] ;&#10;\addrules [to_true {&#10;\find(b==&gt;)&#10;\replacewith([true]==&gt;[]) &#10;\heuristics(simplify)&#10;Choices: true}] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[375] case_distinction_r, case_distinction_r {&#10;\find(==&gt;b)&#10;\addrules [to_false {&#10;\find(==&gt;b)&#10;\replacewith([]==&gt;[false]) &#10;\heuristics(simplify)&#10;Choices: true}] ;&#10;\addrules [to_true {&#10;\find(==&gt;b)&#10;\replacewith([]==&gt;[true]) &#10;\heuristics(simplify)&#10;Choices: true}] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[376] castAdd, castAdd {&#10;\assumes ([equals(CSub::instance(strictCTerm2),TRUE)]==&gt;[]) &#10;\find(strictCTerm2)&#10;\sameUpdateLevel\replacewith(CSub::cast(strictCTerm2)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[377] castAdd2, castAdd2 {&#10;\assumes ([equals(cs,gt)]==&gt;[]) &#10;\find(gt)&#10;\sameUpdateLevel\varcond(\strict\sub(C, G), )&#10;\replacewith(C::cast(gt)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[378] castDel, castDel {&#10;\find(C::cast(castedTerm))&#10;\replacewith(castedTerm) &#10;\heuristics(cast_deletion, simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[379] castDel2, castDel2 {&#10;\assumes ([equals(cs,gt)]==&gt;[]) &#10;\find(C::cast(gt))&#10;\sameUpdateLevel\replacewith(cs) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[380] castLongToFloatAddition2, castLongToFloatAddition2 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat + #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddFloat(#seFloat,float::cast(#seLong))),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[381] castToBoolean, castToBoolean {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (boolean) #exBool;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #exBool;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[382] castTrueImpliesOriginalTrue, castTrueImpliesOriginalTrue {&#10;\assumes ([equals(boolean::select(h,o,f),TRUE)]==&gt;[]) &#10;\find(==&gt;equals(any::select(h,o,f),TRUE))&#10;\replacewith([]==&gt;[true]) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[383] castType, castType {&#10;\assumes ([equals(H::instance(C::cast(s)),TRUE)]==&gt;[]) &#10;\find(equals(CSub::instance(s),TRUE)==&gt;)&#10;\replacewith([equals(H::instance(s),TRUE)]==&gt;[]) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[384] castType2, castType2 {&#10;\assumes ([]==&gt;[equals(H::instance(C::cast(s)),TRUE)]) &#10;\find(equals(CSub::instance(s),TRUE)==&gt;)&#10;\replacewith([]==&gt;[equals(H::instance(s),TRUE)]) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[385] castedGetAny, castedGetAny {&#10;\find(beta::cast(any::seqGet(seq,idx)))&#10;\replacewith(beta::seqGet(seq,idx)) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[386] charLiteral_to_int, charLiteral_to_int {&#10;\find(C(iz))&#10;\replacewith(Z(iz)) &#10;\heuristics(charLiteral_to_intLiteral)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[387] close, close {&#10;\assumes ([b]==&gt;[]) &#10;\find(==&gt;b)&#10;\closegoal\heuristics(closure)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[388] closeAntec, closeAntec {&#10;\assumes ([]==&gt;[b]) &#10;\find(b==&gt;)&#10;\closegoal&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[389] closeFalse, closeFalse {&#10;\find(false==&gt;)&#10;\closegoal\heuristics(closure)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[390] closeTrue, closeTrue {&#10;\find(==&gt;true)&#10;\closegoal\heuristics(closure)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[391] closeType, closeType {&#10;\assumes ([]==&gt;[equals(G::instance(t1),TRUE)]) &#10;\find(equals(GSub::instance(t1),TRUE)==&gt;)&#10;\closegoal\heuristics(closure)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[392] closeTypeSwitched, closeTypeSwitched {&#10;\assumes ([equals(GSub::instance(t1),TRUE)]==&gt;[]) &#10;\find(==&gt;equals(G::instance(t1),TRUE))&#10;\closegoal\heuristics(closure)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[393] close_by_lt_leq, close_by_lt_leq {&#10;\assumes ([lt(i,j)]==&gt;[]) &#10;\find(==&gt;leq(add(i,Z(1(#))),j))&#10;\replacewith([]==&gt;[true]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[394] cnf_eqv, cnf_eqv {&#10;\find(equiv(phi,psi))&#10;\replacewith(and(or(phi,not(psi)),or(not(phi),psi))) &#10;\heuristics(notHumanReadable, cnf_expandIfThenElse, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[395] cnf_rightDist, cnf_rightDist {&#10;\find(or(distLeft,and(distRight0,distRight1)))&#10;\replacewith(and(or(distLeft,distRight0),or(distRight1,distLeft))) &#10;\heuristics(cnf_dist, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[396] collect_same_terms_1, collect_same_terms_1 {&#10;\find(add(mul(i,j),mul(i,j)))&#10;\replacewith(mul(Z(2(#)),mul(i,j))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[397] collect_same_terms_2, collect_same_terms_2 {&#10;\find(add(add(mul(i,j),mul(i0,i1)),add(mul(i,j),mul(j0,j1))))&#10;\replacewith(add(mul(Z(2(#)),mul(i,j)),add(mul(i0,i1),mul(j0,j1)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[398] collect_same_terms_3, collect_same_terms_3 {&#10;\find(add(add(neg(mul(i,j)),mul(i0,i1)),add(neg(mul(i,j)),mul(j0,j1))))&#10;\replacewith(add(neg(mul(Z(2(#)),mul(i,j))),add(mul(i0,i1),mul(j0,j1)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[399] commitJavaCardTransactionAPI, commitJavaCardTransactionAPI {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #jcsystemType.#commitTransaction()@#jcsystemType;&#10;... }\] (post))&#10;\replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #commitJavaCardTransaction;&#10;... }\] (post)]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[400] commitJavaCardTransactionBox, commitJavaCardTransactionBox {&#10;\find(==&gt;box_transaction\[{ ..&#10;  #commitJavaCardTransaction;&#10;... }\] (post))&#10;\replacewith([]==&gt;[box(post)]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[401] commitJavaCardTransactionDiamond, commitJavaCardTransactionDiamond {&#10;\find(==&gt;diamond_transaction\[{ ..&#10;  #commitJavaCardTransaction;&#10;... }\] (post))&#10;\replacewith([]==&gt;[diamond(post)]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[402] commuteDisjoint, commuteDisjoint {&#10;\find(disjoint(commLeft,commRight))&#10;\replacewith(disjoint(commRight,commLeft)) &#10;\heuristics(cnf_setComm)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[403] commuteIntersection, commuteIntersection {&#10;\find(intersect(commLeft,commRight))&#10;\replacewith(intersect(commRight,commLeft)) &#10;\heuristics(cnf_setComm)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[404] commuteIntersection_2, commuteIntersection_2 {&#10;\find(intersect(intersect(s,commLeft),commRight))&#10;\replacewith(intersect(intersect(s,commRight),commLeft)) &#10;\heuristics(cnf_setComm)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[405] commuteUnion, commuteUnion {&#10;\find(union(commLeft,commRight))&#10;\replacewith(union(commRight,commLeft)) &#10;\heuristics(cnf_setComm)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[406] commuteUnion_2, commuteUnion_2 {&#10;\find(union(union(s,commLeft),commRight))&#10;\replacewith(union(union(s,commRight),commLeft)) &#10;\heuristics(cnf_setComm)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[407] commute_and, commute_and {&#10;\find(and(commLeft,commRight))&#10;\replacewith(and(commRight,commLeft)) &#10;\heuristics(cnf_andComm, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[408] commute_and_2, commute_and_2 {&#10;\find(and(and(commResidue,commLeft),commRight))&#10;\replacewith(and(and(commResidue,commRight),commLeft)) &#10;\heuristics(cnf_andComm, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[409] commute_or, commute_or {&#10;\find(or(commLeft,commRight))&#10;\replacewith(or(commRight,commLeft)) &#10;\heuristics(cnf_orComm, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[410] commute_or_2, commute_or_2 {&#10;\find(or(or(commResidue,commLeft),commRight))&#10;\replacewith(or(or(commResidue,commRight),commLeft)) &#10;\heuristics(cnf_orComm, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[411] compound_addition_1, compound_addition_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse + #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v + #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[412] compound_addition_2, compound_addition_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e + #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 + #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[413] compound_assignment_1_new, compound_assignment_1_new {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = !#seBool;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#seBool,TRUE),FALSE,TRUE)),#allmodal(post))) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[414] compound_assignment_2, compound_assignment_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = !#nseBool;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #v = #nseBool;&#10;  #lhs = !#v;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[415] compound_assignment_3_mixed, compound_assignment_3_mixed {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nseBool0 &amp;&amp; #seBool1;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #v0 = #nseBool0;&#10;  #lhs = #v0 &amp;&amp; #seBool1;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[416] compound_assignment_3_nonsimple, compound_assignment_3_nonsimple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #exBool0 &amp;&amp; #nseBool1;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (!#exBool0) #lhs = false;&#10;  else #lhs = #nseBool1;&#10;... }\] (post)) &#10;\heuristics(split_if, simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[417] compound_assignment_3_simple, compound_assignment_3_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seBool0 &amp;&amp; #seBool1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#seBool0,TRUE),if-then-else(equals(#seBool1,TRUE),TRUE,FALSE),FALSE)),#allmodal(post))) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[418] compound_assignment_4_nonsimple, compound_assignment_4_nonsimple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nseBool0 &amp; #exBool1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), (type, sort): (boolean,boolean)), \new(#v0 (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #v0 = #nseBool0;&#10;  boolean #v1 = #exBool1;&#10;  #lhs = #v0 &amp; #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[419] compound_assignment_4_simple, compound_assignment_4_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seBool0 &amp; #seBool1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#seBool0,TRUE),if-then-else(equals(#seBool1,TRUE),TRUE,FALSE),FALSE)),#allmodal(post))) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[420] compound_assignment_5_mixed, compound_assignment_5_mixed {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nseBool0 || #seBool1;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #v0 = #nseBool0;&#10;  #lhs = #v0 || #seBool1;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[421] compound_assignment_5_nonsimple, compound_assignment_5_nonsimple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #exBool0 || #nseBool1;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (#exBool0) #lhs = true;&#10;  else #lhs = #nseBool1;&#10;... }\] (post)) &#10;\heuristics(split_if, simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[422] compound_assignment_5_simple, compound_assignment_5_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seBool0 || #seBool1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#seBool0,TRUE),TRUE,if-then-else(equals(#seBool1,TRUE),TRUE,FALSE))),#allmodal(post))) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[423] compound_assignment_6_nonsimple, compound_assignment_6_nonsimple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nseBool0 | #exBool1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), (type, sort): (boolean,boolean)), \new(#v0 (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #v0 = #nseBool0;&#10;  boolean #v1 = #exBool1;&#10;  #lhs = #v0 | #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[424] compound_assignment_6_simple, compound_assignment_6_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seBool0 | #seBool1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#seBool0,TRUE),TRUE,if-then-else(equals(#seBool1,TRUE),TRUE,FALSE))),#allmodal(post))) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[425] compound_assignment_op_and, compound_assignment_op_and {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs &amp;= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs &amp; (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[426] compound_assignment_op_and_array, compound_assignment_op_and_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] &amp;= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] &amp; #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[427] compound_assignment_op_and_attr, compound_assignment_op_and_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute &amp;= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute &amp;&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[428] compound_assignment_op_div, compound_assignment_op_div {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs /= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs / (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[429] compound_assignment_op_div_array, compound_assignment_op_div_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] /= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] / #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[430] compound_assignment_op_div_attr, compound_assignment_op_div_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute /= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute /&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[431] compound_assignment_op_minus, compound_assignment_op_minus {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs -= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs - (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[432] compound_assignment_op_minus_array, compound_assignment_op_minus_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] -= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] - #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[433] compound_assignment_op_minus_attr, compound_assignment_op_minus_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute -= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute -&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[434] compound_assignment_op_mod, compound_assignment_op_mod {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs %= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs % (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[435] compound_assignment_op_mod_array, compound_assignment_op_mod_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] %= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] % #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[436] compound_assignment_op_mod_attr, compound_assignment_op_mod_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute %= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute %&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[437] compound_assignment_op_mul, compound_assignment_op_mul {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs *= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs * (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[438] compound_assignment_op_mul_array, compound_assignment_op_mul_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] *= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] * #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[439] compound_assignment_op_mul_attr, compound_assignment_op_mul_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute *= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute *&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[440] compound_assignment_op_or, compound_assignment_op_or {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs |= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs | (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[441] compound_assignment_op_or_array, compound_assignment_op_or_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] |= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] | #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[442] compound_assignment_op_or_attr, compound_assignment_op_or_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute |= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute |&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[443] compound_assignment_op_plus, compound_assignment_op_plus {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs += #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs + (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[444] compound_assignment_op_plus_array, compound_assignment_op_plus_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] += #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] + #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[445] compound_assignment_op_plus_attr, compound_assignment_op_plus_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute += #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute +&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[446] compound_assignment_op_shiftleft, compound_assignment_op_shiftleft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs &lt;&lt;= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs &lt;&lt; (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[447] compound_assignment_op_shiftleft_array, compound_assignment_op_shiftleft_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] &lt;&lt;= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] &lt;&lt; #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[448] compound_assignment_op_shiftleft_attr, compound_assignment_op_shiftleft_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute &lt;&lt;= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute &lt;&lt;&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[449] compound_assignment_op_shiftright, compound_assignment_op_shiftright {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs &gt;&gt;= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs &gt;&gt; (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[450] compound_assignment_op_shiftright_array, compound_assignment_op_shiftright_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] &gt;&gt;= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] &gt;&gt; #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[451] compound_assignment_op_shiftright_attr, compound_assignment_op_shiftright_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute &gt;&gt;= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute &gt;&gt;&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[452] compound_assignment_op_unsigned_shiftright, compound_assignment_op_unsigned_shiftright {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs &gt;&gt;&gt;= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs &gt;&gt;&gt; (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[453] compound_assignment_op_unsigned_shiftright_array, compound_assignment_op_unsigned_shiftright_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] &gt;&gt;&gt;= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] &gt;&gt;&gt; #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[454] compound_assignment_op_unsigned_shiftright_attr, compound_assignment_op_unsigned_shiftright_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute &gt;&gt;&gt;= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute &gt;&gt;&gt;&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[455] compound_assignment_op_xor, compound_assignment_op_xor {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs ^= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#typeof(#lhs)) (#lhs ^ (#e));&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[456] compound_assignment_op_xor_array, compound_assignment_op_xor_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0[#e] ^= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] ^ #e1);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[457] compound_assignment_op_xor_attr, compound_assignment_op_xor_attr {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e0.#attribute ^= #e;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v = #e0;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute ^&#10;                                           #e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[458] compound_assignment_xor_nonsimple, compound_assignment_xor_nonsimple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nseBool0 ^ #exBool1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), (type, sort): (boolean,boolean)), \new(#v0 (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #v0 = #nseBool0;&#10;  boolean #v1 = #exBool1;&#10;  #lhs = #v0 ^ #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[459] compound_assignment_xor_simple, compound_assignment_xor_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seBool0 ^ #seBool1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#seBool0,#seBool1),FALSE,TRUE)),#allmodal(post))) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[460] compound_binary_AND_1, compound_binary_AND_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse &amp; #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v &amp; #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[461] compound_binary_AND_2, compound_binary_AND_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e &amp; #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 &amp; #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[462] compound_binary_OR_1, compound_binary_OR_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse | #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v | #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[463] compound_binary_OR_2, compound_binary_OR_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e | #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 | #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[464] compound_binary_XOR_1, compound_binary_XOR_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse ^ #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v ^ #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[465] compound_binary_XOR_2, compound_binary_XOR_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e ^ #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 ^ #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[466] compound_binary_neg, compound_binary_neg {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = ~#nse;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0 = #nse;&#10;  #lhs = ~#v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[467] compound_byte_cast_expression, compound_byte_cast_expression {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (byte) #nse;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = (byte) #v;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[468] compound_division_1, compound_division_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse / #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v / #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[469] compound_division_2, compound_division_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e / #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 / #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[470] compound_double_cast_expression, compound_double_cast_expression {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (double) #nse;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#normalassign ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #loc = (double) #v;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[471] compound_equality_comparison_1, compound_equality_comparison_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse0 == #se;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse0 (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse0) #v0 = #nse0;&#10;  #lhs = #v0 == #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[472] compound_equality_comparison_2, compound_equality_comparison_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e == #nse0;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse0 (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse0) #v1 = #nse0;&#10;  #lhs = #v0 == #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[473] compound_float_cast_expression, compound_float_cast_expression {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (float) #nse;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#normalassign ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #loc = (float) #v;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[474] compound_greater_equal_than_comparison_1, compound_greater_equal_than_comparison_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse0 &gt;= #se;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse0 (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse0) #v0 = #nse0;&#10;  #lhs = #v0 &gt;= #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[475] compound_greater_equal_than_comparison_2, compound_greater_equal_than_comparison_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e &gt;= #nse0;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse0 (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse0) #v1 = #nse0;&#10;  #lhs = #v0 &gt;= #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[476] compound_greater_than_comparison_1, compound_greater_than_comparison_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse0 &gt; #se;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse0 (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse0) #v0 = #nse0;&#10;  #lhs = #v0 &gt; #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[477] compound_greater_than_comparison_2, compound_greater_than_comparison_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e &gt; #nse0;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse0 (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse0) #v1 = #nse0;&#10;  #lhs = #v0 &gt; #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[478] compound_inequality_comparison_1, compound_inequality_comparison_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse0 != #se;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse0 (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse0) #v0 = #nse0;&#10;  #lhs = #v0 != #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[479] compound_inequality_comparison_2, compound_inequality_comparison_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e != #nse0;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse0 (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse0) #v1 = #nse0;&#10;  #lhs = #v0 != #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[480] compound_int_cast_expression, compound_int_cast_expression {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (int) #nse;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = (int) #v;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[481] compound_invert_bits, compound_invert_bits {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = ~#nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = ~#v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[482] compound_less_equal_than_comparison_1, compound_less_equal_than_comparison_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse0 &lt;= #se;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse0 (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse0) #v0 = #nse0;&#10;  #lhs = #v0 &lt;= #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[483] compound_less_equal_than_comparison_2, compound_less_equal_than_comparison_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e &lt;= #nse0;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse0 (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse0) #v1 = #nse0;&#10;  #lhs = #v0 &lt;= #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[484] compound_less_than_comparison_1, compound_less_than_comparison_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse0 &lt; #se;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse0 (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse0) #v0 = #nse0;&#10;  #lhs = #v0 &lt; #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[485] compound_less_than_comparison_2, compound_less_than_comparison_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e &lt; #nse0;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse0 (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse0) #v1 = #nse0;&#10;  #lhs = #v0 &lt; #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[486] compound_long_cast_expression, compound_long_cast_expression {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (long) #nse;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = (long) #v;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[487] compound_modulo_1, compound_modulo_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse % #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v % #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[488] compound_modulo_2, compound_modulo_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e % #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 % #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[489] compound_multiplication_1, compound_multiplication_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse * #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v * #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[490] compound_multiplication_2, compound_multiplication_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e * #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 * #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[491] compound_reference_cast_expression, compound_reference_cast_expression {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#npit) #nse;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = (#npit) #v;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[492] compound_shiftleft_1, compound_shiftleft_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse &lt;&lt; #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v &lt;&lt; #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[493] compound_shiftleft_2, compound_shiftleft_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e &lt;&lt; #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 &lt;&lt; #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[494] compound_shiftright_1, compound_shiftright_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse &gt;&gt; #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v &gt;&gt; #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[495] compound_shiftright_2, compound_shiftright_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e &gt;&gt; #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 &gt;&gt; #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[496] compound_short_cast_expression, compound_short_cast_expression {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (short) #nse;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = (short) #v;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[497] compound_subtraction_1, compound_subtraction_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse - #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v - #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[498] compound_subtraction_2, compound_subtraction_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e - #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 - #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[499] compound_unary_minus_eval, compound_unary_minus_eval {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = -#nse;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0 = #nse;&#10;  #lhs = -#v0;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[500] compound_unary_plus_assignment, compound_unary_plus_assignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = +#e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e;&#10;... }\] (post)) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[501] compound_unsigned_shiftright_1, compound_unsigned_shiftright_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse &gt;&gt;&gt; #se;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v = #nse;&#10;  #lhs = #v &gt;&gt;&gt; #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[502] compound_unsigned_shiftright_2, compound_unsigned_shiftright_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e &gt;&gt;&gt; #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v0 = #e;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #lhs = #v0 &gt;&gt;&gt; #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[503] concatRepeatContraction3, concatRepeatContraction3 {&#10;\find(regExConcat(repeat(rexp,nTimes),regEx(seqEmpty)))&#10;\replacewith(repeat(rexp,nTimes)) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[504] concatRepeatContraction3Sym, concatRepeatContraction3Sym {&#10;\find(regExConcat(regEx(seqEmpty),repeat(rexp,nTimes)))&#10;\replacewith(repeat(rexp,nTimes)) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[505] concrete_and_1, concrete_and_1 {&#10;\find(and(true,b))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[506] concrete_and_2, concrete_and_2 {&#10;\find(and(false,b))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[507] concrete_and_3, concrete_and_3 {&#10;\find(and(b,true))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[508] concrete_and_4, concrete_and_4 {&#10;\find(and(b,false))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[509] concrete_eq_1, concrete_eq_1 {&#10;\find(equiv(true,b))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[510] concrete_eq_2, concrete_eq_2 {&#10;\find(equiv(false,b))&#10;\replacewith(not(b)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[511] concrete_eq_3, concrete_eq_3 {&#10;\find(equiv(b,true))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[512] concrete_eq_4, concrete_eq_4 {&#10;\find(equiv(b,false))&#10;\replacewith(not(b)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[513] concrete_impl_1, concrete_impl_1 {&#10;\find(imp(true,b))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[514] concrete_impl_2, concrete_impl_2 {&#10;\find(imp(false,b))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[515] concrete_impl_3, concrete_impl_3 {&#10;\find(imp(b,false))&#10;\replacewith(not(b)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[516] concrete_impl_4, concrete_impl_4 {&#10;\find(imp(b,true))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[517] concrete_not_1, concrete_not_1 {&#10;\find(not(true))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[518] concrete_not_2, concrete_not_2 {&#10;\find(not(false))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[519] concrete_or_1, concrete_or_1 {&#10;\find(or(true,b))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[520] concrete_or_2, concrete_or_2 {&#10;\find(or(false,b))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[521] concrete_or_3, concrete_or_3 {&#10;\find(or(b,true))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[522] concrete_or_4, concrete_or_4 {&#10;\find(or(b,false))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[523] concrete_or_5, concrete_or_5 {&#10;\find(or(and(c,b),and(c,not(b))))&#10;\replacewith(c) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[524] condition, condition {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e0 ? #e1 : #e2;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (#e0) {&#10;    #lhs = #e1;&#10;  } else {&#10;    #lhs = #e2;&#10;  }&#10;... }\] (post)) &#10;\heuristics(split_if, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[525] condition_not_simple, condition_not_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse ? #se1 : #se2;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0 = #nse;&#10;  #lhs = #v0 ? #se1 : #se2;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[526] condition_simple, condition_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #se0 ? #se1 : #se2;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#se0,TRUE),#se1,#se2)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[527] contains, contains {&#10;\find(clContains(seqConcat(seqSingleton(fstTextCharacter),textStringTail),searchString))&#10;\sameUpdateLevel\add [equals(seqLen(searchString),newSym)]==&gt;[] \replacewith(and(lt(newSym,seqLen(textStringTail)),or(equals(seqSub(seqConcat(seqSingleton(fstTextCharacter),textStringTail),Z(0(#)),newSym),searchString),clContains(textStringTail,searchString)))) &#10;\heuristics(stringsIntroduceNewSym, stringsContainsDefInline)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[528] containsAxiomAntec, containsAxiomAntec {&#10;\find(clContains(textString,searchString)==&gt;)&#10;\varcond(\notFreeIn(iv (variable), textString (Seq term)), \notFreeIn(iv (variable), searchString (Seq term)))&#10;\replacewith([exists{iv (variable)}(and(and(geq(iv,Z(0(#))),leq(add(iv,seqLen(searchString)),seqLen(textString))),equals(seqSub(textString,iv,add(iv,seqLen(searchString))),searchString)))]==&gt;[]) &#10;\heuristics(stringsExpandDefNormalOp)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[529] containsAxiomSucc, containsAxiomSucc {&#10;\find(==&gt;clContains(textString,searchString))&#10;\varcond(\notFreeIn(iv (variable), textString (Seq term)), \notFreeIn(iv (variable), searchString (Seq term)))&#10;\replacewith([]==&gt;[exists{iv (variable)}(and(and(geq(iv,Z(0(#))),leq(add(iv,seqLen(searchString)),seqLen(textString))),equals(seqSub(textString,iv,add(iv,seqLen(searchString))),searchString)))]) &#10;\heuristics(stringsExpandDefNormalOp)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[530] cosIsNaN, cosIsNaN {&#10;\find(cosDouble(arg))&#10;\add [imp(or(doubleIsNaN(arg),doubleIsInfinite(arg)),doubleIsNaN(cosDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[531] cosIsNaNAlt, cosIsNaNAlt {&#10;\find(doubleIsNaN(cosDouble(arg)))&#10;\replacewith(or(doubleIsNaN(arg),doubleIsInfinite(arg))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[532] cosIsNotNaN, cosIsNotNaN {&#10;\find(cosDouble(arg))&#10;\add [imp(and(not(doubleIsNaN(arg)),not(doubleIsInfinite(arg))),not(doubleIsNaN(cosDouble(arg))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[533] cosRange, cosRange {&#10;\find(cosDouble(arg))&#10;\add [or(and(geqDouble(cosDouble(arg),DFP(0(#))),leqDouble(cosDouble(arg),DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),doubleIsNaN(cosDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[534] cosRange2, cosRange2 {&#10;\find(cosDouble(arg))&#10;\add [imp(and(not(doubleIsNaN(arg)),not(doubleIsInfinite(arg))),and(geqDouble(cosDouble(arg),DFP(0(#))),leqDouble(cosDouble(arg),DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[535] cosRangeAlt, cosRangeAlt {&#10;\find(==&gt;doubleIsNaN(cosDouble(arg)))&#10;\add [and(geqDouble(cosDouble(arg),DFP(0(#))),leqDouble(cosDouble(arg),DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[536] createdInHeapToElementOf, createdInHeapToElementOf {&#10;\find(createdInHeap(s,h))&#10;\varcond(\notFreeIn(fv (variable), h (Heap term)), \notFreeIn(fv (variable), s (LocSet term)), \notFreeIn(ov (variable), h (Heap term)), \notFreeIn(ov (variable), s (LocSet term)))&#10;\replacewith(all{ov (variable)}(all{fv (variable)}(imp(elementOf(ov,fv,s),or(equals(ov,null),equals(boolean::select(h,ov,java.lang.Object::&lt;created&gt;),TRUE)))))) &#10;\heuristics(classAxiom)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[537] createdInHeapWithAllFields, createdInHeapWithAllFields {&#10;\find(createdInHeap(allFields(o),h))&#10;\replacewith(or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[538] createdInHeapWithAllFieldsEQ, createdInHeapWithAllFieldsEQ {&#10;\assumes ([equals(allFields(o),EQ)]==&gt;[]) &#10;\find(createdInHeap(EQ,h))&#10;\sameUpdateLevel\replacewith(or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[539] createdInHeapWithArrayRange, createdInHeapWithArrayRange {&#10;\find(createdInHeap(arrayRange(o,lower,upper),h))&#10;\replacewith(or(or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE)),lt(upper,lower))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[540] createdInHeapWithArrayRangeEQ, createdInHeapWithArrayRangeEQ {&#10;\assumes ([equals(arrayRange(o,lower,upper),EQ)]==&gt;[]) &#10;\find(createdInHeap(EQ,h))&#10;\sameUpdateLevel\replacewith(or(or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE)),lt(upper,lower))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[541] createdInHeapWithEmpty, createdInHeapWithEmpty {&#10;\find(createdInHeap(empty,h))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[542] createdInHeapWithObserver, createdInHeapWithObserver {&#10;\find(==&gt;createdInHeap(obs,h))&#10;\varcond(\isObserver (obs (LocSet term), h (Heap term)), )&#10;\replacewith([]==&gt;[wellFormed(h)]) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[543] createdInHeapWithObserverEQ, createdInHeapWithObserverEQ {&#10;\assumes ([equals(obs,EQ)]==&gt;[]) &#10;\find(==&gt;createdInHeap(EQ,h))&#10;\varcond(\isObserver (obs (LocSet term), h (Heap term)), )&#10;\replacewith([]==&gt;[wellFormed(h)]) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[544] createdInHeapWithSelect, createdInHeapWithSelect {&#10;\find(==&gt;createdInHeap(LocSet::select(h,o,f),h))&#10;\replacewith([]==&gt;[wellFormed(h)]) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[545] createdInHeapWithSelectEQ, createdInHeapWithSelectEQ {&#10;\assumes ([equals(LocSet::select(h,o,f),EQ)]==&gt;[]) &#10;\find(==&gt;createdInHeap(EQ,h))&#10;\replacewith([]==&gt;[wellFormed(h)]) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[546] createdInHeapWithSetMinusFreshLocs, createdInHeapWithSetMinusFreshLocs {&#10;\find(createdInHeap(setMinus(s,freshLocs(h)),h))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[547] createdInHeapWithSetMinusFreshLocsEQ, createdInHeapWithSetMinusFreshLocsEQ {&#10;\assumes ([equals(setMinus(s,freshLocs(h)),EQ)]==&gt;[]) &#10;\find(createdInHeap(EQ,h))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[548] createdInHeapWithSingleton, createdInHeapWithSingleton {&#10;\find(createdInHeap(singleton(o,f),h))&#10;\replacewith(or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[549] createdInHeapWithSingletonEQ, createdInHeapWithSingletonEQ {&#10;\assumes ([equals(singleton(o,f),EQ)]==&gt;[]) &#10;\find(createdInHeap(EQ,h))&#10;\sameUpdateLevel\replacewith(or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[550] createdInHeapWithUnion, createdInHeapWithUnion {&#10;\find(==&gt;createdInHeap(union(s,s2),h))&#10;\replacewith([]==&gt;[createdInHeap(s2,h)]) ;&#10;\replacewith([]==&gt;[createdInHeap(s,h)]) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[551] createdInHeapWithUnionEQ, createdInHeapWithUnionEQ {&#10;\assumes ([equals(union(s,s2),EQ)]==&gt;[]) &#10;\find(==&gt;createdInHeap(EQ,h))&#10;\replacewith([]==&gt;[createdInHeap(s2,h)]) ;&#10;\replacewith([]==&gt;[createdInHeap(s,h)]) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[552] crossInst, crossInst {&#10;\assumes ([]==&gt;[or(or(leq(k,Z(neglit(1(#)))),geq(k,i)),c)]) &#10;\find(all{v (variable)}(or(or(or(leq(v,Z(neglit(1(#)))),geq(v,j)),b),a))==&gt;)&#10;\add [and(equals(sk,k),subst{v (variable)}(sk,or(or(or(leq(v,Z(neglit(1(#)))),geq(v,j)),b),a)))]==&gt;[] &#10;\heuristics(loopInvariant)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[553] cut, cut {&#10;\add []==&gt;[cutFormula] ;&#10;\add [cutFormula]==&gt;[] &#10;\heuristics(cut)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[554] cutUpperBound, cutUpperBound {&#10;\assumes ([all{v (variable)}(or(or(or(leq(v,Z(neglit(1(#)))),geq(v,j)),b),a))]==&gt;[]) &#10;\find(==&gt;or(or(leq(k,Z(neglit(1(#)))),geq(k,i)),c))&#10;\add [not(equals(k,i))]==&gt;[] ;&#10;\add [equals(k,i)]==&gt;[] &#10;\heuristics(loopInvariant)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[555] cut_direct, cut_direct {&#10;\find(cutFormula)&#10;\sameUpdateLevel\add []==&gt;[cutFormula] \replacewith(false) ;&#10;\add [cutFormula]==&gt;[] \replacewith(true) &#10;\heuristics(cut_direct)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[556] cut_direct_l, cut_direct_l {&#10;\find(b==&gt;)&#10;\add []==&gt;[b] ;&#10;\replacewith([b]==&gt;[]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[557] cut_direct_r, cut_direct_r {&#10;\find(==&gt;b)&#10;\add [b]==&gt;[] ;&#10;\replacewith([]==&gt;[b]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[558] defInDomainImpliesCreated, defInDomainImpliesCreated {&#10;\find(inDomainImpliesCreated(m))&#10;\varcond(\notFreeIn(o (variable), m (Map term)))&#10;\replacewith(all{o (variable)}(imp(inDomain(m,o),equals(boolean::select(heap,o,java.lang.Object::&lt;created&gt;),TRUE)))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[559] defIsFinite, defIsFinite {&#10;\find(isFinite(m))&#10;\varcond(\notFreeIn(s (variable), m (Map term)), \notFreeIn(vx (variable), m (Map term)))&#10;\replacewith(exists{s (variable)}(all{vx (variable)}(equiv(inDomain(m,vx),exists{ix (variable)}(and(and(leq(Z(0(#)),ix),lt(ix,seqLen(s))),equals(any::seqGet(s,ix),vx))))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[560] defMapEmpty, defMapEmpty {&#10;\find(mapEmpty)&#10;\replacewith(mapForeach{vy (variable)}(FALSE,mapUndef)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[561] defMapEquality, defMapEquality {&#10;\find(equals(m0,m1))&#10;\varcond(\notFreeIn(vy (variable), m1 (Map term)), \notFreeIn(vy (variable), m0 (Map term)))&#10;\replacewith(all{vy (variable)}(and(equiv(inDomain(m0,vy),inDomain(m1,vy)),imp(inDomain(m0,vy),equals(mapGet(m0,vy),mapGet(m1,vy)))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[562] defMapOverride, defMapOverride {&#10;\find(mapOverride(m0,m1))&#10;\varcond(\notFreeIn(vy (variable), m1 (Map term)), \notFreeIn(vy (variable), m0 (Map term)))&#10;\replacewith(mapForeach{vy (variable)}(if-then-else(or(inDomain(m0,vy),inDomain(m1,vy)),TRUE,FALSE),if-then-else(inDomain(m1,vy),mapGet(m1,vy),mapGet(m0,vy)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[563] defMapRemove, defMapRemove {&#10;\find(mapRemove(m,key))&#10;\varcond(\notFreeIn(vy (variable), key (any term)), \notFreeIn(vy (variable), m (Map term)))&#10;\replacewith(mapForeach{vy (variable)}(if-then-else(and(inDomain(m,vy),not(equals(vy,key))),TRUE,FALSE),mapGet(m,vy))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.01"/>
  <testcase name="[564] defMapSingleton, defMapSingleton {&#10;\find(mapSingleton(xa,y))&#10;\varcond(\notFreeIn(vy (variable), y (any term)), \notFreeIn(vy (variable), xa (alpha term)))&#10;\replacewith(mapForeach{vy (variable)}(if-then-else(equals(vy,any::cast(xa)),TRUE,FALSE),y)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[565] defMapUpdate, defMapUpdate {&#10;\find(mapUpdate(m,key,value))&#10;\varcond(\notFreeIn(vy (variable), value (any term)), \notFreeIn(vy (variable), key (any term)), \notFreeIn(vy (variable), m (Map term)))&#10;\replacewith(mapForeach{vy (variable)}(if-then-else(or(inDomain(m,vy),equals(vy,key)),TRUE,FALSE),if-then-else(equals(vy,key),value,mapGet(m,vy)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[566] defOfEmpty, defOfEmpty {&#10;\find(seqEmpty)&#10;\varcond(\notFreeIn(uSub (variable), te (any term)))&#10;\replacewith(seqDef{uSub (variable)}(Z(0(#)),Z(0(#)),te)) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[567] defOfSeqConcat, defOfSeqConcat {&#10;\find(seqConcat(seq1,seq2))&#10;\varcond(\notFreeIn(uSub (variable), seq2 (Seq term)), \notFreeIn(uSub (variable), seq1 (Seq term)))&#10;\replacewith(seqDef{uSub (variable)}(Z(0(#)),add(seqLen(seq1),seqLen(seq2)),if-then-else(lt(uSub,seqLen(seq1)),any::seqGet(seq1,uSub),any::seqGet(seq2,sub(uSub,seqLen(seq1)))))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[568] defOfSeqReverse, defOfSeqReverse {&#10;\find(seqReverse(seq))&#10;\varcond(\notFreeIn(uSub (variable), seq (Seq term)))&#10;\replacewith(seqDef{uSub (variable)}(Z(0(#)),seqLen(seq),any::seqGet(seq,sub(sub(seqLen(seq),uSub),Z(1(#)))))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[569] defOfSeqSingleton, defOfSeqSingleton {&#10;\find(seqSingleton(x))&#10;\varcond(\notFreeIn(uSub (variable), x (any term)))&#10;\replacewith(seqDef{uSub (variable)}(Z(0(#)),Z(1(#)),x)) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[570] defOfSeqSub, defOfSeqSub {&#10;\find(seqSub(seq,from,to))&#10;\varcond(\notFreeIn(uSub (variable), to (int term)), \notFreeIn(uSub (variable), from (int term)), \notFreeIn(uSub (variable), seq (Seq term)))&#10;\replacewith(seqDef{uSub (variable)}(from,to,any::seqGet(seq,uSub))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[571] defSeq2Map, defSeq2Map {&#10;\find(seq2map(s))&#10;\varcond(\notFreeIn(ix (variable), s (Seq term)))&#10;\replacewith(mapForeach{ix (variable)}(if-then-else(and(leq(Z(0(#)),ix),lt(ix,seqLen(s))),TRUE,FALSE),any::seqGet(s,ix))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.007"/>
  <testcase name="[572] def_wellOrderLeqInt, def_wellOrderLeqInt {&#10;\find(wellOrderLeqInt(intT1,intT2))&#10;\replacewith(or(and(geq(intT1,intT2),lt(intT2,Z(0(#)))),and(leq(Z(0(#)),intT1),leq(intT1,intT2)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[573] definitionAllElementsOfArray, definitionAllElementsOfArray {&#10;\find(allElementsOfArray(h,array,singleton(o,f)))&#10;\varcond(\notFreeIn(j (variable), f (Field term)), \notFreeIn(j (variable), o (java.lang.Object term)), \notFreeIn(j (variable), array (java.lang.Object term)), \notFreeIn(j (variable), h (Heap term)))&#10;\replacewith(infiniteUnion{j (variable)}(if-then-else(and(leq(Z(0(#)),j),lt(j,length(array))),singleton(java.lang.Object::select(h,array,arr(j)),f),empty))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[574] definitionAllElementsOfArray2, definitionAllElementsOfArray2 {&#10;\find(allElementsOfArray(h,array,allFields(o)))&#10;\varcond(\notFreeIn(j (variable), array (java.lang.Object term)), \notFreeIn(j (variable), h (Heap term)))&#10;\replacewith(infiniteUnion{j (variable)}(if-then-else(and(leq(Z(0(#)),j),lt(j,length(array))),allFields(java.lang.Object::select(h,array,arr(j))),empty))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[575] definitionAllElementsOfArrayLocsets, definitionAllElementsOfArrayLocsets {&#10;\find(allElementsOfArrayLocsets(h,array,singleton(o,f)))&#10;\varcond(\notFreeIn(j (variable), f (Field term)), \notFreeIn(j (variable), o (java.lang.Object term)), \notFreeIn(j (variable), array (java.lang.Object term)), \notFreeIn(j (variable), h (Heap term)))&#10;\replacewith(infiniteUnion{j (variable)}(if-then-else(and(leq(Z(0(#)),j),lt(j,length(array))),LocSet::select(h,java.lang.Object::select(h,array,arr(j)),f),empty))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[576] definitionOfNewObjectsIsomorphic, definitionOfNewObjectsIsomorphic {&#10;\find(==&gt;newObjectsIsomorphic(s1,h1,s2,h2))&#10;\replacewith([]==&gt;[objectsIsomorphic(s1,s1,s2,s2)]) ;&#10;\replacewith([]==&gt;[sameTypes(s1,s2)]) ;&#10;\replacewith([]==&gt;[newOnHeap(h2,s2)]) ;&#10;\replacewith([]==&gt;[newOnHeap(h1,s1)]) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.012"/>
  <testcase name="[577] definitionOfNewOnHeap, definitionOfNewOnHeap {&#10;\find(==&gt;newOnHeap(h,s))&#10;\varcond(\notFreeIn(i (variable), h (Heap term)), \notFreeIn(i (variable), s (Seq term)))&#10;\replacewith([]==&gt;[all{i (variable)}(imp(and(leq(Z(0(#)),i),lt(i,seqLen(s))),and(imp(equals(java.lang.Object::instance(any::seqGet(s,i)),TRUE),equals(boolean::select(h,java.lang.Object::seqGet(s,i),java.lang.Object::&lt;created&gt;),FALSE)),imp(equals(Seq::instance(any::seqGet(s,i)),TRUE),newOnHeap(h,Seq::seqGet(s,i))))))]) &#10;\heuristics(comprehensions)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[578] definitionOfObjectIsomorphic, definitionOfObjectIsomorphic {&#10;\find(==&gt;objectIsomorphic(s1,o1,s2,o2))&#10;\varcond(\notFreeIn(i (variable), o2 (java.lang.Object term)), \notFreeIn(i (variable), o1 (java.lang.Object term)), \notFreeIn(i (variable), s2 (Seq term)), \notFreeIn(i (variable), s1 (Seq term)))&#10;\replacewith([]==&gt;[all{i (variable)}(imp(and(leq(Z(0(#)),i),lt(i,seqLen(s1))),and(imp(equals(java.lang.Object::instance(any::seqGet(s1,i)),TRUE),equiv(equals(java.lang.Object::seqGet(s1,i),o1),equals(java.lang.Object::seqGet(s2,i),o2))),imp(…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[579] definitionOfObjectsIsomorphic, definitionOfObjectsIsomorphic {&#10;\find(==&gt;objectsIsomorphic(s1,t1,s2,t2))&#10;\varcond(\notFreeIn(i (variable), t2 (Seq term)), \notFreeIn(i (variable), t1 (Seq term)), \notFreeIn(i (variable), s2 (Seq term)), \notFreeIn(i (variable), s1 (Seq term)))&#10;\replacewith([]==&gt;[all{i (variable)}(imp(and(leq(Z(0(#)),i),lt(i,seqLen(t1))),and(imp(equals(java.lang.Object::instance(any::seqGet(t1,i)),TRUE),objectIsomorphic(s1,java.lang.Object::seqGet(t1,i),s2,java.lang.Object::seqGet(t2,i))),imp(equals(Seq::instance(any::seq…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[580] definitionOfSameTypes, definitionOfSameTypes {&#10;\find(==&gt;sameTypes(s1,s2))&#10;\varcond(\notFreeIn(i (variable), s2 (Seq term)), \notFreeIn(i (variable), s1 (Seq term)))&#10;\replacewith([]==&gt;[and(equals(seqLen(s1),seqLen(s2)),all{i (variable)}(imp(and(leq(Z(0(#)),i),lt(i,seqLen(s1))),and(sameType(any::seqGet(s1,i),any::seqGet(s2,i)),imp(equals(Seq::instance(any::seqGet(s1,i)),TRUE),sameTypes(Seq::seqGet(s1,i),Seq::seqGet(s2,i)))))))]) &#10;\heuristics(comprehensions)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[581] definitionSeqdefWorkaround, definitionSeqdefWorkaround {&#10;\find(seq_def_workaround(h,lower,upper,array))&#10;\varcond(\notFreeIn(j (variable), upper (int term)), \notFreeIn(j (variable), lower (int term)), \notFreeIn(j (variable), array (java.lang.Object term)), \notFreeIn(j (variable), h (Heap term)))&#10;\replacewith(seqDef{j (variable)}(lower,upper,any::select(h,array,arr(j)))) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[582] definitionSeqdefWorkaround2, definitionSeqdefWorkaround2 {&#10;\find(seq_def_workaround2(h,lower,upper,array,singleton(o,f)))&#10;\varcond(\notFreeIn(j (variable), upper (int term)), \notFreeIn(j (variable), lower (int term)), \notFreeIn(j (variable), array (java.lang.Object term)), \notFreeIn(j (variable), f (Field term)), \notFreeIn(j (variable), h (Heap term)))&#10;\replacewith(seqDef{j (variable)}(lower,upper,any::select(h,java.lang.Object::select(h,array,arr(j)),f))) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[583] deleteMergePoint, deleteMergePoint {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  //@ merge_point (#lhs);;&#10;  ... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(merge_point, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[584] delete_unnecessary_cast, delete_unnecessary_cast {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#npit) #se;&#10;... }\] (post))&#10;\sameUpdateLevel\varcond(\hasSort(#npit (program NonPrimitiveType), G), \sub(\typeof(#se (program SimpleExpression)), G), )&#10;\add [or(equals(#se,null),equals(G::instance(#se),TRUE))]==&gt;[] \replacewith(update-application(elem-update(#lhs (program LeftHandSide))(#addCast(#se,#lhs)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[585] diamondToBox, diamondToBox {&#10;\find(\&lt;{ ..&#10;  #s&#10;... }\&gt; (post))&#10;\replacewith(not(\[{ ..&#10;  #s&#10;... }\] (not(post)))) &#10;\heuristics(boxDiamondConv)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[586] diamondToBoxTransaction, diamondToBoxTransaction {&#10;\find(diamond_transaction\[{ ..&#10;  #s&#10;... }\] (post))&#10;\replacewith(not(box_transaction\[{ ..&#10;  #s&#10;... }\] (not(post)))) &#10;\heuristics(boxDiamondConv)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[587] diamond_and_left, diamond_and_left {&#10;\find(#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (and(post,post1))==&gt;)&#10;\replacewith([and(#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post),#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post1))]==&gt;[]) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[588] diamond_and_right, diamond_and_right {&#10;\find(==&gt;#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (and(post,post1)))&#10;\replacewith([]==&gt;[#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post1)]) ;&#10;\replacewith([]==&gt;[#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post)]) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[589] diamond_false, diamond_false {&#10;\find(#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (false))&#10;\replacewith(false) &#10;\heuristics(modal_tautology)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[590] diamond_or_left, diamond_or_left {&#10;\find(#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (or(post,post1))==&gt;)&#10;\replacewith([or(#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post),#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post1))]==&gt;[]) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[591] diamond_or_right, diamond_or_right {&#10;\find(==&gt;#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (or(post,post1)))&#10;\replacewith([]==&gt;[or(#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post),#diamond ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post1))]) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[592] diamond_split_termination, diamond_split_termination {&#10;\find(\&lt;{ ..&#10;  #s&#10;... }\&gt; (post))&#10;\replacewith(and(\[{ ..&#10;  #s&#10;... }\] (post),\&lt;{ ..&#10;  #s&#10;... }\&gt; (true))) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[593] disjointAllFields, disjointAllFields {&#10;\assumes ([equals(intersect(allFields(o),s),empty)]==&gt;[]) &#10;\find(elementOf(o,f,s))&#10;\sameUpdateLevel\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[594] disjointAllFields_2, disjointAllFields_2 {&#10;\find(equals(intersect(allFields(o),allFields(o2)),empty))&#10;\replacewith(not(equals(o,o2))) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[595] disjointAllObjects, disjointAllObjects {&#10;\assumes ([equals(intersect(allObjects(f),s),empty)]==&gt;[]) &#10;\find(elementOf(o,f,s))&#10;\sameUpdateLevel\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[596] disjointAndSubset1, disjointAndSubset1 {&#10;\assumes ([equals(intersect(s2,s3),empty)]==&gt;[]) &#10;\find(subset(s,s2)==&gt;)&#10;\add [equals(intersect(s,s3),empty)]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[597] disjointAndSubset2, disjointAndSubset2 {&#10;\assumes ([equals(intersect(s2,s3),empty)]==&gt;[]) &#10;\find(subset(s,s3)==&gt;)&#10;\add [equals(intersect(s,s2),empty)]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[598] disjointAndSubset_3, disjointAndSubset_3 {&#10;\assumes ([equals(intersect(s1,s2),empty)]==&gt;[]) &#10;\find(subset(s4,union(s2,s3))==&gt;)&#10;\add [imp(equals(intersect(s1,s3),empty),equals(intersect(s1,s4),empty))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[599] disjointAndSubset_4, disjointAndSubset_4 {&#10;\assumes ([equals(intersect(s1,s2),empty)]==&gt;[]) &#10;\find(subset(s4,union(s3,s2))==&gt;)&#10;\add [imp(equals(intersect(s1,s3),empty),equals(intersect(s1,s4),empty))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[600] disjointAndSubset_5, disjointAndSubset_5 {&#10;\assumes ([equals(intersect(s2,s1),empty)]==&gt;[]) &#10;\find(subset(s4,union(s2,s3))==&gt;)&#10;\add [imp(equals(intersect(s1,s3),empty),equals(intersect(s1,s4),empty))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[601] disjointAndSubset_6, disjointAndSubset_6 {&#10;\assumes ([equals(intersect(s2,s1),empty)]==&gt;[]) &#10;\find(subset(s4,union(s3,s2))==&gt;)&#10;\add [imp(equals(intersect(s1,s3),empty),equals(intersect(s1,s4),empty))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[602] disjointArrayRangeAllFields1, disjointArrayRangeAllFields1 {&#10;\find(equals(intersect(allFields(o1),arrayRange(o2,lower2,upper2)),empty))&#10;\replacewith(not(and(equals(o1,o2),leq(lower2,upper2)))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[603] disjointArrayRangeAllFields2, disjointArrayRangeAllFields2 {&#10;\find(equals(intersect(arrayRange(o1,lower1,upper1),allFields(o2)),empty))&#10;\replacewith(not(and(equals(o1,o2),leq(lower1,upper1)))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[604] disjointArrayRanges, disjointArrayRanges {&#10;\find(equals(intersect(arrayRange(o1,lower1,upper1),arrayRange(o2,lower2,upper2)),empty))&#10;\replacewith(not(and(and(and(equals(o1,o2),leq(lower1,upper1)),leq(lower2,upper2)),or(and(leq(lower1,lower2),leq(lower2,upper1)),and(leq(lower2,lower1),leq(lower1,upper2)))))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[605] disjointDefinition, disjointDefinition {&#10;\find(disjoint(s,s2))&#10;\replacewith(equals(intersect(s,s2),empty)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[606] disjointInfiniteUnion, disjointInfiniteUnion {&#10;\find(equals(intersect(infiniteUnion{iv (variable)}(s2),s),empty))&#10;\varcond(\notFreeIn(iv (variable), s (LocSet term)))&#10;\replacewith(all{iv (variable)}(equals(intersect(s2,s),empty))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[607] disjointInfiniteUnion_2, disjointInfiniteUnion_2 {&#10;\find(equals(intersect(s,infiniteUnion{iv (variable)}(s2)),empty))&#10;\varcond(\notFreeIn(iv (variable), s (LocSet term)))&#10;\replacewith(all{iv (variable)}(equals(intersect(s,s2),empty))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[608] disjointNotInOtherLocset1, disjointNotInOtherLocset1 {&#10;\assumes ([equals(intersect(s,s2),empty)]==&gt;[]) &#10;\find(elementOf(o,f,s)==&gt;)&#10;\add []==&gt;[elementOf(o,f,s2)] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[609] disjointNotInOtherLocset2, disjointNotInOtherLocset2 {&#10;\assumes ([equals(intersect(s,s2),empty)]==&gt;[]) &#10;\find(elementOf(o,f,s2)==&gt;)&#10;\add []==&gt;[elementOf(o,f,s)] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[610] disjointToElementOf, disjointToElementOf {&#10;\find(disjoint(s,s2))&#10;\varcond(\notFreeIn(fv (variable), s2 (LocSet term)), \notFreeIn(fv (variable), s (LocSet term)), \notFreeIn(ov (variable), s2 (LocSet term)), \notFreeIn(ov (variable), s (LocSet term)))&#10;\replacewith(all{ov (variable)}(all{fv (variable)}(or(not(elementOf(ov,fv,s)),not(elementOf(ov,fv,s2)))))) &#10;\heuristics(semantics_blasting)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[611] disjointWithEmpty, disjointWithEmpty {&#10;\find(disjoint(empty,s))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[612] disjointWithSingleton1, disjointWithSingleton1 {&#10;\find(equals(intersect(s,singleton(o,f)),empty))&#10;\replacewith(not(elementOf(o,f,s))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[613] disjointWithSingleton2, disjointWithSingleton2 {&#10;\find(equals(intersect(singleton(o,f),s),empty))&#10;\replacewith(not(elementOf(o,f,s))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[614] dismissNonSelectedField, dismissNonSelectedField {&#10;\find(alpha::select(store(h,o,f1,x),u,f2))&#10;\varcond(\differentFields (f1 (Field term), f2 (Field term)), )&#10;\replacewith(alpha::select(h,u,f2)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[615] dismissNonSelectedFieldEQ, dismissNonSelectedFieldEQ {&#10;\assumes ([equals(store(h,o,f1,x),EQ)]==&gt;[]) &#10;\find(alpha::select(EQ,u,f2))&#10;\sameUpdateLevel\varcond(\differentFields (f1 (Field term), f2 (Field term)), )&#10;\replacewith(alpha::select(h,u,f2)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[616] distr_existsAnd1, distr_existsAnd1 {&#10;\find(exists{u (variable)}(and(phi,psi)))&#10;\varcond(\notFreeIn(u (variable), psi (formula)))&#10;\replacewith(and(exists{u (variable)}(phi),psi)) &#10;\heuristics(notHumanReadable, distrQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[617] distr_existsAnd2, distr_existsAnd2 {&#10;\find(exists{u (variable)}(and(phi,psi)))&#10;\varcond(\notFreeIn(u (variable), phi (formula)))&#10;\replacewith(and(phi,exists{u (variable)}(psi))) &#10;\heuristics(notHumanReadable, distrQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[618] distr_existsOr, distr_existsOr {&#10;\find(exists{u (variable)}(or(phi,psi)))&#10;\replacewith(or(exists{u (variable)}(phi),exists{u (variable)}(psi))) &#10;\heuristics(notHumanReadable, distrQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[619] distr_forallAnd, distr_forallAnd {&#10;\find(all{u (variable)}(and(phi,psi)))&#10;\replacewith(and(all{u (variable)}(phi),all{u (variable)}(psi))) &#10;\heuristics(notHumanReadable, distrQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[620] distr_forallOr1, distr_forallOr1 {&#10;\find(all{u (variable)}(or(phi,psi)))&#10;\varcond(\notFreeIn(u (variable), psi (formula)))&#10;\replacewith(or(all{u (variable)}(phi),psi)) &#10;\heuristics(notHumanReadable, distrQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[621] distr_forallOr2, distr_forallOr2 {&#10;\find(all{u (variable)}(or(phi,psi)))&#10;\varcond(\notFreeIn(u (variable), phi (formula)))&#10;\replacewith(or(phi,all{u (variable)}(psi))) &#10;\heuristics(notHumanReadable, distrQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[622] distributeIntersection, distributeIntersection {&#10;\find(intersect(s1,union(s2,s3)))&#10;\replacewith(union(intersect(s1,s2),intersect(s1,s3))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[623] distributeIntersection_2, distributeIntersection_2 {&#10;\find(intersect(union(s2,s3),s1))&#10;\replacewith(union(intersect(s2,s1),intersect(s3,s1))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[624] divAddMultDenom, divAddMultDenom {&#10;\find(div(add(divNum,mul(coef,divDenom)),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(add(div(divNum,divDenom),coef)) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[625] divGreatestDNeg, divGreatestDNeg {&#10;\find(lt(divNum,mul(divDenom,coef))==&gt;)&#10;\add [imp(lt(divDenom,Z(0(#))),lt(coef,div(divNum,divDenom)))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[626] divGreatestDPos, divGreatestDPos {&#10;\find(leq(mul(divDenom,coef),divNum)==&gt;)&#10;\add [imp(gt(divDenom,Z(0(#))),leq(coef,div(divNum,divDenom)))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[627] divIncreasingNeg, divIncreasingNeg {&#10;\add [all{divDenom1 (variable)}(all{divNum1 (variable)}(all{divNum2 (variable)}(imp(and(lt(divDenom1,Z(0(#))),leq(divNum1,divNum2)),geq(div(divNum1,divDenom1),div(divNum2,divDenom1))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[628] divIncreasingPos, divIncreasingPos {&#10;\add [all{divDenom1 (variable)}(all{divNum1 (variable)}(all{divNum2 (variable)}(imp(and(gt(divDenom1,Z(0(#))),leq(divNum1,divNum2)),leq(div(divNum1,divDenom1),div(divNum2,divDenom1))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[629] divLeastDNeg, divLeastDNeg {&#10;\find(leq(mul(divDenom,coef),divNum)==&gt;)&#10;\add [imp(lt(divDenom,Z(0(#))),leq(div(divNum,divDenom),coef))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[630] divLeastDPos, divLeastDPos {&#10;\find(lt(divNum,mul(divDenom,coef))==&gt;)&#10;\add [imp(gt(divDenom,Z(0(#))),lt(div(divNum,divDenom),coef))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[631] divMinus, divMinus {&#10;\find(div(neg(divNum),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(if-then-else(equals(mul(div(divNum,divDenom),divDenom),divNum),neg(div(divNum,divDenom)),if-then-else(gt(divDenom,Z(0(#))),sub(neg(div(divNum,divDenom)),Z(1(#))),add(neg(div(divNum,divDenom)),Z(1(#)))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[632] divMinusDenom, divMinusDenom {&#10;\find(div(divNum,neg(divDenom)))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(neg(div(divNum,divDenom))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[633] divResOne1, divResOne1 {&#10;\find(div(divNum,divDenom))&#10;\add [imp(and(and(gt(divDenom,Z(0(#))),lt(divNum,Z(0(#)))),lt(neg(divDenom),divNum)),equals(div(divNum,divDenom),Z(neglit(1(#)))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[634] divResOne2, divResOne2 {&#10;\find(div(divNum,divDenom))&#10;\add [imp(and(and(lt(divDenom,Z(0(#))),lt(divNum,Z(0(#)))),lt(divDenom,divNum)),equals(div(divNum,divDenom),Z(1(#))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[635] divResZero1, divResZero1 {&#10;\find(div(divNum,divDenom))&#10;\add [imp(and(and(gt(divDenom,Z(0(#))),leq(Z(0(#)),divNum)),lt(divNum,divDenom)),equals(div(divNum,divDenom),Z(0(#))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[636] divResZero2, divResZero2 {&#10;\find(div(divNum,divDenom))&#10;\add [imp(and(and(lt(divDenom,Z(0(#))),leq(Z(0(#)),divNum)),lt(divNum,neg(divDenom))),equals(div(divNum,divDenom),Z(0(#))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[637] div_axiom, div_axiom {&#10;\find(div(divNum,divDenom))&#10;\sameUpdateLevel\add [or(equals(divDenom,Z(0(#))),and(and(equals(div(divNum,divDenom),quotient),leq(mul(quotient,divDenom),divNum)),if-then-else(geq(divDenom,Z(0(#))),geq(mul(quotient,divDenom),add(add(Z(1(#)),divNum),mul(Z(neglit(1(#))),divDenom))),geq(mul(quotient,divDenom),add(add(Z(1(#)),divNum),divDenom)))))]==&gt;[] &#10;\heuristics(notHumanReadable, polySimp_newSmallSym, defOps_div)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[638] div_cancel1, div_cancel1 {&#10;\find(div(mul(divNum,divDenom),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(divNum) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[639] div_cancel2, div_cancel2 {&#10;\find(div(mul(divDenom,divNum),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(divNum) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[640] div_exists, div_exists {&#10;\find(div(divNum,divDenom))&#10;\add [all{cnom (variable)}(imp(not(equals(cnom,Z(0(#)))),all{a (variable)}(exists{qu (variable)}(exists{rm (variable)}(and(and(equals(a,add(mul(qu,cnom),rm)),leq(Z(0(#)),rm)),if-then-else(geq(cnom,Z(0(#))),and(geq(mul(qu,cnom),add(add(Z(1(#)),a),mul(Z(neglit(1(#))),cnom))),lt(rm,cnom)),and(geq(mul(qu,cnom),add(add(Z(1(#)),a),cnom)),lt(rm,neg(cnom))))))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[641] div_literals, div_literals {&#10;\find(div(Z(iz),Z(jz)))&#10;\replacewith(#div(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[642] div_one, div_one {&#10;\find(div(divNum,Z(1(#))))&#10;\replacewith(divNum) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[643] div_unique1, div_unique1 {&#10;\find(div(divNum,divDenom))&#10;\add [all{a (variable)}(all{cnom (variable)}(all{x (variable)}(all{y (variable)}(imp(and(and(and(and(gt(cnom,Z(0(#))),leq(mul(x,cnom),a)),leq(mul(y,cnom),a)),geq(mul(x,cnom),sub(add(Z(1(#)),a),cnom))),geq(mul(y,cnom),sub(add(Z(1(#)),a),cnom))),equals(x,y))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[644] div_unique2, div_unique2 {&#10;\find(div(divNum,divDenom))&#10;\add [all{a (variable)}(all{cnom (variable)}(all{x (variable)}(all{y (variable)}(imp(and(and(and(and(lt(cnom,Z(0(#))),leq(mul(x,cnom),a)),leq(mul(y,cnom),a)),geq(mul(x,cnom),add(add(Z(1(#)),a),cnom))),geq(mul(y,cnom),add(add(Z(1(#)),a),cnom))),equals(x,y))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[645] div_zero, div_zero {&#10;\find(div(Z(0(#)),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[646] divide_eq0, divide_eq0 {&#10;\assumes ([geq(divX,divXBoundPos)]==&gt;[]) &#10;\find(equals(divProd,divProdBoundNonNeg)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(geq(divXBoundPos,Z(1(#))),imp(geq(divProdBoundNonNeg,Z(0(#))),leq(divY,div(divProdBoundNonNeg,divXBoundPos)))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_divide, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[647] divide_eq1, divide_eq1 {&#10;\assumes ([geq(divX,divXBoundNonNeg)]==&gt;[]) &#10;\find(equals(divProd,divProdBoundNeg)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(geq(divXBoundNonNeg,Z(0(#))),imp(leq(divProdBoundNeg,Z(neglit(1(#)))),leq(divY,Z(neglit(1(#)))))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_neg, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[648] divide_eq2, divide_eq2 {&#10;\assumes ([geq(divX,divXBoundPos)]==&gt;[]) &#10;\find(equals(divProd,divProdBoundNonPos)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(geq(divXBoundPos,Z(1(#))),imp(leq(divProdBoundNonPos,Z(0(#))),geq(divY,div(sub(add(divProdBoundNonPos,divXBoundPos),Z(1(#))),divXBoundPos)))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_divide, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[649] divide_eq3, divide_eq3 {&#10;\assumes ([geq(divX,divXBoundNonNeg)]==&gt;[]) &#10;\find(equals(divProd,divProdBoundPos)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(geq(divXBoundNonNeg,Z(0(#))),imp(geq(divProdBoundPos,Z(1(#))),geq(divY,Z(1(#))))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_pos, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[650] divide_eq4, divide_eq4 {&#10;\assumes ([leq(divX,divXBoundNeg)]==&gt;[]) &#10;\find(equals(divProd,divProdBoundNonPos)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(leq(divXBoundNeg,Z(neglit(1(#)))),imp(leq(divProdBoundNonPos,Z(0(#))),leq(divY,div(divProdBoundNonPos,divXBoundNeg)))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_divide, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[651] divide_eq5, divide_eq5 {&#10;\assumes ([leq(divX,divXBoundNonPos)]==&gt;[]) &#10;\find(equals(divProd,divProdBoundPos)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(leq(divXBoundNonPos,Z(0(#))),imp(geq(divProdBoundPos,Z(1(#))),leq(divY,Z(neglit(1(#)))))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_neg, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[652] divide_eq6, divide_eq6 {&#10;\assumes ([leq(divX,divXBoundNeg)]==&gt;[]) &#10;\find(equals(divProd,divProdBoundNonNeg)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(leq(divXBoundNeg,Z(neglit(1(#)))),imp(geq(divProdBoundNonNeg,Z(0(#))),geq(divY,div(divProdBoundNonNeg,divXBoundNeg)))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_divide, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[653] divide_eq7, divide_eq7 {&#10;\assumes ([leq(divX,divXBoundNonPos)]==&gt;[]) &#10;\find(equals(divProd,divProdBoundNeg)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(leq(divXBoundNonPos,Z(0(#))),imp(leq(divProdBoundNeg,Z(neglit(1(#)))),geq(divY,Z(1(#))))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_pos, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[654] divide_equation, divide_equation {&#10;\find(equals(elimGcdLeft,elimGcdRight))&#10;\replacewith(if-then-else(and(and(geq(elimGcd,Z(1(#))),equals(mod(elimGcdLeft,elimGcd),Z(0(#)))),leq(mod(elimGcdRight,elimGcd),add(Z(neglit(1(#))),elimGcd))),and(equals(mod(elimGcdRight,elimGcd),Z(0(#))),equals(div(elimGcdLeft,elimGcd),div(elimGcdRight,elimGcd))),equals(elimGcdLeft,elimGcdRight))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[655] divide_geq, divide_geq {&#10;\find(geq(elimGcdLeft,elimGcdRight))&#10;\replacewith(if-then-else(and(and(geq(elimGcd,Z(1(#))),equals(mod(elimGcdLeft,elimGcd),Z(0(#)))),leq(mod(elimGcdRight,elimGcd),add(Z(neglit(1(#))),elimGcd))),geq(div(elimGcdLeft,elimGcd),add(Z(1(#)),div(add(Z(neglit(1(#))),elimGcdRight),elimGcd))),geq(elimGcdLeft,elimGcdRight))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[656] divide_inEq0, divide_inEq0 {&#10;\assumes ([geq(divX,divXBoundPos)]==&gt;[]) &#10;\find(leq(divProd,divProdBoundNonNeg)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(geq(divXBoundPos,Z(1(#))),imp(geq(divProdBoundNonNeg,Z(0(#))),leq(divY,div(divProdBoundNonNeg,divXBoundPos)))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_divide, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[657] divide_inEq1, divide_inEq1 {&#10;\assumes ([geq(divX,divXBoundNonNeg)]==&gt;[]) &#10;\find(leq(divProd,divProdBoundNeg)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(geq(divXBoundNonNeg,Z(0(#))),imp(leq(divProdBoundNeg,Z(neglit(1(#)))),leq(divY,Z(neglit(1(#)))))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_neg, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[658] divide_inEq2, divide_inEq2 {&#10;\assumes ([geq(divX,divXBoundPos)]==&gt;[]) &#10;\find(geq(divProd,divProdBoundNonPos)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(geq(divXBoundPos,Z(1(#))),imp(leq(divProdBoundNonPos,Z(0(#))),geq(divY,div(sub(add(divProdBoundNonPos,divXBoundPos),Z(1(#))),divXBoundPos)))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_divide, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[659] divide_inEq3, divide_inEq3 {&#10;\assumes ([geq(divX,divXBoundNonNeg)]==&gt;[]) &#10;\find(geq(divProd,divProdBoundPos)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(geq(divXBoundNonNeg,Z(0(#))),imp(geq(divProdBoundPos,Z(1(#))),geq(divY,Z(1(#))))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_pos, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[660] divide_inEq4, divide_inEq4 {&#10;\assumes ([leq(divX,divXBoundNeg)]==&gt;[]) &#10;\find(geq(divProd,divProdBoundNonPos)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(leq(divXBoundNeg,Z(neglit(1(#)))),imp(leq(divProdBoundNonPos,Z(0(#))),leq(divY,div(divProdBoundNonPos,divXBoundNeg)))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_divide, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[661] divide_inEq5, divide_inEq5 {&#10;\assumes ([leq(divX,divXBoundNonPos)]==&gt;[]) &#10;\find(geq(divProd,divProdBoundPos)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(leq(divXBoundNonPos,Z(0(#))),imp(geq(divProdBoundPos,Z(1(#))),leq(divY,Z(neglit(1(#)))))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_neg, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[662] divide_inEq6, divide_inEq6 {&#10;\assumes ([leq(divX,divXBoundNeg)]==&gt;[]) &#10;\find(leq(divProd,divProdBoundNonNeg)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(leq(divXBoundNeg,Z(neglit(1(#)))),imp(geq(divProdBoundNonNeg,Z(0(#))),geq(divY,div(divProdBoundNonNeg,divXBoundNeg)))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_divide, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[663] divide_inEq7, divide_inEq7 {&#10;\assumes ([leq(divX,divXBoundNonPos)]==&gt;[]) &#10;\find(leq(divProd,divProdBoundNeg)==&gt;)&#10;\add [imp(equals(divProd,mul(divX,divY)),imp(leq(divXBoundNonPos,Z(0(#))),imp(leq(divProdBoundNeg,Z(neglit(1(#)))),geq(divY,Z(1(#))))))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_pos, inEqSimp_special_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[664] divide_leq, divide_leq {&#10;\find(leq(elimGcdLeft,elimGcdRight))&#10;\replacewith(if-then-else(and(and(geq(elimGcd,Z(1(#))),equals(mod(elimGcdLeft,elimGcd),Z(0(#)))),leq(mod(elimGcdRight,elimGcd),add(Z(neglit(1(#))),elimGcd))),leq(div(elimGcdLeft,elimGcd),div(elimGcdRight,elimGcd)),leq(elimGcdLeft,elimGcdRight))) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[665] doWhileUnwind, doWhileUnwind {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  do #s&#10;  while (#e);&#10;... }\] (post))&#10;\varcond(\newLabel (#innerLabel (program Label)), \newLabel (#outerLabel (program Label)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #unwind-loop(do #s&#10;  while (#e);)&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[666] doubleImpLeft, doubleImpLeft {&#10;\find(imp(b,imp(c,d))==&gt;)&#10;\replacewith([d]==&gt;[]) ;&#10;\replacewith([]==&gt;[c]) ;&#10;\replacewith([]==&gt;[b]) &#10;\heuristics(beta)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[667] double_not, double_not {&#10;\find(not(not(b)))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[668] double_unary_minus_literal, double_unary_minus_literal {&#10;\find(Z(neglit(neglit(iz))))&#10;\replacewith(Z(iz)) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[669] dropEffectlessStores, dropEffectlessStores {&#10;\find(store(h,o,f,x))&#10;\varcond(\dropEffectlessStores(h (Heap term), o (java.lang.Object term), f (Field term), x (any term), result (Heap term)), )&#10;\replacewith(result) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[670] elementOfAllFields, elementOfAllFields {&#10;\find(elementOf(o,f,allFields(o2)))&#10;\replacewith(equals(o,o2)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[671] elementOfAllLocs, elementOfAllLocs {&#10;\find(elementOf(o,f,allLocs))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[672] elementOfAllObjects, elementOfAllObjects {&#10;\find(elementOf(o,f,allObjects(f2)))&#10;\replacewith(equals(f,f2)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[673] elementOfArrayRange, elementOfArrayRange {&#10;\find(elementOf(o,f,arrayRange(o2,lower,upper)))&#10;\varcond(\notFreeIn(iv (variable), upper (int term)), \notFreeIn(iv (variable), lower (int term)), \notFreeIn(iv (variable), f (Field term)))&#10;\replacewith(and(equals(o,o2),exists{iv (variable)}(and(and(equals(f,arr(iv)),leq(lower,iv)),leq(iv,upper))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[674] elementOfArrayRangeConcrete, elementOfArrayRangeConcrete {&#10;\find(elementOf(o,arr(idx),arrayRange(o2,lower,upper)))&#10;\replacewith(and(and(equals(o,o2),leq(lower,idx)),leq(idx,upper))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[675] elementOfArrayRangeEQ, elementOfArrayRangeEQ {&#10;\assumes ([equals(arrayRange(o2,lower,upper),EQ)]==&gt;[]) &#10;\find(elementOf(o,f,EQ))&#10;\sameUpdateLevel\varcond(\notFreeIn(iv (variable), upper (int term)), \notFreeIn(iv (variable), lower (int term)), \notFreeIn(iv (variable), f (Field term)))&#10;\replacewith(and(equals(o,o2),exists{iv (variable)}(and(and(equals(f,arr(iv)),leq(lower,iv)),leq(iv,upper))))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.013"/>
  <testcase name="[676] elementOfEmpty, elementOfEmpty {&#10;\find(elementOf(o,f,empty))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[677] elementOfFreshLocs, elementOfFreshLocs {&#10;\find(elementOf(o,f,freshLocs(h)))&#10;\replacewith(and(not(equals(o,null)),not(equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE)))) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[678] elementOfGuardedSet, elementOfGuardedSet {&#10;\find(elementOf(o,f,if-then-else(phi,s,empty)))&#10;\replacewith(and(phi,elementOf(o,f,s))) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[679] elementOfInfiniteUnion, elementOfInfiniteUnion {&#10;\find(elementOf(o,f,infiniteUnion{av (variable)}(s)))&#10;\varcond(\notFreeIn(av (variable), f (Field term)), \notFreeIn(av (variable), o (java.lang.Object term)))&#10;\replacewith(exists{av (variable)}(elementOf(o,f,s))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[680] elementOfInfiniteUnion2Vars, elementOfInfiniteUnion2Vars {&#10;\find(elementOf(o,f,infiniteUnion{av (variable), bv (variable)}(s)))&#10;\varcond(\notFreeIn(bv (variable), f (Field term)), \notFreeIn(bv (variable), o (java.lang.Object term)), \notFreeIn(av (variable), f (Field term)), \notFreeIn(av (variable), o (java.lang.Object term)))&#10;\replacewith(exists{av (variable)}(exists{bv (variable)}(elementOf(o,f,s)))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[681] elementOfInfiniteUnion2VarsEQ, elementOfInfiniteUnion2VarsEQ {&#10;\assumes ([equals(infiniteUnion{av (variable), bv (variable)}(s),EQ)]==&gt;[]) &#10;\find(elementOf(o,f,EQ))&#10;\sameUpdateLevel\varcond(\notFreeIn(bv (variable), f (Field term)), \notFreeIn(bv (variable), o (java.lang.Object term)), \notFreeIn(av (variable), f (Field term)), \notFreeIn(av (variable), o (java.lang.Object term)))&#10;\replacewith(exists{av (variable)}(exists{bv (variable)}(elementOf(o,f,s)))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[682] elementOfInfiniteUnionEQ, elementOfInfiniteUnionEQ {&#10;\assumes ([equals(infiniteUnion{av (variable)}(s),EQ)]==&gt;[]) &#10;\find(elementOf(o,f,EQ))&#10;\sameUpdateLevel\varcond(\notFreeIn(av (variable), f (Field term)), \notFreeIn(av (variable), o (java.lang.Object term)))&#10;\replacewith(exists{av (variable)}(elementOf(o,f,s))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[683] elementOfIntersect, elementOfIntersect {&#10;\find(elementOf(o,f,intersect(s,s2)))&#10;\replacewith(and(elementOf(o,f,s),elementOf(o,f,s2))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[684] elementOfIntersectEQ, elementOfIntersectEQ {&#10;\assumes ([equals(intersect(s,s2),EQ)]==&gt;[]) &#10;\find(elementOf(o,f,EQ))&#10;\sameUpdateLevel\replacewith(and(elementOf(o,f,s),elementOf(o,f,s2))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[685] elementOfSetMinus, elementOfSetMinus {&#10;\find(elementOf(o,f,setMinus(s,s2)))&#10;\replacewith(and(elementOf(o,f,s),not(elementOf(o,f,s2)))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[686] elementOfSetMinusEQ, elementOfSetMinusEQ {&#10;\assumes ([equals(setMinus(s,s2),EQ)]==&gt;[]) &#10;\find(elementOf(o,f,EQ))&#10;\sameUpdateLevel\replacewith(and(elementOf(o,f,s),not(elementOf(o,f,s2)))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[687] elementOfSingleton, elementOfSingleton {&#10;\find(elementOf(o,f,singleton(o2,f2)))&#10;\replacewith(and(equals(o,o2),equals(f,f2))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[688] elementOfSubsetImpliesElementOfSuperset, elementOfSubsetImpliesElementOfSuperset {&#10;\assumes ([subset(s,s2)]==&gt;[]) &#10;\find(elementOf(o,f,s)==&gt;)&#10;\add [elementOf(o,f,s2)]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[689] elementOfSubsetOfUnion1, elementOfSubsetOfUnion1 {&#10;\assumes ([subset(s,union(s2,s3))]==&gt;[elementOf(o,f,s2)]) &#10;\find(elementOf(o,f,s))&#10;\sameUpdateLevel\add [equiv(elementOf(o,f,s),elementOf(o,f,intersect(s,s3)))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[690] elementOfSubsetOfUnion2, elementOfSubsetOfUnion2 {&#10;\assumes ([subset(s,union(s2,s3))]==&gt;[elementOf(o,f,s3)]) &#10;\find(elementOf(o,f,s))&#10;\sameUpdateLevel\add [equiv(elementOf(o,f,s),elementOf(o,f,intersect(s,s2)))]==&gt;[] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[691] elementOfUnion, elementOfUnion {&#10;\find(elementOf(o,f,union(s,s2)))&#10;\replacewith(or(elementOf(o,f,s),elementOf(o,f,s2))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[692] elementOfUnionEQ, elementOfUnionEQ {&#10;\assumes ([equals(union(s,s2),EQ)]==&gt;[]) &#10;\find(elementOf(o,f,EQ))&#10;\sameUpdateLevel\replacewith(or(elementOf(o,f,s),elementOf(o,f,s2))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[693] elimGcdEq, elimGcdEq {&#10;\find(equals(elimGcdLeft,elimGcdRight))&#10;\replacewith(if-then-else(and(and(equals(mul(elimGcdLeftDiv,elimGcd),elimGcdLeft),leq(add(elimGcdRight,mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv)),add(Z(neglit(1(#))),elimGcd))),geq(add(elimGcdRight,mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv)),Z(0(#)))),and(equals(add(elimGcdRight,mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv)),Z(0(#))),equals(elimGcdLeftDiv,elimGcdRightDiv)),equals(elimGcdLeft,elimGcdRight))) &#10;\heuristics(notHumanReadable…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[694] elimGcdGeq, elimGcdGeq {&#10;\find(geq(elimGcdLeft,elimGcdRight))&#10;\replacewith(if-then-else(and(geq(add(add(add(add(sub(elimGcd,Z(1(#))),mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv)),elimGcdRight),mul(elimGcdLeftDiv,elimGcd)),mul(elimGcdLeft,Z(neglit(1(#))))),Z(0(#))),leq(add(add(add(mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv),elimGcdRight),mul(elimGcdLeftDiv,elimGcd)),mul(elimGcdLeft,Z(neglit(1(#))))),Z(0(#)))),geq(elimGcdLeftDiv,elimGcdRightDiv),geq(elimGcdLeft,elimGcdRight))) &#10;\heuristics(notHumanReadable, i…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[695] elimGcdGeq_antec, elimGcdGeq_antec {&#10;\find(geq(elimGcdLeft,elimGcdRight)==&gt;)&#10;\replacewith([or(or(leq(elimGcd,Z(0(#))),leq(add(add(add(add(elimGcd,mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv)),elimGcdRight),mul(elimGcdLeftDiv,elimGcd)),mul(elimGcdLeft,Z(neglit(1(#))))),Z(0(#)))),geq(elimGcdLeftDiv,elimGcdRightDiv))]==&gt;[]) &#10;\heuristics(notHumanReadable, inEqSimp_pullOutGcd_antec, inEqSimp_pullOutGcd_geq, inEqSimp_pullOutGcd)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[696] elimGcdLeq, elimGcdLeq {&#10;\find(leq(elimGcdLeft,elimGcdRight))&#10;\replacewith(if-then-else(and(leq(add(add(add(add(sub(Z(1(#)),elimGcd),mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv)),elimGcdRight),mul(elimGcdLeftDiv,elimGcd)),mul(elimGcdLeft,Z(neglit(1(#))))),Z(0(#))),geq(add(add(add(mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv),elimGcdRight),mul(elimGcdLeftDiv,elimGcd)),mul(elimGcdLeft,Z(neglit(1(#))))),Z(0(#)))),leq(elimGcdLeftDiv,elimGcdRightDiv),leq(elimGcdLeft,elimGcdRight))) &#10;\heuristics(notHumanReadable, i…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[697] elimGcdLeq_antec, elimGcdLeq_antec {&#10;\find(leq(elimGcdLeft,elimGcdRight)==&gt;)&#10;\replacewith([or(or(leq(elimGcd,Z(0(#))),geq(add(add(add(add(neg(elimGcd),mul(mul(elimGcd,Z(neglit(1(#)))),elimGcdRightDiv)),elimGcdRight),mul(elimGcdLeftDiv,elimGcd)),mul(elimGcdLeft,Z(neglit(1(#))))),Z(0(#)))),leq(elimGcdLeftDiv,elimGcdRightDiv))]==&gt;[]) &#10;\heuristics(notHumanReadable, inEqSimp_pullOutGcd_antec, inEqSimp_pullOutGcd_leq, inEqSimp_pullOutGcd)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[698] elim_double_block, elim_double_block {&#10;\find(#allmodal ( (modal operator))\[{&#10;  {&#10;    #slist&#10;  }&#10;}\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{&#10;  #slist&#10;}\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[699] elim_double_block_2, elim_double_block_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    {&#10;      #slist&#10;    }&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[700] elim_double_block_3, elim_double_block_3 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    while (#e) #s&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  while (#e) #s&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[701] elim_double_block_4, elim_double_block_4 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    for (#loopInit; #guard; #forupdates) #s&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  for (#loopInit; #guard; #forupdates) #s&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[702] elim_double_block_5, elim_double_block_5 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    for (; #guard; #forupdates) #s&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  for (; #guard; #forupdates) #s&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[703] elim_double_block_6, elim_double_block_6 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    for (#loopInit; #guard; ) #s&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  for (#loopInit; #guard; ) #s&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[704] elim_double_block_7, elim_double_block_7 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    for (; #guard; ) #s&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  for (; #guard; ) #s&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[705] elim_double_block_8, elim_double_block_8 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    do #s&#10;    while (#e);&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  do #s&#10;  while (#e);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[706] elim_double_block_9, elim_double_block_9 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    {&#10;      #slist&#10;    }&#10;    {&#10;      #slist1&#10;    }&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist&#10;  }&#10;  {&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[707] elim_exists0, elim_exists0 {&#10;\find(exists{Gvar (variable)}(equals(Gvar,subGterm)))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(true) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[708] elim_exists1, elim_exists1 {&#10;\find(exists{Gvar (variable)}(equals(subGterm,Gvar)))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(true) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[709] elim_exists2, elim_exists2 {&#10;\find(exists{Gvar (variable)}(equals(Gvar,Hterm)))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(equals(G::instance(Hterm),TRUE)) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[710] elim_exists3, elim_exists3 {&#10;\find(exists{Gvar (variable)}(equals(Hterm,Gvar)))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(equals(G::instance(Hterm),TRUE)) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[711] elim_exists4, elim_exists4 {&#10;\find(exists{Gvar (variable)}(and(phi,equals(Gvar,subGterm))))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,phi)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[712] elim_exists5, elim_exists5 {&#10;\find(exists{Gvar (variable)}(and(phi,equals(subGterm,Gvar))))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,phi)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[713] elim_exists6, elim_exists6 {&#10;\find(exists{Gvar (variable)}(and(phi,equals(Gvar,Hterm))))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(and(subst{Gvar (variable)}(G::cast(Hterm),phi),equals(G::instance(Hterm),TRUE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[714] elim_exists7, elim_exists7 {&#10;\find(exists{Gvar (variable)}(and(phi,equals(Hterm,Gvar))))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(and(subst{Gvar (variable)}(G::cast(Hterm),phi),equals(G::instance(Hterm),TRUE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[715] elim_exists_leq, elim_exists_leq {&#10;\find(exists{INTVar (variable)}(and(leq(INTVar,intTermLeft),geq(INTVar,intTermRight))))&#10;\varcond(\notFreeIn(INTVar (variable), intTermRight (int term)), \notFreeIn(INTVar (variable), intTermLeft (int term)))&#10;\replacewith(leq(intTermRight,intTermLeft)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[716] elim_exists_nonSingleton0, elim_exists_nonSingleton0 {&#10;\find(exists{nonSingleVar (variable)}(not(equals(nonSingleVar,Hterm))))&#10;\varcond(\notFreeIn(nonSingleVar (variable), Hterm (H term)))&#10;\replacewith(true) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[717] elim_exists_nonSingleton1, elim_exists_nonSingleton1 {&#10;\find(exists{nonSingleVar (variable)}(not(equals(Hterm,nonSingleVar))))&#10;\varcond(\notFreeIn(nonSingleVar (variable), Hterm (H term)))&#10;\replacewith(true) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[718] elim_exists_nonSingleton2, elim_exists_nonSingleton2 {&#10;\find(exists{INTVar (variable)}(geq(INTVar,intTerm)))&#10;\varcond(\notFreeIn(INTVar (variable), intTerm (int term)))&#10;\replacewith(true) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[719] elim_exists_nonSingleton3, elim_exists_nonSingleton3 {&#10;\find(exists{INTVar (variable)}(leq(INTVar,intTerm)))&#10;\varcond(\notFreeIn(INTVar (variable), intTerm (int term)))&#10;\replacewith(true) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[720] elim_exists_nonSingleton4, elim_exists_nonSingleton4 {&#10;\find(exists{INTVar (variable)}(geq(intTerm,INTVar)))&#10;\varcond(\notFreeIn(INTVar (variable), intTerm (int term)))&#10;\replacewith(true) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[721] elim_exists_nonSingleton5, elim_exists_nonSingleton5 {&#10;\find(exists{INTVar (variable)}(leq(intTerm,INTVar)))&#10;\varcond(\notFreeIn(INTVar (variable), intTerm (int term)))&#10;\replacewith(true) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[722] elim_exists_sub_1, elim_exists_sub_1 {&#10;\find(exists{locVar (variable)}(and(subset(locVar,locSetTermRight),subset(locSetTermLeft,locVar))))&#10;\varcond(\notFreeIn(locVar (variable), locSetTermRight (LocSet term)), \notFreeIn(locVar (variable), locSetTermLeft (LocSet term)))&#10;\replacewith(subset(locSetTermLeft,locSetTermRight)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[723] elim_exists_sub_1_and_phi, elim_exists_sub_1_and_phi {&#10;\find(exists{locVar (variable)}(and(and(subset(locVar,locSetTerm),subset(locSetTerm,locVar)),phi)))&#10;\varcond(\notFreeIn(locVar (variable), locSetTerm (LocSet term)))&#10;\replacewith(exists{locVar (variable)}(and(equals(locVar,locSetTerm),phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[724] elim_exists_sub_1_or_phi, elim_exists_sub_1_or_phi {&#10;\find(exists{locVar (variable)}(or(and(subset(locVar,locSetTermRight),subset(locSetTermLeft,locVar)),phi)))&#10;\varcond(\notFreeIn(locVar (variable), locSetTermRight (LocSet term)), \notFreeIn(locVar (variable), locSetTermLeft (LocSet term)))&#10;\replacewith(or(subset(locSetTermLeft,locSetTermRight),exists{locVar (variable)}(phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[725] elim_forall0, elim_forall0 {&#10;\find(all{Gvar (variable)}(not(equals(Gvar,subGterm))))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(false) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[726] elim_forall1, elim_forall1 {&#10;\find(all{Gvar (variable)}(not(equals(subGterm,Gvar))))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(false) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[727] elim_forall10, elim_forall10 {&#10;\find(all{Gvar (variable)}(imp(equals(Gvar,Hterm),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(or(subst{Gvar (variable)}(G::cast(Hterm),phi),equals(G::instance(Hterm),FALSE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[728] elim_forall11, elim_forall11 {&#10;\find(all{Gvar (variable)}(imp(equals(Hterm,Gvar),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(or(subst{Gvar (variable)}(G::cast(Hterm),phi),equals(G::instance(Hterm),FALSE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[729] elim_forall12, elim_forall12 {&#10;\find(all{Gvar (variable)}(imp(and(psi,equals(Gvar,subGterm)),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,imp(psi,phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[730] elim_forall13, elim_forall13 {&#10;\find(all{Gvar (variable)}(imp(and(psi,equals(subGterm,Gvar)),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,imp(psi,phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[731] elim_forall14, elim_forall14 {&#10;\find(all{Gvar (variable)}(imp(and(psi,equals(Gvar,Hterm)),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(or(subst{Gvar (variable)}(G::cast(Hterm),imp(psi,phi)),equals(G::instance(Hterm),FALSE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[732] elim_forall15, elim_forall15 {&#10;\find(all{Gvar (variable)}(imp(and(psi,equals(Hterm,Gvar)),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(or(subst{Gvar (variable)}(G::cast(Hterm),imp(psi,phi)),equals(G::instance(Hterm),FALSE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[733] elim_forall16, elim_forall16 {&#10;\find(all{Gvar (variable)}(imp(and(equals(Gvar,subGterm),psi),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,imp(psi,phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[734] elim_forall17, elim_forall17 {&#10;\find(all{Gvar (variable)}(imp(and(equals(subGterm,Gvar),psi),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,imp(psi,phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[735] elim_forall18, elim_forall18 {&#10;\find(all{Gvar (variable)}(imp(and(equals(Gvar,Hterm),psi),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(or(subst{Gvar (variable)}(G::cast(Hterm),imp(psi,phi)),equals(G::instance(Hterm),FALSE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[736] elim_forall19, elim_forall19 {&#10;\find(all{Gvar (variable)}(imp(and(equals(Hterm,Gvar),psi),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(or(subst{Gvar (variable)}(G::cast(Hterm),imp(psi,phi)),equals(G::instance(Hterm),FALSE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[737] elim_forall2, elim_forall2 {&#10;\find(all{Gvar (variable)}(not(equals(Gvar,Hterm))))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(equals(G::instance(Hterm),FALSE)) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[738] elim_forall3, elim_forall3 {&#10;\find(all{Gvar (variable)}(not(equals(Hterm,Gvar))))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(equals(G::instance(Hterm),FALSE)) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[739] elim_forall4, elim_forall4 {&#10;\find(all{Gvar (variable)}(or(phi,not(equals(Gvar,subGterm)))))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,phi)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[740] elim_forall5, elim_forall5 {&#10;\find(all{Gvar (variable)}(or(phi,not(equals(subGterm,Gvar)))))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,phi)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[741] elim_forall6, elim_forall6 {&#10;\find(all{Gvar (variable)}(or(phi,not(equals(Gvar,Hterm)))))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(or(subst{Gvar (variable)}(G::cast(Hterm),phi),equals(G::instance(Hterm),FALSE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[742] elim_forall7, elim_forall7 {&#10;\find(all{Gvar (variable)}(or(phi,not(equals(Hterm,Gvar)))))&#10;\varcond(\notFreeIn(Gvar (variable), Hterm (H term)))&#10;\replacewith(or(subst{Gvar (variable)}(G::cast(Hterm),phi),equals(G::instance(Hterm),FALSE))) &#10;\heuristics(elimQuantifierWithCast, elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[743] elim_forall8, elim_forall8 {&#10;\find(all{Gvar (variable)}(imp(equals(Gvar,subGterm),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,phi)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[744] elim_forall9, elim_forall9 {&#10;\find(all{Gvar (variable)}(imp(equals(subGterm,Gvar),phi)))&#10;\varcond(\notFreeIn(Gvar (variable), subGterm (subG term)))&#10;\replacewith(subst{Gvar (variable)}(subGterm,phi)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[745] elim_forall_eqSet_imp_phi, elim_forall_eqSet_imp_phi {&#10;\find(all{locVar (variable)}(imp(and(subset(locVar,locSetTerm),subset(locSetTerm,locVar)),phi)))&#10;\varcond(\notFreeIn(locVar (variable), locSetTerm (LocSet term)))&#10;\replacewith(all{locVar (variable)}(imp(equals(locSetTerm,locVar),phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[746] elim_forall_leq, elim_forall_leq {&#10;\find(all{INTVar (variable)}(or(leq(INTVar,intTermLeft),geq(INTVar,intTermRight))))&#10;\varcond(\notFreeIn(INTVar (variable), intTermRight (int term)), \notFreeIn(INTVar (variable), intTermLeft (int term)))&#10;\replacewith(leq(intTermRight,add(intTermLeft,Z(1(#))))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[747] elim_forall_nonSingleton0, elim_forall_nonSingleton0 {&#10;\find(all{nonSingleVar (variable)}(equals(nonSingleVar,Hterm)))&#10;\varcond(\notFreeIn(nonSingleVar (variable), Hterm (H term)))&#10;\replacewith(false) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[748] elim_forall_nonSingleton1, elim_forall_nonSingleton1 {&#10;\find(all{nonSingleVar (variable)}(equals(Hterm,nonSingleVar)))&#10;\varcond(\notFreeIn(nonSingleVar (variable), Hterm (H term)))&#10;\replacewith(false) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[749] elim_forall_nonSingleton2, elim_forall_nonSingleton2 {&#10;\find(all{INTVar (variable)}(geq(INTVar,intTerm)))&#10;\varcond(\notFreeIn(INTVar (variable), intTerm (int term)))&#10;\replacewith(false) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[750] elim_forall_nonSingleton3, elim_forall_nonSingleton3 {&#10;\find(all{INTVar (variable)}(leq(INTVar,intTerm)))&#10;\varcond(\notFreeIn(INTVar (variable), intTerm (int term)))&#10;\replacewith(false) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[751] elim_forall_nonSingleton4, elim_forall_nonSingleton4 {&#10;\find(all{INTVar (variable)}(geq(intTerm,INTVar)))&#10;\varcond(\notFreeIn(INTVar (variable), intTerm (int term)))&#10;\replacewith(false) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[752] elim_forall_nonSingleton5, elim_forall_nonSingleton5 {&#10;\find(all{INTVar (variable)}(leq(intTerm,INTVar)))&#10;\varcond(\notFreeIn(INTVar (variable), intTerm (int term)))&#10;\replacewith(false) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[753] elim_forall_subOfAll, elim_forall_subOfAll {&#10;\find(all{locVar (variable)}(subset(locSetTerm,locVar)))&#10;\varcond(\notFreeIn(locVar (variable), locSetTerm (LocSet term)))&#10;\replacewith(equals(locSetTerm,empty)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[754] elim_forall_subOfAll_and_phi, elim_forall_subOfAll_and_phi {&#10;\find(all{locVar (variable)}(and(subset(locSetTerm,locVar),phi)))&#10;\varcond(\notFreeIn(locVar (variable), locSetTerm (LocSet term)))&#10;\replacewith(and(equals(locSetTerm,empty),all{locVar (variable)}(phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[755] elim_forall_superOfAll, elim_forall_superOfAll {&#10;\find(all{locVar (variable)}(subset(locVar,locSetTerm)))&#10;\varcond(\notFreeIn(locVar (variable), locSetTerm (LocSet term)))&#10;\replacewith(equals(locSetTerm,allLocs)) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[756] elim_forall_superOfAll_and_phi, elim_forall_superOfAll_and_phi {&#10;\find(all{locVar (variable)}(and(subset(locVar,locSetTerm),phi)))&#10;\varcond(\notFreeIn(locVar (variable), locSetTerm (LocSet term)))&#10;\replacewith(and(equals(locSetTerm,allLocs),all{locVar (variable)}(phi))) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[757] emptyEqualsSingleton, emptyEqualsSingleton {&#10;\find(equals(empty,singleton(o,f)))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[758] emptyModality, emptyModality {&#10;\find(#normal(post))&#10;\replacewith(post) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[759] emptyModalityBoxTransaction, emptyModalityBoxTransaction {&#10;\find(box_transaction(post))&#10;\replacewith(true) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[760] emptyModalityDiamondTransaction, emptyModalityDiamondTransaction {&#10;\find(diamond_transaction(post))&#10;\replacewith(false) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[761] emptyStatement, emptyStatement {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  ;&#10;... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[762] endsWith, endsWith {&#10;\find(clEndsWith(sourceStr,searchStr))&#10;\replacewith(if-then-else(gt(seqLen(searchStr),seqLen(sourceStr)),false,equals(seqSub(sourceStr,sub(seqLen(sourceStr),seqLen(searchStr)),seqLen(sourceStr)),searchStr))) &#10;\heuristics(defOpsStartsEndsWith)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[763] enhancedfor_iterable, enhancedfor_iterable {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  for (#ty #id : #e) #stm&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  enhancedfor-elim(for (#ty #id : #e) #stm)&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[764] eqClose, eqClose {&#10;\find(equals(s,s))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[765] eqSymm, eqSymm {&#10;\find(equals(commEqLeft,commEqRight))&#10;\replacewith(equals(commEqRight,commEqLeft)) &#10;\heuristics(order_terms)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[766] eqTermCut, eqTermCut {&#10;\find(t)&#10;\sameUpdateLevel\add [not(equals(t,s))]==&gt;[] ;&#10;\add [equals(t,s)]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[767] eq_add_iff1, eq_add_iff1 {&#10;\find(equals(add(mul(i0,i1),i2),add(mul(i3,i1),i4)))&#10;\replacewith(equals(add(mul(sub(i0,i3),i1),i2),i4)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[768] eq_add_iff2, eq_add_iff2 {&#10;\find(equals(add(mul(i0,i1),i2),add(mul(i3,i1),i4)))&#10;\replacewith(equals(i2,add(mul(sub(i3,i0),i1),i4))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[769] eq_and, eq_and {&#10;\find(and(phi,phi))&#10;\replacewith(phi) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[770] eq_and_2, eq_and_2 {&#10;\find(and(and(psi,phi),phi))&#10;\replacewith(and(psi,phi)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[771] eq_eq, eq_eq {&#10;\find(equiv(phi,phi))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[772] eq_imp, eq_imp {&#10;\find(imp(phi,phi))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[773] eq_or, eq_or {&#10;\find(or(phi,phi))&#10;\replacewith(phi) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[774] eq_or_2, eq_or_2 {&#10;\find(or(or(psi,phi),phi))&#10;\replacewith(or(psi,phi)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[775] eq_sides, eq_sides {&#10;\find(equals(i,j))&#10;\replacewith(equals(sub(i,j),Z(0(#)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[776] equalCharacters, equalCharacters {&#10;\find(equals(C(iz1),C(iz2)))&#10;\replacewith(equals(Z(iz1),Z(iz2))) &#10;\heuristics(stringsSimplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[777] equalRegEx, equalRegEx {&#10;\find(equals(rexp1,rexp2))&#10;\varcond(\notFreeIn(string (variable), rexp2 (RegEx term)), \notFreeIn(string (variable), rexp1 (RegEx term)))&#10;\replacewith(all{string (variable)}(equiv(match(rexp1,string),match(rexp2,string)))) &#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[778] equalUnique, equalUnique {&#10;\find(equals(f,f2))&#10;\varcond(\equalUnique (f (any term), f2 (any term), result (formula)), )&#10;\replacewith(result) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[779] equal_add, equal_add {&#10;\find(==&gt;equals(i0,i1))&#10;\varcond(\notFreeIn(j2 (variable), i1 (int term)), \notFreeIn(j2 (variable), i0 (int term)))&#10;\replacewith([]==&gt;[exists{j2 (variable)}(equals(add(i0,j2),add(i1,j2)))]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[780] equal_add_one, equal_add_one {&#10;\find(equals(i0,i1))&#10;\replacewith(equals(add(i0,Z(1(#))),add(i1,Z(1(#))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[781] equal_bprod1, equal_bprod1 {&#10;\find(==&gt;equals(bprod{uSub1 (variable)}(i0,i1,t1),bprod{uSub2 (variable)}(i0,i1,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)))&#10;\add []==&gt;[all{uSub1 (variable)}(imp(and(geq(uSub1,i0),lt(uSub1,i1)),equals(t1,subst{uSub2 (variable)}(uSub1,t2))))] &#10;\heuristics(c…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[782] equal_bprod2, equal_bprod2 {&#10;\assumes ([equals(bprod{uSub1 (variable)}(i0,i1,t1),i)]==&gt;[]) &#10;\find(==&gt;equals(bprod{uSub2 (variable)}(i0,i1,t2),i))&#10;\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)))&#10;\add []==&gt;[all{uSub1 (variable)}(imp(and(geq(uSub1,i0),lt(uSub1,i1)),equals(t1,subst{uSub2 (variable…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[783] equal_bprod3, equal_bprod3 {&#10;\assumes ([equals(bprod{uSub1 (variable)}(i0,i1,t1),i),equals(bprod{uSub2 (variable)}(i0,i1,t2),j)]==&gt;[]) &#10;\find(==&gt;equals(j,i))&#10;\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)))&#10;\add []==&gt;[all{uSub1 (variable)}(imp(and(geq(uSub1,i0),lt(uSub1,i1)),equals(t1,subst{uSu…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[784] equal_bprod5, equal_bprod5 {&#10;\find(==&gt;equals(bprod{uSub1 (variable)}(i0,i1,t1),bprod{uSub2 (variable)}(i2,i3,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i3 (int term)), \notFreeIn(uSub1 (variable), i3 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[785] equal_bprod_perm1, equal_bprod_perm1 {&#10;\find(==&gt;equals(bprod{uSub1 (variable)}(i0,i1,t1),bprod{uSub2 (variable)}(i2,i3,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i3 (int term)), \notFreeIn(uSub1 (variable), i3 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[786] equal_bprod_perm2, equal_bprod_perm2 {&#10;\assumes ([equals(bprod{uSub2 (variable)}(i2,i3,t2),t)]==&gt;[]) &#10;\find(==&gt;equals(bprod{uSub1 (variable)}(i0,i1,t1),t))&#10;\varcond(\notFreeIn(uSub2 (variable), i3 (int term)), \notFreeIn(uSub1 (variable), i3 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notF…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[787] equal_bsum1, equal_bsum1 {&#10;\find(==&gt;equals(bsum{uSub1 (variable)}(i0,i1,t1),bsum{uSub2 (variable)}(i0,i1,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)))&#10;\add []==&gt;[all{uSub1 (variable)}(imp(and(geq(uSub1,i0),lt(uSub1,i1)),equals(t1,subst{uSub2 (variable)}(uSub1,t2))))] &#10;\heuristics(comp…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[788] equal_bsum2, equal_bsum2 {&#10;\assumes ([equals(bsum{uSub1 (variable)}(i0,i1,t1),i)]==&gt;[]) &#10;\find(==&gt;equals(bsum{uSub2 (variable)}(i0,i1,t2),i))&#10;\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)))&#10;\add []==&gt;[all{uSub1 (variable)}(imp(and(geq(uSub1,i0),lt(uSub1,i1)),equals(t1,subst{uSub2 (variable)}(…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[789] equal_bsum3, equal_bsum3 {&#10;\assumes ([equals(bsum{uSub1 (variable)}(i0,i1,t1),i),equals(bsum{uSub2 (variable)}(i0,i1,t2),j)]==&gt;[]) &#10;\find(==&gt;equals(j,i))&#10;\varcond(\notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)), \notFreeIn(uSub2 (variable), t1 (int term)))&#10;\add []==&gt;[all{uSub1 (variable)}(imp(and(geq(uSub1,i0),lt(uSub1,i1)),equals(t1,subst{uSub2 …" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[790] equal_bsum5, equal_bsum5 {&#10;\find(==&gt;equals(bsum{uSub1 (variable)}(i0,i1,t1),bsum{uSub2 (variable)}(i2,i3,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i3 (int term)), \notFreeIn(uSub1 (variable), i3 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int term)),…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[791] equal_bsum_perm1, equal_bsum_perm1 {&#10;\find(==&gt;equals(bsum{uSub1 (variable)}(i0,i1,t1),bsum{uSub2 (variable)}(i2,i3,t2)))&#10;\varcond(\notFreeIn(uSub2 (variable), i3 (int term)), \notFreeIn(uSub1 (variable), i3 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), t2 (int te…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[792] equal_bsum_perm2, equal_bsum_perm2 {&#10;\assumes ([equals(bsum{uSub2 (variable)}(i2,i3,t2),t)]==&gt;[]) &#10;\find(==&gt;equals(bsum{uSub1 (variable)}(i0,i1,t1),t))&#10;\varcond(\notFreeIn(uSub2 (variable), i3 (int term)), \notFreeIn(uSub1 (variable), i3 (int term)), \notFreeIn(uSub2 (variable), i2 (int term)), \notFreeIn(uSub1 (variable), i2 (int term)), \notFreeIn(uSub2 (variable), i1 (int term)), \notFreeIn(uSub1 (variable), i1 (int term)), \notFreeIn(uSub2 (variable), i0 (int term)), \notFreeIn(uSub1 (variable), i0 (int term)), \notFree…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[793] equal_bsum_zero_cut, equal_bsum_zero_cut {&#10;\find(==&gt;equals(bsum{uSub1 (variable)}(i0,i1,t1),mul(bsum{uSub2 (variable)}(i2,i3,t2),t)))&#10;\add [equals(bsum{uSub1 (variable)}(i0,i1,t1),Z(0(#)))]==&gt;[] ;&#10;\add []==&gt;[equals(bsum{uSub1 (variable)}(i0,i1,t1),Z(0(#)))] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[794] equal_literals, equal_literals {&#10;\find(equals(Z(iz),Z(jz)))&#10;\replacewith(#eq(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[795] equalityToElementOf, equalityToElementOf {&#10;\find(equals(s,s2))&#10;\varcond(\notFreeIn(fv (variable), s2 (LocSet term)), \notFreeIn(fv (variable), s (LocSet term)), \notFreeIn(ov (variable), s2 (LocSet term)), \notFreeIn(ov (variable), s (LocSet term)))&#10;\replacewith(all{ov (variable)}(all{fv (variable)}(equiv(elementOf(ov,fv,s),elementOf(ov,fv,s2))))) &#10;\heuristics(semantics_blasting)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[796] equalityToElementOfRight, equalityToElementOfRight {&#10;\find(==&gt;equals(s,s2))&#10;\varcond(\notFreeIn(fv (variable), s2 (LocSet term)), \notFreeIn(fv (variable), s (LocSet term)), \notFreeIn(ov (variable), s2 (LocSet term)), \notFreeIn(ov (variable), s (LocSet term)))&#10;\replacewith([]==&gt;[all{ov (variable)}(all{fv (variable)}(equiv(elementOf(ov,fv,s),elementOf(ov,fv,s2))))]) &#10;\heuristics(setEqualityBlastingRight)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[797] equalityToSelect, equalityToSelect {&#10;\find(equals(h,h2))&#10;\varcond(\notFreeIn(fv (variable), h2 (Heap term)), \notFreeIn(fv (variable), h (Heap term)), \notFreeIn(ov (variable), h2 (Heap term)), \notFreeIn(ov (variable), h (Heap term)))&#10;\replacewith(all{ov (variable)}(all{fv (variable)}(equals(any::select(h,ov,fv),any::select(h2,ov,fv))))) &#10;\heuristics(semantics_blasting)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[798] equalityToSeqGetAndSeqLen, equalityToSeqGetAndSeqLen {&#10;\find(equals(left,right))&#10;\varcond(\notFreeIn(iv (variable), right (Seq term)), \notFreeIn(iv (variable), left (Seq term)))&#10;\replacewith(and(equals(seqLen(left),seqLen(right)),all{iv (variable)}(imp(and(leq(Z(0(#)),iv),lt(iv,seqLen(left))),equals(any::seqGet(left,iv),any::seqGet(right,iv)))))) &#10;\heuristics(defOpsSeqEquality)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[799] equalityToSeqGetAndSeqLenLeft, equalityToSeqGetAndSeqLenLeft {&#10;\find(equals(s,s2)==&gt;)&#10;\varcond(\notFreeIn(iv (variable), s2 (Seq term)), \notFreeIn(iv (variable), s (Seq term)))&#10;\add [and(equals(seqLen(s),seqLen(s2)),all{iv (variable)}(imp(and(leq(Z(0(#)),iv),lt(iv,seqLen(s))),equals(any::seqGet(s,iv),any::seqGet(s2,iv)))))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[800] equalityToSeqGetAndSeqLenRight, equalityToSeqGetAndSeqLenRight {&#10;\find(==&gt;equals(s,s2))&#10;\varcond(\notFreeIn(iv (variable), s2 (Seq term)), \notFreeIn(iv (variable), s (Seq term)))&#10;\replacewith([]==&gt;[and(equals(seqLen(s),seqLen(s2)),all{iv (variable)}(imp(and(leq(Z(0(#)),iv),lt(iv,seqLen(s))),equals(any::seqGet(s,iv),any::seqGet(s2,iv)))))]) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[801] equality_comparison_double, equality_comparison_double {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seDouble0 == #seDouble1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(eqDouble(#seDouble0,#seDouble1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[802] equality_comparison_new, equality_comparison_new {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 == #senf1;&#10;... }\] (post))&#10;\replacewith(if-then-else(not(equals(#senf0,#senf1)),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = false;&#10;... }\] (post),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;... }\] (post))) &#10;\heuristics(split_if, simplify_prog, obsolete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[803] equality_comparison_simple, equality_comparison_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 == #senf1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#senf0,#senf1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[804] equality_comparison_simple_float, equality_comparison_simple_float {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seFloat0 == #seFloat1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(eqFloat(#seFloat0,#seFloat1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[805] equivAllRight, equivAllRight {&#10;\find(==&gt;equiv(all{u (variable)}(b),all{e2 (variable)}(c)))&#10;\varcond(\notFreeIn(e2 (variable), b (formula)), \notFreeIn(u (variable), c (formula)))&#10;\add []==&gt;[all{u (variable)}(equiv(b,subst{e2 (variable)}(u,c)))] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[806] equiv_left, equiv_left {&#10;\find(equiv(b,c)==&gt;)&#10;\replacewith([]==&gt;[b,c]) ;&#10;\replacewith([b,c]==&gt;[]) &#10;\heuristics(beta)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[807] equiv_right, equiv_right {&#10;\find(==&gt;equiv(b,c))&#10;\replacewith([c]==&gt;[b]) ;&#10;\replacewith([b]==&gt;[c]) &#10;\heuristics(beta)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[808] eval_array_this_access, eval_array_this_access {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  this[#nse] = #se0;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0 = #nse;&#10;  this[#v0] = #se0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[809] eval_order_access1, eval_order_access1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #nv.#attribute = #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nv (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nv) #v0 = #nv;&#10;  #v0.#attribute = #e;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[810] eval_order_access2, eval_order_access2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = #nv.#attribute;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nv (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nv) #v0 = #nv;&#10;  #v = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[811] eval_order_access4, eval_order_access4 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v.#a = #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#v (program Variable))),  \not \static(#a (program Variable)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#v) #v0 = #v;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #v0.#a = #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[812] eval_order_access4_this, eval_order_access4_this {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v.#a = #nse;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))),  \not \static(#a (program Variable)), \isThisReference (#v (program Variable)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v1 = #nse;&#10;  #v.#a = #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[813] eval_order_array_access1, eval_order_array_access1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #nv[#e] = #e0;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nv (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nv) #v0 = #nv;&#10;  #v0[#e] = #e0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[814] eval_order_array_access2, eval_order_array_access2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v[#nse] = #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#ar1 (program Variable), \typeof(#v (program Variable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#v) #ar1 = #v;&#10;  #typeof(#nse) #v0 = #nse;&#10;  #ar1[#v0] = #e;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[815] eval_order_array_access3, eval_order_array_access3 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v[#se] = #nse;&#10;... }\] (post))&#10;\varcond(\new(#v2 (program Variable), \typeof(#se (program SimpleExpression))), \new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#v0 (program Variable), \typeof(#v (program Variable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#v) #v0 = #v;&#10;  #typeof(#se) #v2 = #se;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #v0[#v2] = #v1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_sub…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[816] eval_order_array_access4, eval_order_array_access4 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = #nv[#e];&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nv (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nv) #v0 = #nv;&#10;  #v = #v0[#e];&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[817] eval_order_array_access5, eval_order_array_access5 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = #v0[#nse];&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#nse (program NonSimpleExpression))), \new(#ar1 (program Variable), \typeof(#v0 (program Variable))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#v0) #ar1 = #v0;&#10;  #typeof(#nse) #v1 = #nse;&#10;  #v = #ar1[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[818] eval_order_array_access6, eval_order_array_access6 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = #nv.#length;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nv (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nv) #v0 = #nv;&#10;  #v = #v0.#length;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[819] eval_order_iterated_assignments_0_0, eval_order_iterated_assignments_0_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] = #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = #e1;&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[820] eval_order_iterated_assignments_0_1, eval_order_iterated_assignments_0_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute = #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = #e;&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[821] eval_order_iterated_assignments_10_0, eval_order_iterated_assignments_10_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] |= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] | #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[822] eval_order_iterated_assignments_10_1, eval_order_iterated_assignments_10_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute |= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute |&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[823] eval_order_iterated_assignments_11_0, eval_order_iterated_assignments_11_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] ^= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] ^ #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[824] eval_order_iterated_assignments_11_1, eval_order_iterated_assignments_11_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute ^= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute ^&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[825] eval_order_iterated_assignments_1_0, eval_order_iterated_assignments_1_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] *= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] * #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[826] eval_order_iterated_assignments_1_1, eval_order_iterated_assignments_1_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute *= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute *&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[827] eval_order_iterated_assignments_2_0, eval_order_iterated_assignments_2_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] /= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] / #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[828] eval_order_iterated_assignments_2_1, eval_order_iterated_assignments_2_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute /= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute /&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[829] eval_order_iterated_assignments_3_0, eval_order_iterated_assignments_3_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] %= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] % #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[830] eval_order_iterated_assignments_3_1, eval_order_iterated_assignments_3_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute %= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute %&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[831] eval_order_iterated_assignments_4_0, eval_order_iterated_assignments_4_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] += #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] + #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[832] eval_order_iterated_assignments_4_1, eval_order_iterated_assignments_4_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute += #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute +&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[833] eval_order_iterated_assignments_5_0, eval_order_iterated_assignments_5_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] -= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] - #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[834] eval_order_iterated_assignments_5_1, eval_order_iterated_assignments_5_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute -= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute -&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[835] eval_order_iterated_assignments_6_0, eval_order_iterated_assignments_6_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] &lt;&lt;= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] &lt;&lt; #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[836] eval_order_iterated_assignments_6_1, eval_order_iterated_assignments_6_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute &lt;&lt;= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute &lt;&lt;&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[837] eval_order_iterated_assignments_7_0, eval_order_iterated_assignments_7_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] &gt;&gt;= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] &gt;&gt; #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[838] eval_order_iterated_assignments_7_1, eval_order_iterated_assignments_7_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute &gt;&gt;= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute &gt;&gt;&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[839] eval_order_iterated_assignments_8_0, eval_order_iterated_assignments_8_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] &gt;&gt;&gt;= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] &gt;&gt;&gt; #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[840] eval_order_iterated_assignments_8_1, eval_order_iterated_assignments_8_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute &gt;&gt;&gt;= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute &gt;&gt;&gt;&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[841] eval_order_iterated_assignments_9_0, eval_order_iterated_assignments_9_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0[#e] &amp;= #e1;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#e (program Expression))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#e) #v1 = #e;&#10;  #v0[#v1] = (#typeof(#e0[#e])) (#v0[#v1] &amp; #e1);&#10;  #lhs0 = #v0[#v1];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[842] eval_order_iterated_assignments_9_1, eval_order_iterated_assignments_9_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e0.#attribute &amp;= #e;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v0.#attribute = (#typeof(#attribute)) (#v0.#attribute &amp;&#10;                                            #e);&#10;  #lhs0 = #v0.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[843] exLeft, exLeft {&#10;\find(exists{u (variable)}(b)==&gt;)&#10;\replacewith([subst{u (variable)}(sk,b)]==&gt;[]) &#10;\heuristics(delta)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[844] exRight, exRight {&#10;\find(==&gt;exists{u (variable)}(b))&#10;\add []==&gt;[subst{u (variable)}(t,b)] &#10;\heuristics(gamma)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[845] exRightHide, exRightHide {&#10;\find(==&gt;exists{u (variable)}(b))&#10;\addrules [insert_hidden {&#10;\add []==&gt;[exists{u (variable)}(b)] &#10;Choices: true}] \replacewith([]==&gt;[subst{u (variable)}(t,b)]) &#10;\heuristics(gamma_destructive)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[846] ex_bool, ex_bool {&#10;\find(exists{x (variable)}(c))&#10;\replacewith(or(subst{x (variable)}(FALSE,c),subst{x (variable)}(TRUE,c))) &#10;\heuristics(boolean_cases)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[847] ex_pull_out0, ex_pull_out0 {&#10;\find(and(exists{u (variable)}(b),c))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(exists{u (variable)}(and(b,c))) &#10;\heuristics(pullOutQuantifierEx)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[848] ex_pull_out1, ex_pull_out1 {&#10;\find(and(c,exists{u (variable)}(b)))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(exists{u (variable)}(and(c,b))) &#10;\heuristics(pullOutQuantifierEx)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[849] ex_pull_out2, ex_pull_out2 {&#10;\find(or(exists{u (variable)}(b),c))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(exists{u (variable)}(or(b,c))) &#10;\heuristics(pullOutQuantifierEx)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[850] ex_pull_out3, ex_pull_out3 {&#10;\find(or(c,exists{u (variable)}(b)))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(exists{u (variable)}(or(c,b))) &#10;\heuristics(pullOutQuantifierEx)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[851] ex_pull_out4, ex_pull_out4 {&#10;\find(or(exists{u (variable)}(b),exists{u2 (variable)}(c)))&#10;\varcond(\notFreeIn(u (variable), c (formula)))&#10;\replacewith(exists{u (variable)}(or(b,subst{u2 (variable)}(u,c)))) &#10;\heuristics(pullOutQuantifierUnifying, pullOutQuantifierEx)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[852] ex_unused, ex_unused {&#10;\find(exists{u (variable)}(b))&#10;\varcond(\notFreeIn(u (variable), b (formula)))&#10;\replacewith(b) &#10;\heuristics(elimQuantifier)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[853] exact_instance_definition_boolean, exact_instance_definition_boolean {&#10;\find(equals(boolean::exactInstance(bool),TRUE))&#10;\varcond(\notFreeIn(bv (variable), bool (boolean term)))&#10;\replacewith(exists{bv (variable)}(equals(bool,bv))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[854] exact_instance_definition_int, exact_instance_definition_int {&#10;\find(equals(int::exactInstance(idx0),TRUE))&#10;\varcond(\notFreeIn(iv (variable), idx0 (int term)))&#10;\replacewith(exists{iv (variable)}(equals(idx0,iv))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[855] exact_instance_definition_null, exact_instance_definition_null {&#10;\find(equals(Null::exactInstance(obj),TRUE))&#10;\varcond(\notFreeIn(bv (variable), bool (boolean term)))&#10;\replacewith(equals(obj,null)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[856] exact_instance_for_interfaces_or_abstract_classes, exact_instance_for_interfaces_or_abstract_classes {&#10;\find(G::exactInstance(obj))&#10;\varcond(\isAbstractOrInterface (G), )&#10;\replacewith(FALSE) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[857] exact_instance_known_dynamic_type, exact_instance_known_dynamic_type {&#10;\assumes ([equals(G::exactInstance(a),TRUE)]==&gt;[]) &#10;\find(H::exactInstance(a))&#10;\sameUpdateLevel\varcond(\not\same(G, H), )&#10;\replacewith(FALSE) &#10;\heuristics(evaluate_instanceof, simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[858] execBreak, execBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Break) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[859] execBreakEliminateBreakLabel, execBreakEliminateBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Break #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[860] execBreakEliminateBreakLabelWildcard, execBreakEliminateBreakLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Break *) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[861] execBreakEliminateContinue, execBreakEliminateContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[862] execBreakEliminateContinueLabel, execBreakEliminateContinueLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Continue #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[863] execBreakEliminateContinueLabelWildcard, execBreakEliminateContinueLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[864] execBreakEliminateExcCcatch, execBreakEliminateExcCcatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (#t #v0) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[865] execBreakEliminateReturn, execBreakEliminateReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Return) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[866] execBreakEliminateReturnVal, execBreakEliminateReturnVal {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Return #t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[867] execBreakLabelEliminateBreak, execBreakLabelEliminateBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Break) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[868] execBreakLabelEliminateBreakLabelNoMatch, execBreakLabelEliminateBreakLabelNoMatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Break #lb1) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\varcond(\different (#lb (program Label), #lb1 (program Label)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[869] execBreakLabelEliminateContinue, execBreakLabelEliminateContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[870] execBreakLabelEliminateContinueLabel, execBreakLabelEliminateContinueLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Continue #lb1) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[871] execBreakLabelEliminateContinueLabelWildcard, execBreakLabelEliminateContinueLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[872] execBreakLabelEliminateExcCcatch, execBreakLabelEliminateExcCcatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (#t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[873] execBreakLabelEliminateReturn, execBreakLabelEliminateReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Return) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[874] execBreakLabelEliminateReturnVal, execBreakLabelEliminateReturnVal {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Return #t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[875] execBreakLabelMatch, execBreakLabelMatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Break #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[876] execBreakLabelWildcard, execBreakLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    break;&#10;    #slist&#10;  } ccatch (\Break *) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[877] execCatchThrow, execCatchThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (#t #v0) {&#10;    #slist1&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (#se == null) {&#10;    exec {&#10;      throw new java.lang.NullPointerException();&#10;    } ccatch (#t #v0) {&#10;      #slist1&#10;    }&#10;  } else if (#se instanceof #t) {&#10;    #t #v0;&#10;    #v0 = (#t) #se;&#10;    #slist1&#10;  } else {&#10;    throw #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[878] execContinue, execContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[879] execContinueEliminateBreak, execContinueEliminateBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Break) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[880] execContinueEliminateBreakLabel, execContinueEliminateBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Break #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[881] execContinueEliminateBreakLabelWildcard, execContinueEliminateBreakLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Break *) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[882] execContinueEliminateExcCcatch, execContinueEliminateExcCcatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (#t #v0) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    continue;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[883] execContinueEliminateReturn, execContinueEliminateReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Return) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[884] execContinueEliminateReturnVal, execContinueEliminateReturnVal {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Return #t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[885] execContinueLabelEliminateBreak, execContinueLabelEliminateBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Break) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[886] execContinueLabelEliminateBreakLabel, execContinueLabelEliminateBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Break #lb1) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[887] execContinueLabelEliminateBreakLabelWildcard, execContinueLabelEliminateBreakLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Break *) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[888] execContinueLabelEliminateContinue, execContinueLabelEliminateContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[889] execContinueLabelEliminateContinueLabelNoMatch, execContinueLabelEliminateContinueLabelNoMatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Continue #lb1) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\varcond(\different (#lb (program Label), #lb1 (program Label)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[890] execContinueLabelEliminateExcCcatch, execContinueLabelEliminateExcCcatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (#t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    continue;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[891] execContinueLabelEliminateReturn, execContinueLabelEliminateReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Return) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[892] execContinueLabelEliminateReturnVal, execContinueLabelEliminateReturnVal {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Return #t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[893] execContinueLabelMatch, execContinueLabelMatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Continue #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[894] execContinueLabelWildcard, execContinueLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    continue;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[895] execEmpty, execEmpty {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {}#cs&#10;... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[896] execMultipleCatchThrow, execMultipleCatchThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (#t #v0) {&#10;    #slist1&#10;  } ccatch (#t2 #v1) {&#10;    #slist3&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (#se == null) {&#10;    exec {&#10;      throw new java.lang.NullPointerException();&#10;    } ccatch (#t #v0) {&#10;      #slist1&#10;    } ccatch (#t2 #v1) {&#10;      #slist3&#10;    }#cs&#10;  } else if (#se instanceof #t) {&#10;    #t #v0;&#10;    #v0 = (#t) #se;&#10;    #slist1&#10;  } else {&#10;    exec {&#10;…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[897] execNoCcatch, execNoCcatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[898] execReturn, execReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (\Return) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[899] execReturnEliminateBreak, execReturnEliminateBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (\Break) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[900] execReturnEliminateBreakLabel, execReturnEliminateBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (\Break #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[901] execReturnEliminateBreakLabelWildcard, execReturnEliminateBreakLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (\Break *) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[902] execReturnEliminateContinue, execReturnEliminateContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[903] execReturnEliminateContinueLabel, execReturnEliminateContinueLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (\Continue #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[904] execReturnEliminateContinueLabelWildcard, execReturnEliminateContinueLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[905] execReturnEliminateExcCcatch, execReturnEliminateExcCcatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (#t #v0) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.007"/>
  <testcase name="[906] execReturnEliminateReturnVal, execReturnEliminateReturnVal {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return;&#10;    #slist&#10;  } ccatch (\Return #t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[907] execReturnVal, execReturnVal {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Return #t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\varcond(\sub(\typeof(#se (program SimpleExpression)), \typeof(#v (program Variable))), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #t #v;&#10;    #v = (#t) #se;&#10;    #slist1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[908] execReturnValEliminateBreak, execReturnValEliminateBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Break) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[909] execReturnValEliminateBreakLabel, execReturnValEliminateBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Break #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[910] execReturnValEliminateBreakLabelWildcard, execReturnValEliminateBreakLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Break *) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[911] execReturnValEliminateContinue, execReturnValEliminateContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[912] execReturnValEliminateContinueLabel, execReturnValEliminateContinueLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Continue #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[913] execReturnValEliminateContinueLabelWildcard, execReturnValEliminateContinueLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[914] execReturnValEliminateExcCcatch, execReturnValEliminateExcCcatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (#t #v0) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    return #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[915] execReturnValEliminateReturn, execReturnValEliminateReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Return) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[916] execReturnValNonMatchingType, execReturnValNonMatchingType {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  } ccatch (\Return #t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\varcond(\not\sub(\typeof(#se (program SimpleExpression)), \typeof(#v (program Variable))), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    return #se;&#10;    #slist&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[917] execThrowEliminateBreak, execThrowEliminateBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (\Break) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[918] execThrowEliminateBreakLabel, execThrowEliminateBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (\Break #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[919] execThrowEliminateBreakLabelWildcard, execThrowEliminateBreakLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (\Break *) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[920] execThrowEliminateContinue, execThrowEliminateContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[921] execThrowEliminateContinueLabel, execThrowEliminateContinueLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (\Continue #lb) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[922] execThrowEliminateContinueLabelWildcard, execThrowEliminateContinueLabelWildcard {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (\Continue) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[923] execThrowEliminateReturn, execThrowEliminateReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (\Return) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[924] execThrowEliminateReturnVal, execThrowEliminateReturnVal {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;    #slist&#10;  } ccatch (\Return #t #v) {&#10;    #slist1&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  exec {&#10;    throw #se;&#10;  }#cs&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[925] expIsInfinite, expIsInfinite {&#10;\find(expDouble(arg))&#10;\add [imp(and(doubleIsInfinite(arg),gtDouble(arg,DFP(0(#)))),and(doubleIsInfinite(expDouble(arg)),gtDouble(expDouble(arg),DFP(0(#)))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[926] expIsNaN, expIsNaN {&#10;\find(expDouble(arg))&#10;\add [imp(doubleIsNaN(arg),doubleIsNaN(expDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[927] expIsZero, expIsZero {&#10;\find(expDouble(arg))&#10;\add [imp(and(doubleIsInfinite(arg),ltDouble(arg,DFP(0(#)))),equals(expDouble(arg),DFP(0(#))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[928] expandInRangeByte, expandInRangeByte {&#10;\find(inRangeByte(i))&#10;\replacewith(and(leq(i,byte_MAX),leq(byte_MIN,i))) &#10;\heuristics(delayedExpansion, defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[929] expandInRangeChar, expandInRangeChar {&#10;\find(inRangeChar(i))&#10;\replacewith(and(leq(i,char_MAX),leq(char_MIN,i))) &#10;\heuristics(delayedExpansion, defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[930] expandInRangeInt, expandInRangeInt {&#10;\find(inRangeInt(i))&#10;\replacewith(and(leq(i,int_MAX),leq(int_MIN,i))) &#10;\heuristics(delayedExpansion, defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[931] expandInRangeLong, expandInRangeLong {&#10;\find(inRangeLong(i))&#10;\replacewith(and(leq(i,long_MAX),leq(long_MIN,i))) &#10;\heuristics(delayedExpansion, defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[932] expandInRangeShort, expandInRangeShort {&#10;\find(inRangeShort(i))&#10;\replacewith(and(leq(i,short_MAX),leq(short_MIN,i))) &#10;\heuristics(delayedExpansion, defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[933] expand_addJint, expand_addJint {&#10;\find(addJint(i,i1))&#10;\replacewith(moduloInt(add(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[934] expand_addJlong, expand_addJlong {&#10;\find(addJlong(i,i1))&#10;\replacewith(moduloLong(add(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[935] expand_divJint, expand_divJint {&#10;\find(divJint(i,i1))&#10;\replacewith(moduloInt(jdiv(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[936] expand_divJlong, expand_divJlong {&#10;\find(divJlong(i,i1))&#10;\replacewith(moduloLong(jdiv(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[937] expandInByte, expandInByte {&#10;\find(inByte(i))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[938] expandInChar, expandInChar {&#10;\find(inChar(i))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[939] expandInInt, expandInInt {&#10;\find(inInt(i))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[940] expandInLong, expandInLong {&#10;\find(inLong(i))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[941] expandInShort, expandInShort {&#10;\find(inShort(i))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[942] expand_modJint, expand_modJint {&#10;\find(modJint(i,i1))&#10;\replacewith(moduloInt(jmod(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[943] expand_modJlong, expand_modJlong {&#10;\find(modJlong(i,i1))&#10;\replacewith(moduloLong(jmod(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[944] expand_moduloByte, expand_moduloByte {&#10;\find(moduloByte(i))&#10;\replacewith(add(byte_MIN,mod(add(byte_HALFRANGE,i),byte_RANGE))) &#10;\heuristics(delayedExpansion, defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[945] expand_moduloChar, expand_moduloChar {&#10;\find(moduloChar(i))&#10;\replacewith(mod(i,add(char_MAX,Z(1(#))))) &#10;\heuristics(delayedExpansion, defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[946] expand_moduloInteger, expand_moduloInteger {&#10;\find(moduloInt(i))&#10;\replacewith(add(int_MIN,mod(add(int_HALFRANGE,i),int_RANGE))) &#10;\heuristics(delayedExpansion, defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[947] expand_moduloLong, expand_moduloLong {&#10;\find(moduloLong(i))&#10;\replacewith(add(long_MIN,mod(add(long_HALFRANGE,i),long_RANGE))) &#10;\heuristics(delayedExpansion, defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[948] expand_moduloShort, expand_moduloShort {&#10;\find(moduloShort(i))&#10;\replacewith(add(short_MIN,mod(add(short_HALFRANGE,i),short_RANGE))) &#10;\heuristics(delayedExpansion, defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[949] expand_mulJint, expand_mulJint {&#10;\find(mulJint(i,i1))&#10;\replacewith(moduloInt(mul(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[950] expand_mulJlong, expand_mulJlong {&#10;\find(mulJlong(i,i1))&#10;\replacewith(moduloLong(mul(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[951] expand_subJint, expand_subJint {&#10;\find(subJint(i,i1))&#10;\replacewith(moduloInt(sub(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[952] expand_subJlong, expand_subJlong {&#10;\find(subJlong(i,i1))&#10;\replacewith(moduloLong(sub(i,i1))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[953] expand_unaryMinusJint, expand_unaryMinusJint {&#10;\find(unaryMinusJint(i))&#10;\replacewith(moduloInt(neg(i))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[954] expand_unaryMinusJlong, expand_unaryMinusJlong {&#10;\find(unaryMinusJlong(i))&#10;\replacewith(moduloLong(neg(i))) &#10;\heuristics(defOps_expandJNumericOp)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[955] false_right, false_right {&#10;\find(==&gt;false)&#10;\replacewith([]==&gt;[]) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[956] false_to_not_true, false_to_not_true {&#10;\find(equals(bo,FALSE))&#10;\replacewith(not(equals(bo,TRUE))) &#10;\heuristics(concrete, simplify_boolean)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[957] finishJavaCardTransactionBox, finishJavaCardTransactionBox {&#10;\find(==&gt;box_transaction\[{ ..&#10;  #finishJavaCardTransaction;&#10;... }\] (post))&#10;\replacewith([]==&gt;[box(post)]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[958] finishJavaCardTransactionDiamond, finishJavaCardTransactionDiamond {&#10;\find(==&gt;diamond_transaction\[{ ..&#10;  #finishJavaCardTransaction;&#10;... }\] (post))&#10;\replacewith([]==&gt;[diamond(post)]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[959] firstOfPair, firstOfPair {&#10;\find(first(pair(t,t1)))&#10;\replacewith(t) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[960] forInitUnfold, forInitUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  for (#loopInit; #guard; #forupdates) #s&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    forInitUnfoldTransformer(#loopInit)&#10;    for (; #guard; #forupdates) #s&#10;  }&#10;... }\] (post)) &#10;\heuristics(loop_expand)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[961] for_to_while, for_to_while {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #forloop&#10;... }\] (post))&#10;\varcond(\newLabel (#innerLabel (program Label)), \newLabel (#outerLabel (program Label)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #for-to-while(#forloop)&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[962] geq_add, geq_add {&#10;\find(==&gt;geq(i0,i1))&#10;\varcond(\notFreeIn(j2 (variable), i1 (int term)), \notFreeIn(j2 (variable), i0 (int term)))&#10;\replacewith([]==&gt;[exists{j2 (variable)}(geq(add(i0,j2),add(i1,j2)))]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[963] geq_add_one, geq_add_one {&#10;\find(geq(i0,i1))&#10;\replacewith(geq(add(i0,Z(1(#))),add(i1,Z(1(#))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[964] geq_diff_1, geq_diff_1 {&#10;\find(geq(add(i0,Z(1(#))),i0))&#10;\replacewith(true) &#10;\heuristics(int_arithmetic)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[965] geq_to_leq, geq_to_leq {&#10;\find(geq(i,i0))&#10;\replacewith(leq(i0,i)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[966] geq_to_lt, geq_to_lt {&#10;\find(geq(i,j))&#10;\replacewith(not(lt(i,j))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[967] geq_to_lt_alt, geq_to_lt_alt {&#10;\find(geq(i,j))&#10;\replacewith(or(gt(i,j),equals(i,j))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[968] getAnyOfArray2seq, getAnyOfArray2seq {&#10;\find(any::seqGet(array2seq(h,a),idx))&#10;\add []==&gt;[and(leq(Z(0(#)),idx),lt(idx,length(a)))] ;&#10;\replacewith(any::select(h,a,arr(idx))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[969] getJavaCardTransient, getJavaCardTransient {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #lhs&#10;  =&#10;  #jcsystemType.#getTransient(#se)@#jcsystemType;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#se,null))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#lhs (program LeftHandSide))(int::select(heap,#se,java.lang.Object::&lt;transient&gt;)),#allmodal(post))]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[970] getOfArray2seq, getOfArray2seq {&#10;\find(alpha::seqGet(array2seq(h,a),idx))&#10;\add []==&gt;[and(leq(Z(0(#)),idx),lt(idx,length(a)))] ;&#10;\replacewith(alpha::select(h,a,arr(idx))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[971] getOfMapEmpty, getOfMapEmpty {&#10;\find(mapGet(mapEmpty,x))&#10;\sameUpdateLevel\replacewith(mapUndef) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[972] getOfMapForeach, getOfMapForeach {&#10;\find(mapGet(mapForeach{v (variable)}(b,y),x))&#10;\sameUpdateLevel\replacewith(if-then-else(inDomain(mapForeach{v (variable)}(b,y),x),subst{v (variable)}(alpha::cast(x),y),mapUndef)) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[973] getOfMapOverride, getOfMapOverride {&#10;\find(mapGet(mapOverride(m0,m1),x))&#10;\sameUpdateLevel\replacewith(if-then-else(inDomain(m1,x),mapGet(m1,x),mapGet(m0,x))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[974] getOfMapRemove, getOfMapRemove {&#10;\find(mapGet(mapRemove(m,key),x))&#10;\sameUpdateLevel\replacewith(if-then-else(equals(x,key),mapUndef,mapGet(m,x))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[975] getOfMapSingleton, getOfMapSingleton {&#10;\find(mapGet(mapSingleton(x,y),z))&#10;\sameUpdateLevel\replacewith(if-then-else(equals(x,z),y,mapUndef)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[976] getOfMapUpdate, getOfMapUpdate {&#10;\find(mapGet(mapUpdate(m,key,value),x))&#10;\sameUpdateLevel\replacewith(if-then-else(equals(x,key),value,mapGet(m,x))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[977] getOfSeq2Map, getOfSeq2Map {&#10;\find(mapGet(seq2map(s),x))&#10;\sameUpdateLevel\replacewith(if-then-else(and(and(equals(int::instance(x),TRUE),leq(Z(0(#)),int::cast(x))),lt(int::cast(x),seqLen(s))),any::seqGet(s,int::cast(x)),mapUndef)) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[978] getOfSeqConcat, getOfSeqConcat {&#10;\find(alpha::seqGet(seqConcat(seq,seq2),idx))&#10;\replacewith(if-then-else(lt(idx,seqLen(seq)),alpha::seqGet(seq,idx),alpha::seqGet(seq2,sub(idx,seqLen(seq))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[979] getOfSeqConcatEQ, getOfSeqConcatEQ {&#10;\assumes ([equals(seqConcat(seq,seq2),EQ)]==&gt;[]) &#10;\find(alpha::seqGet(EQ,idx))&#10;\sameUpdateLevel\replacewith(if-then-else(lt(idx,seqLen(seq)),alpha::seqGet(seq,idx),alpha::seqGet(seq2,sub(idx,seqLen(seq))))) &#10;\heuristics(simplify_enlarging, no_self_application)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[980] getOfSeqDef, getOfSeqDef {&#10;\find(alpha::seqGet(seqDef{uSub (variable)}(from,to,t),idx))&#10;\varcond(\notFreeIn(uSub (variable), to (int term)), \notFreeIn(uSub (variable), from (int term)))&#10;\replacewith(if-then-else(and(leq(Z(0(#)),idx),lt(idx,sub(to,from))),alpha::cast(subst{uSub (variable)}(add(idx,from),t)),alpha::cast(seqGetOutside))) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[981] getOfSeqDefEQ, getOfSeqDefEQ {&#10;\assumes ([equals(seqDef{uSub (variable)}(from,to,t),EQ)]==&gt;[]) &#10;\find(alpha::seqGet(EQ,idx))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), to (int term)), \notFreeIn(uSub (variable), from (int term)))&#10;\replacewith(if-then-else(and(leq(Z(0(#)),idx),lt(idx,sub(to,from))),alpha::cast(subst{uSub (variable)}(add(idx,from),t)),alpha::cast(seqGetOutside))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[982] getOfSeqReverse, getOfSeqReverse {&#10;\find(alpha::seqGet(seqReverse(seq),idx))&#10;\replacewith(alpha::seqGet(seq,sub(sub(seqLen(seq),Z(1(#))),idx))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[983] getOfSeqReverseEQ, getOfSeqReverseEQ {&#10;\assumes ([equals(seqReverse(seq),EQ)]==&gt;[]) &#10;\find(alpha::seqGet(EQ,idx))&#10;\sameUpdateLevel\replacewith(alpha::seqGet(seq,sub(sub(seqLen(seq),Z(1(#))),idx))) &#10;\heuristics(simplify_enlarging, no_self_application)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[984] getOfSeqSingleton, getOfSeqSingleton {&#10;\find(alpha::seqGet(seqSingleton(x),idx))&#10;\replacewith(if-then-else(equals(idx,Z(0(#))),alpha::cast(x),alpha::cast(seqGetOutside))) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[985] getOfSeqSingletonConcrete, getOfSeqSingletonConcrete {&#10;\find(alpha::seqGet(seqSingleton(x),Z(0(#))))&#10;\replacewith(alpha::cast(x)) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[986] getOfSeqSingletonEQ, getOfSeqSingletonEQ {&#10;\assumes ([equals(seqSingleton(x),EQ)]==&gt;[]) &#10;\find(alpha::seqGet(EQ,idx))&#10;\sameUpdateLevel\replacewith(if-then-else(equals(idx,Z(0(#))),alpha::cast(x),alpha::cast(seqGetOutside))) &#10;\heuristics(simplify_enlarging, no_self_application)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[987] getOfSeqSub, getOfSeqSub {&#10;\find(alpha::seqGet(seqSub(seq,from,to),idx))&#10;\replacewith(if-then-else(and(leq(Z(0(#)),idx),lt(idx,sub(to,from))),alpha::seqGet(seq,add(idx,from)),alpha::cast(seqGetOutside))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[988] getOfSeqSubEQ, getOfSeqSubEQ {&#10;\assumes ([equals(seqSub(seq,from,to),EQ)]==&gt;[]) &#10;\find(alpha::seqGet(EQ,idx))&#10;\sameUpdateLevel\replacewith(if-then-else(and(leq(Z(0(#)),idx),lt(idx,sub(to,from))),alpha::seqGet(seq,add(idx,from)),alpha::cast(seqGetOutside))) &#10;\heuristics(simplify_enlarging, no_self_application)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[989] greater, greater {&#10;\find(gt(i,i0))&#10;\replacewith(lt(i0,i)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[990] greater_add, greater_add {&#10;\find(==&gt;gt(i0,i1))&#10;\varcond(\notFreeIn(j2 (variable), i1 (int term)), \notFreeIn(j2 (variable), i0 (int term)))&#10;\replacewith([]==&gt;[exists{j2 (variable)}(gt(add(i0,j2),add(i1,j2)))]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[991] greater_add_one, greater_add_one {&#10;\find(gt(i0,i1))&#10;\replacewith(gt(add(i0,Z(1(#))),add(i1,Z(1(#))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[992] greater_equal_than_comparison_new, greater_equal_than_comparison_new {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 &gt;= #senf1;&#10;... }\] (post))&#10;\replacewith(if-then-else(geq(#senf0,#senf1),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;... }\] (post),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = false;&#10;... }\] (post))) &#10;\heuristics(split_if, simplify_prog, obsolete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[993] greater_equal_than_comparison_simple, greater_equal_than_comparison_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 &gt;= #senf1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(geq(#senf0,#senf1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[994] greater_equal_than_comparison_simple_double, greater_equal_than_comparison_simple_double {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seDouble0 &gt;= #seDouble1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(geqDouble(#seDouble0,#seDouble1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[995] greater_equal_than_comparison_simple_float, greater_equal_than_comparison_simple_float {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seFloat0 &gt;= #seFloat1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(geqFloat(#seFloat0,#seFloat1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[996] greater_literals, greater_literals {&#10;\find(gt(Z(iz),Z(jz)))&#10;\replacewith(#greater(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[997] greater_than_comparison_new, greater_than_comparison_new {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 &gt; #senf1;&#10;... }\] (post))&#10;\replacewith(if-then-else(gt(#senf0,#senf1),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;... }\] (post),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = false;&#10;... }\] (post))) &#10;\heuristics(split_if, simplify_prog, obsolete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[998] greater_than_comparison_simple, greater_than_comparison_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 &gt; #senf1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(gt(#senf0,#senf1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[999] greater_than_comparison_simple_double, greater_than_comparison_simple_double {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seDouble0 &gt; #seDouble1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(gtDouble(#seDouble0,#seDouble1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1000] greater_than_comparison_simple_float, greater_than_comparison_simple_float {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seFloat0 &gt; #seFloat1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(gtFloat(#seFloat0,#seFloat1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1001] gt_diff_1, gt_diff_1 {&#10;\find(gt(add(i0,Z(1(#))),i0))&#10;\replacewith(true) &#10;\heuristics(int_arithmetic)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1002] gt_to_lt, gt_to_lt {&#10;\find(gt(i,i0))&#10;\replacewith(lt(i0,i)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1003] hashCodeBase, hashCodeBase {&#10;\find(clHashCode(seqEmpty))&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_literals)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1004] hideAuxiliaryEq, hideAuxiliaryEq {&#10;\find(equals(result,auxiliarySK)==&gt;)&#10;\addrules [replaceKnownAuxiliaryConstant {&#10;\find(auxiliarySK)&#10;\inSequentState\replacewith(result) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([]==&gt;[]) &#10;\heuristics(hide_auxiliary_eq)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1005] hideAuxiliaryEqConcrete, hideAuxiliaryEqConcrete {&#10;\find(equals(auxiliarySK,TRUE)==&gt;)&#10;\addrules [replaceKnownAuxiliaryConstant {&#10;\find(auxiliarySK)&#10;\inSequentState\replacewith(TRUE) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([]==&gt;[]) &#10;\heuristics(hide_auxiliary_eq_const)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1006] hideAuxiliaryEqConcrete2, hideAuxiliaryEqConcrete2 {&#10;\find(==&gt;equals(auxiliarySK,TRUE))&#10;\addrules [replaceKnownAuxiliaryConstant {&#10;\find(auxiliarySK)&#10;\inSequentState\replacewith(FALSE) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([]==&gt;[]) &#10;\heuristics(hide_auxiliary_eq_const)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1007] hide_left, hide_left {&#10;\find(b==&gt;)&#10;\addrules [insert_hidden {&#10;\add [b]==&gt;[] &#10;Choices: true}] \replacewith([]==&gt;[]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1008] hide_right, hide_right {&#10;\find(==&gt;b)&#10;\addrules [insert_hidden {&#10;\add []==&gt;[b] &#10;Choices: true}] \replacewith([]==&gt;[]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1009] i_minus_i_is_zero, i_minus_i_is_zero {&#10;\find(sub(i,i))&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1010] identityCastDouble, identityCastDouble {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (double) #seDouble;&#10;... }\] (post))&#10;\replacewith(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seDouble;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1011] identityCastFloat, identityCastFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (float) #seFloat;&#10;... }\] (post))&#10;\replacewith(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seFloat;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1012] if, if {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;... }\] (post))&#10;\replacewith(if-then-else(equals(#se,TRUE),#allmodal ( (modal operator))\[{ ..&#10;  #s0&#10;... }\] (post),#allmodal(post))) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1013] ifElse, ifElse {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;  else #s1&#10;... }\] (post))&#10;\replacewith(if-then-else(equals(#se,TRUE),#allmodal ( (modal operator))\[{ ..&#10;  #s0&#10;... }\] (post),#allmodal ( (modal operator))\[{ ..&#10;  #s1&#10;... }\] (post))) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1014] ifElseFalse, ifElseFalse {&#10;\assumes ([equals(#se,FALSE)]==&gt;[]) &#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;  else #s1&#10;... }\] (post))&#10;\replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #s1&#10;... }\] (post)]) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1015] ifElseSkipElse, ifElseSkipElse {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = true;&#10;  if (#loc) #s0&#10;  else #s1&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #loc = true;&#10;  #s0&#10;... }\] (post)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1016] ifElseSkipElseConditionInBlock, ifElseSkipElseConditionInBlock {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #loc = true;&#10;  }&#10;  if (#loc) #s0&#10;  else #s1&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #loc = true;&#10;  }&#10;  #s0&#10;... }\] (post)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1017] ifElseSkipThen, ifElseSkipThen {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = false;&#10;  if (#loc) #s0&#10;  else #s1&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #loc = false;&#10;  #s1&#10;... }\] (post)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1018] ifElseSkipThenConditionInBlock, ifElseSkipThenConditionInBlock {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #loc = false;&#10;  }&#10;  if (#loc) #s0&#10;  else #s1&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #loc = false;&#10;  }&#10;  #s1&#10;... }\] (post)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1019] ifElseSplit, ifElseSplit {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;  else #s1&#10;... }\] (post))&#10;\add [equals(#se,FALSE)]==&gt;[] \replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #s1&#10;... }\] (post)]) ;&#10;\add [equals(#se,TRUE)]==&gt;[] \replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #s0&#10;... }\] (post)]) &#10;\heuristics(split_if)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1020] ifElseSplitLeft, ifElseSplitLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;  else #s1&#10;... }\] (post)==&gt;)&#10;\add [equals(#se,FALSE)]==&gt;[] \replacewith([#allmodal ( (modal operator))\[{ ..&#10;  #s1&#10;... }\] (post)]==&gt;[]) ;&#10;\add [equals(#se,TRUE)]==&gt;[] \replacewith([#allmodal ( (modal operator))\[{ ..&#10;  #s0&#10;... }\] (post)]==&gt;[]) &#10;\heuristics(split_if)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1021] ifElseTrue, ifElseTrue {&#10;\assumes ([equals(#se,TRUE)]==&gt;[]) &#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;  else #s1&#10;... }\] (post))&#10;\replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #s0&#10;... }\] (post)]) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1022] ifElseUnfold, ifElseUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  if (#nse) #s0&#10;  else #s1&#10;... }\] (post))&#10;\varcond(\new(#boolv (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #boolv;&#10;  #boolv = #nse;&#10;  if (#boolv) #s0&#10;  else {&#10;    #s1&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1023] ifEnterThen, ifEnterThen {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = true;&#10;  if (#loc) #s0&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #loc = true;&#10;  #s0&#10;... }\] (post)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1024] ifEnterThenConditionInBlock, ifEnterThenConditionInBlock {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #loc = true;&#10;  }&#10;  if (#loc) #s0&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #loc = true;&#10;  }&#10;  #s0&#10;... }\] (post)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1025] ifEqualsInteger, ifEqualsInteger {&#10;\find(equals(if-then-else(phi,x,y),Z(iz)))&#10;\replacewith(or(and(phi,equals(x,Z(iz))),and(not(phi),equals(y,Z(iz))))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1026] ifEqualsNull, ifEqualsNull {&#10;\find(equals(if-then-else(phi,x,y),null))&#10;\replacewith(or(and(phi,equals(x,null)),and(not(phi),equals(y,null)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1027] ifEqualsTRUE, ifEqualsTRUE {&#10;\find(equals(if-then-else(phi,x,y),TRUE))&#10;\replacewith(or(and(phi,equals(x,TRUE)),and(not(phi),equals(y,TRUE)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1028] ifExthenelse1_eq, ifExthenelse1_eq {&#10;\find(ifExThenElse{intVar (variable)}(equals(intVar,t),then,else))&#10;\varcond(\notFreeIn(intVar (variable), t (int term)))&#10;\replacewith(subst{intVar (variable)}(t,then)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1029] ifExthenelse1_eq2, ifExthenelse1_eq2 {&#10;\find(ifExThenElse{intVar (variable)}(equals(t,intVar),then,else))&#10;\varcond(\notFreeIn(intVar (variable), t (int term)))&#10;\replacewith(subst{intVar (variable)}(t,then)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1030] ifExthenelse1_eq2_for, ifExthenelse1_eq2_for {&#10;\find(ifExThenElse{intVar (variable)}(equals(t,intVar),b,c))&#10;\varcond(\notFreeIn(intVar (variable), t (int term)))&#10;\replacewith(subst{intVar (variable)}(t,b)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1031] ifExthenelse1_eq2_for_phi, ifExthenelse1_eq2_for_phi {&#10;\find(ifExThenElse{intVar (variable)}(and(phi,equals(t,intVar)),b,c))&#10;\varcond(\notFreeIn(intVar (variable), t (int term)))&#10;\replacewith(if-then-else(subst{intVar (variable)}(t,phi),subst{intVar (variable)}(t,b),c)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1032] ifExthenelse1_eq2_phi, ifExthenelse1_eq2_phi {&#10;\find(ifExThenElse{intVar (variable)}(and(phi,equals(t,intVar)),then,else))&#10;\varcond(\notFreeIn(intVar (variable), t (int term)))&#10;\replacewith(if-then-else(subst{intVar (variable)}(t,phi),subst{intVar (variable)}(t,then),else)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1033] ifExthenelse1_eq_for, ifExthenelse1_eq_for {&#10;\find(ifExThenElse{intVar (variable)}(equals(intVar,t),b,c))&#10;\varcond(\notFreeIn(intVar (variable), t (int term)))&#10;\replacewith(subst{intVar (variable)}(t,b)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1034] ifExthenelse1_eq_for_phi, ifExthenelse1_eq_for_phi {&#10;\find(ifExThenElse{intVar (variable)}(and(phi,equals(intVar,t)),b,c))&#10;\varcond(\notFreeIn(intVar (variable), t (int term)))&#10;\replacewith(if-then-else(subst{intVar (variable)}(t,phi),subst{intVar (variable)}(t,b),c)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1035] ifExthenelse1_eq_phi, ifExthenelse1_eq_phi {&#10;\find(ifExThenElse{intVar (variable)}(and(phi,equals(intVar,t)),then,else))&#10;\varcond(\notFreeIn(intVar (variable), t (int term)))&#10;\replacewith(if-then-else(subst{intVar (variable)}(t,phi),subst{intVar (variable)}(t,then),else)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1036] ifExthenelse1_false, ifExthenelse1_false {&#10;\find(ifExThenElse{intVar (variable)}(false,then,else))&#10;\replacewith(else) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1037] ifExthenelse1_false_for, ifExthenelse1_false_for {&#10;\find(ifExThenElse{intVar (variable)}(false,b,c))&#10;\replacewith(c) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1038] ifExthenelse1_min, ifExthenelse1_min {&#10;\find(ifExThenElse{intVar (variable)}(phi,then,else))&#10;\sameUpdateLevel\varcond(\notFreeIn(intVar (variable), phi (formula)))&#10;\replacewith(if-then-else(phi,subst{intVar (variable)}(Z(0(#)),then),else)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1039] ifExthenelse1_min_for, ifExthenelse1_min_for {&#10;\find(ifExThenElse{intVar (variable)}(phi,b,c))&#10;\sameUpdateLevel\varcond(\notFreeIn(intVar (variable), phi (formula)))&#10;\replacewith(if-then-else(phi,subst{intVar (variable)}(Z(0(#)),b),c)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1040] ifExthenelse1_solve, ifExthenelse1_solve {&#10;\find(ifExThenElse{intVar (variable)}(phi,then,else))&#10;\sameUpdateLevel\varcond(\notFreeIn(intVar (variable), intValue (int term)))&#10;\add []==&gt;[and(subst{intVar (variable)}(intValue,phi),all{intVar (variable)}(imp(phi,wellOrderLeqInt(intValue,intVar))))] \replacewith(ifExThenElse{intVar (variable)}(phi,then,else)) ;&#10;\replacewith(subst{intVar (variable)}(intValue,then)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1041] ifExthenelse1_solve_for, ifExthenelse1_solve_for {&#10;\find(ifExThenElse{intVar (variable)}(phi,b,c))&#10;\sameUpdateLevel\varcond(\notFreeIn(intVar (variable), intValue (int term)))&#10;\add []==&gt;[and(subst{intVar (variable)}(intValue,phi),all{intVar (variable)}(imp(phi,wellOrderLeqInt(intValue,intVar))))] \replacewith(ifExThenElse{intVar (variable)}(phi,b,c)) ;&#10;\replacewith(subst{intVar (variable)}(intValue,b)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1042] ifExthenelse1_split, ifExthenelse1_split {&#10;\find(ifExThenElse{intVar (variable)}(phi,then,else))&#10;\sameUpdateLevel\varcond(\notFreeIn(intVar (variable), intSk (int skolem term)))&#10;\add []==&gt;[exists{intVar (variable)}(phi)] \replacewith(else) ;&#10;\add [subst{intVar (variable)}(intSk,phi),all{intVar (variable)}(imp(phi,wellOrderLeqInt(intSk,intVar)))]==&gt;[] \replacewith(subst{intVar (variable)}(intSk,then)) &#10;\heuristics(split_cond)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1043] ifExthenelse1_split_for, ifExthenelse1_split_for {&#10;\find(ifExThenElse{intVar (variable)}(phi,b,c))&#10;\sameUpdateLevel\varcond(\notFreeIn(intVar (variable), intSk (int skolem term)))&#10;\add []==&gt;[exists{intVar (variable)}(phi)] \replacewith(c) ;&#10;\add [subst{intVar (variable)}(intSk,phi),all{intVar (variable)}(imp(phi,wellOrderLeqInt(intSk,intVar)))]==&gt;[] \replacewith(subst{intVar (variable)}(intSk,b)) &#10;\heuristics(split_cond)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1044] ifExthenelse1_unused_var, ifExthenelse1_unused_var {&#10;\find(ifExThenElse{intVar (variable)}(phi,then,else))&#10;\varcond(\notFreeIn(intVar (variable), then (G2 term)))&#10;\replacewith(if-then-else(exists{intVar (variable)}(phi),then,else)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1045] ifExthenelse1_unused_var_for, ifExthenelse1_unused_var_for {&#10;\find(ifExThenElse{intVar (variable)}(phi,b,c))&#10;\varcond(\notFreeIn(intVar (variable), b (formula)))&#10;\replacewith(if-then-else(exists{intVar (variable)}(phi),b,c)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1046] ifFalse, ifFalse {&#10;\assumes ([equals(#se,FALSE)]==&gt;[]) &#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;... }\] (post))&#10;\replacewith([]==&gt;[#allmodal(post)]) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1047] ifSkipThen, ifSkipThen {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = false;&#10;  if (#loc) #s0&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #loc = false;&#10;... }\] (post)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1048] ifSkipThenConditionInBlock, ifSkipThenConditionInBlock {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #loc = false;&#10;  }&#10;  if (#loc) #s0&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #loc = false;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1049] ifSplit, ifSplit {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;... }\] (post))&#10;\add [equals(#se,FALSE)]==&gt;[] \replacewith([]==&gt;[#allmodal(post)]) ;&#10;\add [equals(#se,TRUE)]==&gt;[] \replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #s0&#10;... }\] (post)]) &#10;\heuristics(split_if)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1050] ifSplitLeft, ifSplitLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;... }\] (post)==&gt;)&#10;\add [equals(#se,FALSE)]==&gt;[] \replacewith([#allmodal(post)]==&gt;[]) ;&#10;\add [equals(#se,TRUE)]==&gt;[] \replacewith([#allmodal ( (modal operator))\[{ ..&#10;  #s0&#10;... }\] (post)]==&gt;[]) &#10;\heuristics(split_if)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1051] ifTrue, ifTrue {&#10;\assumes ([equals(#se,TRUE)]==&gt;[]) &#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  if (#se) #s0&#10;... }\] (post))&#10;\replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  #s0&#10;... }\] (post)]) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1052] ifUnfold, ifUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  if (#nse) #s0&#10;... }\] (post))&#10;\varcond(\new(#boolv (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #boolv;&#10;  #boolv = #nse;&#10;  if (#boolv) #s0&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1053] ifthenelse_concrete, ifthenelse_concrete {&#10;\find(if-then-else(phi,true,false))&#10;\replacewith(phi) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1054] ifthenelse_concrete2, ifthenelse_concrete2 {&#10;\find(if-then-else(phi,false,true))&#10;\replacewith(not(phi)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1055] ifthenelse_concrete3, ifthenelse_concrete3 {&#10;\find(equals(if-then-else(phi,then,else),then))&#10;\replacewith(or(phi,equals(else,then))) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1056] ifthenelse_concrete4, ifthenelse_concrete4 {&#10;\find(equals(if-then-else(phi,then,else),else))&#10;\replacewith(or(not(phi),equals(then,else))) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1057] ifthenelse_equals, ifthenelse_equals {&#10;\find(equals(if-then-else(b,TRUE,FALSE),if-then-else(c,TRUE,FALSE)))&#10;\replacewith(equiv(b,c)) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1058] ifthenelse_equals_1, ifthenelse_equals_1 {&#10;\find(equals(if-then-else(b,TRUE,FALSE),c))&#10;\replacewith(equiv(b,equals(c,TRUE))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1059] ifthenelse_equals_2, ifthenelse_equals_2 {&#10;\find(equals(b,if-then-else(c,TRUE,FALSE)))&#10;\replacewith(equiv(equals(b,TRUE),c)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1060] ifthenelse_false, ifthenelse_false {&#10;\find(if-then-else(false,then,else))&#10;\replacewith(else) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1061] ifthenelse_false_for, ifthenelse_false_for {&#10;\find(if-then-else(false,b,c))&#10;\replacewith(c) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1062] ifthenelse_negated, ifthenelse_negated {&#10;\find(if-then-else(not(phi),then,else))&#10;\replacewith(if-then-else(phi,else,then)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1063] ifthenelse_negated_for, ifthenelse_negated_for {&#10;\find(if-then-else(not(phi),b,c))&#10;\replacewith(if-then-else(phi,c,b)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1064] ifthenelse_same_branches, ifthenelse_same_branches {&#10;\find(if-then-else(phi,then,then))&#10;\replacewith(then) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1065] ifthenelse_same_branches_for, ifthenelse_same_branches_for {&#10;\find(if-then-else(phi,b,b))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1066] ifthenelse_split, ifthenelse_split {&#10;\find(if-then-else(phi,then,else))&#10;\sameUpdateLevel\add []==&gt;[phi] \replacewith(else) ;&#10;\add [phi]==&gt;[] \replacewith(then) &#10;\heuristics(split_cond)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1067] ifthenelse_split_for, ifthenelse_split_for {&#10;\find(if-then-else(phi,b,c))&#10;\sameUpdateLevel\add []==&gt;[phi] \replacewith(c) ;&#10;\add [phi]==&gt;[] \replacewith(b) &#10;\heuristics(split_cond)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1068] ifthenelse_to_or_for, ifthenelse_to_or_for {&#10;\find(if-then-else(phi,b,c))&#10;\replacewith(and(or(not(phi),b),or(phi,c))) &#10;\heuristics(notHumanReadable, cnf_expandIfThenElse, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1069] ifthenelse_to_or_for2, ifthenelse_to_or_for2 {&#10;\find(not(if-then-else(phi,b,c)))&#10;\replacewith(and(or(not(phi),not(b)),or(phi,not(c)))) &#10;\heuristics(notHumanReadable, cnf_expandIfThenElse, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1070] ifthenelse_to_or_left, ifthenelse_to_or_left {&#10;\find(equals(if-then-else(phi,then,else),t))&#10;\replacewith(and(or(not(phi),equals(then,t)),or(phi,equals(else,t)))) &#10;\heuristics(notHumanReadable, cnf_expandIfThenElse, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1071] ifthenelse_to_or_left2, ifthenelse_to_or_left2 {&#10;\find(not(equals(if-then-else(phi,then,else),t)))&#10;\replacewith(and(or(not(phi),not(equals(then,t))),or(phi,not(equals(else,t))))) &#10;\heuristics(notHumanReadable, cnf_expandIfThenElse, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1072] ifthenelse_to_or_right, ifthenelse_to_or_right {&#10;\find(equals(t,if-then-else(phi,then,else)))&#10;\replacewith(and(or(not(phi),equals(t,then)),or(phi,equals(t,else)))) &#10;\heuristics(notHumanReadable, cnf_expandIfThenElse, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1073] ifthenelse_to_or_right2, ifthenelse_to_or_right2 {&#10;\find(not(equals(t,if-then-else(phi,then,else))))&#10;\replacewith(and(or(not(phi),not(equals(t,then))),or(phi,not(equals(t,else))))) &#10;\heuristics(notHumanReadable, cnf_expandIfThenElse, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1074] ifthenelse_true, ifthenelse_true {&#10;\find(if-then-else(true,then,else))&#10;\replacewith(then) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1075] ifthenelse_true_for, ifthenelse_true_for {&#10;\find(if-then-else(true,b,c))&#10;\replacewith(b) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1076] impLeft, impLeft {&#10;\find(imp(b,c)==&gt;)&#10;\replacewith([c]==&gt;[]) ;&#10;\replacewith([]==&gt;[b]) &#10;\heuristics(beta)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1077] impRight, impRight {&#10;\find(==&gt;imp(b,c))&#10;\replacewith([b]==&gt;[c]) &#10;\heuristics(alpha)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1078] inDomainConcrete, inDomainConcrete {&#10;\assumes ([]==&gt;[equals(mapUndef,y)]) &#10;\find(equals(mapGet(m,x),y)==&gt;)&#10;\add [inDomain(m,x)]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1079] inDomainOfMapEmpty, inDomainOfMapEmpty {&#10;\find(inDomain(mapEmpty,x))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1080] inDomainOfMapForeach, inDomainOfMapForeach {&#10;\find(inDomain(mapForeach{v (variable)}(b,y),x))&#10;\replacewith(and(equals(subst{v (variable)}(alpha::cast(x),b),TRUE),equals(alpha::instance(x),TRUE))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1081] inDomainOfMapOverride, inDomainOfMapOverride {&#10;\find(inDomain(mapOverride(m0,m1),x))&#10;\replacewith(or(inDomain(m0,x),inDomain(m1,x))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1082] inDomainOfMapRemove, inDomainOfMapRemove {&#10;\find(inDomain(mapRemove(m,key),x))&#10;\replacewith(and(inDomain(m,x),not(equals(x,key)))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1083] inDomainOfMapSingleton, inDomainOfMapSingleton {&#10;\find(inDomain(mapSingleton(x,y),z))&#10;\replacewith(equals(x,z)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1084] inDomainOfMapUpdate, inDomainOfMapUpdate {&#10;\find(inDomain(mapUpdate(m,key,value),x))&#10;\replacewith(or(inDomain(m,x),equals(x,key))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1085] inDomainOfSeq2Map, inDomainOfSeq2Map {&#10;\find(inDomain(seq2map(s),x))&#10;\replacewith(and(and(equals(int::instance(x),TRUE),leq(Z(0(#)),int::cast(x))),lt(int::cast(x),seqLen(s)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1086] inEqSimp_and_antiSymm0, inEqSimp_and_antiSymm0 {&#10;\find(and(leq(i,i0),geq(i,i0)))&#10;\replacewith(equals(i,i0)) &#10;\heuristics(inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1087] inEqSimp_and_antiSymm1, inEqSimp_and_antiSymm1 {&#10;\find(and(and(b,leq(i,i0)),geq(i,i0)))&#10;\replacewith(and(b,equals(i,i0))) &#10;\heuristics(inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1088] inEqSimp_and_contradInEq0, inEqSimp_and_contradInEq0 {&#10;\find(and(leq(contradLeft,contradRightSmaller),geq(contradLeft,contradRightBigger)))&#10;\replacewith(and(and(leq(contradLeft,contradRightSmaller),geq(contradLeft,contradRightBigger)),geq(contradRightSmaller,contradRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_and_contradInEqs, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1089] inEqSimp_and_contradInEq1, inEqSimp_and_contradInEq1 {&#10;\find(and(and(b,leq(contradLeft,contradRightSmaller)),geq(contradLeft,contradRightBigger)))&#10;\replacewith(and(and(and(b,leq(contradLeft,contradRightSmaller)),geq(contradLeft,contradRightBigger)),geq(contradRightSmaller,contradRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_and_contradInEqs, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1090] inEqSimp_and_strengthen0, inEqSimp_and_strengthen0 {&#10;\find(and(leq(strengthenLeft,strengthenRight),not(equals(strengthenLeft,strengthenRight))))&#10;\replacewith(leq(strengthenLeft,add(Z(neglit(1(#))),strengthenRight))) &#10;\heuristics(notHumanReadable, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1091] inEqSimp_and_strengthen1, inEqSimp_and_strengthen1 {&#10;\find(and(geq(strengthenLeft,strengthenRight),not(equals(strengthenLeft,strengthenRight))))&#10;\replacewith(geq(strengthenLeft,add(Z(1(#)),strengthenRight))) &#10;\heuristics(notHumanReadable, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1092] inEqSimp_and_strengthen2, inEqSimp_and_strengthen2 {&#10;\find(and(and(b,leq(strengthenLeft,strengthenRight)),not(equals(strengthenLeft,strengthenRight))))&#10;\replacewith(and(b,leq(strengthenLeft,add(Z(neglit(1(#))),strengthenRight)))) &#10;\heuristics(notHumanReadable, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1093] inEqSimp_and_strengthen3, inEqSimp_and_strengthen3 {&#10;\find(and(and(b,geq(strengthenLeft,strengthenRight)),not(equals(strengthenLeft,strengthenRight))))&#10;\replacewith(and(b,geq(strengthenLeft,add(Z(1(#)),strengthenRight)))) &#10;\heuristics(notHumanReadable, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1094] inEqSimp_and_subsumption0, inEqSimp_and_subsumption0 {&#10;\find(and(leq(subsumLeft,subsumRightSmaller),leq(subsumLeft,subsumRightBigger)))&#10;\replacewith(and(leq(subsumLeft,subsumRightSmaller),or(leq(subsumRightSmaller,subsumRightBigger),leq(subsumLeft,subsumRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1095] inEqSimp_and_subsumption1, inEqSimp_and_subsumption1 {&#10;\find(and(and(b,leq(subsumLeft,subsumRightSmaller)),leq(subsumLeft,subsumRightBigger)))&#10;\replacewith(and(and(b,leq(subsumLeft,subsumRightSmaller)),or(leq(subsumRightSmaller,subsumRightBigger),leq(subsumLeft,subsumRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1096] inEqSimp_and_subsumption2, inEqSimp_and_subsumption2 {&#10;\find(and(geq(subsumLeft,subsumRightSmaller),geq(subsumLeft,subsumRightBigger)))&#10;\replacewith(and(or(leq(subsumRightSmaller,subsumRightBigger),geq(subsumLeft,subsumRightSmaller)),geq(subsumLeft,subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1097] inEqSimp_and_subsumption3, inEqSimp_and_subsumption3 {&#10;\find(and(and(b,geq(subsumLeft,subsumRightSmaller)),geq(subsumLeft,subsumRightBigger)))&#10;\replacewith(and(and(b,or(leq(subsumRightSmaller,subsumRightBigger),geq(subsumLeft,subsumRightSmaller))),geq(subsumLeft,subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1098] inEqSimp_and_subsumption4, inEqSimp_and_subsumption4 {&#10;\find(and(leq(subsumLeft,subsumRightSmaller),not(equals(subsumLeft,subsumRightBigger))))&#10;\replacewith(and(leq(subsumLeft,subsumRightSmaller),or(lt(subsumRightSmaller,subsumRightBigger),not(equals(subsumLeft,subsumRightBigger))))) &#10;\heuristics(notHumanReadable, inEqSimp_and_subsumptionEq, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1099] inEqSimp_and_subsumption5, inEqSimp_and_subsumption5 {&#10;\find(and(and(b,leq(subsumLeft,subsumRightSmaller)),not(equals(subsumLeft,subsumRightBigger))))&#10;\replacewith(and(and(b,leq(subsumLeft,subsumRightSmaller)),or(lt(subsumRightSmaller,subsumRightBigger),not(equals(subsumLeft,subsumRightBigger))))) &#10;\heuristics(notHumanReadable, inEqSimp_and_subsumptionEq, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1100] inEqSimp_and_subsumption6, inEqSimp_and_subsumption6 {&#10;\find(and(geq(subsumLeft,subsumRightBigger),not(equals(subsumLeft,subsumRightSmaller))))&#10;\replacewith(and(geq(subsumLeft,subsumRightBigger),or(lt(subsumRightSmaller,subsumRightBigger),not(equals(subsumLeft,subsumRightSmaller))))) &#10;\heuristics(notHumanReadable, inEqSimp_and_subsumptionEq, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[1101] inEqSimp_and_subsumption7, inEqSimp_and_subsumption7 {&#10;\find(and(and(b,geq(subsumLeft,subsumRightBigger)),not(equals(subsumLeft,subsumRightSmaller))))&#10;\replacewith(and(and(b,geq(subsumLeft,subsumRightBigger)),or(lt(subsumRightSmaller,subsumRightBigger),not(equals(subsumLeft,subsumRightSmaller))))) &#10;\heuristics(notHumanReadable, inEqSimp_and_subsumptionEq, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1102] inEqSimp_antiSymm, inEqSimp_antiSymm {&#10;\assumes ([leq(i,i0)]==&gt;[]) &#10;\find(geq(i,i0)==&gt;)&#10;\add [equals(i,i0)]==&gt;[] &#10;\heuristics(inEqSimp_antiSymm, inEqSimp_saturate)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1103] inEqSimp_commuteGeq, inEqSimp_commuteGeq {&#10;\find(geq(commLeft,commRight))&#10;\replacewith(leq(commRight,commLeft)) &#10;\heuristics(inEqSimp_commute, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1104] inEqSimp_commuteLeq, inEqSimp_commuteLeq {&#10;\find(leq(commLeft,commRight))&#10;\replacewith(geq(commRight,commLeft)) &#10;\heuristics(inEqSimp_commute, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1105] inEqSimp_contradEq3, inEqSimp_contradEq3 {&#10;\assumes ([leq(contradLeft,contradRightSmaller)]==&gt;[]) &#10;\find(equals(contradLeft,contradRightBigger))&#10;\sameUpdateLevel\replacewith(and(geq(add(contradRightSmaller,mul(Z(neglit(1(#))),contradRightBigger)),Z(0(#))),equals(contradLeft,contradRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_contradEqs, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1106] inEqSimp_contradEq7, inEqSimp_contradEq7 {&#10;\assumes ([geq(contradLeft,contradRightBigger)]==&gt;[]) &#10;\find(equals(contradLeft,contradRightSmaller))&#10;\sameUpdateLevel\replacewith(and(leq(add(contradRightBigger,mul(Z(neglit(1(#))),contradRightSmaller)),Z(0(#))),equals(contradLeft,contradRightSmaller))) &#10;\heuristics(notHumanReadable, inEqSimp_contradEqs, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1107] inEqSimp_contradInEq0, inEqSimp_contradInEq0 {&#10;\assumes ([leq(contradLeft,contradRightSmaller)]==&gt;[]) &#10;\find(geq(contradLeft,contradRightBigger))&#10;\sameUpdateLevel\replacewith(and(geq(contradRightSmaller,contradRightBigger),geq(contradLeft,contradRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_contradInEqs, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1108] inEqSimp_contradInEq1, inEqSimp_contradInEq1 {&#10;\assumes ([geq(contradLeft,contradRightBigger)]==&gt;[]) &#10;\find(leq(contradLeft,contradRightSmaller))&#10;\sameUpdateLevel\replacewith(and(geq(contradRightSmaller,contradRightBigger),leq(contradLeft,contradRightSmaller))) &#10;\heuristics(notHumanReadable, inEqSimp_contradInEqs, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1109] inEqSimp_contradInEq2, inEqSimp_contradInEq2 {&#10;\assumes ([leq(mul(contradLeft,contradCoeffSmaller),contradRightSmaller)]==&gt;[]) &#10;\find(geq(mul(contradLeft,contradCoeffBigger),contradRightBigger))&#10;\sameUpdateLevel\replacewith(and(imp(gt(contradCoeffSmaller,Z(0(#))),imp(gt(contradCoeffBigger,Z(0(#))),geq(mul(contradCoeffBigger,contradRightSmaller),mul(contradCoeffSmaller,contradRightBigger)))),geq(mul(contradLeft,contradCoeffBigger),contradRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_contradInEqs, inEqSimp_propagation)&#10;Ch…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1110] inEqSimp_contradInEq3, inEqSimp_contradInEq3 {&#10;\assumes ([leq(contradLeft,contradRightSmaller)]==&gt;[]) &#10;\find(geq(mul(contradLeft,contradCoeffBigger),contradRightBigger))&#10;\sameUpdateLevel\replacewith(and(imp(gt(contradCoeffBigger,Z(0(#))),geq(mul(contradCoeffBigger,contradRightSmaller),contradRightBigger)),geq(mul(contradLeft,contradCoeffBigger),contradRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_contradInEqs, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1111] inEqSimp_contradInEq4, inEqSimp_contradInEq4 {&#10;\assumes ([geq(mul(contradLeft,contradCoeffBigger),contradRightBigger)]==&gt;[]) &#10;\find(leq(mul(contradLeft,contradCoeffSmaller),contradRightSmaller))&#10;\sameUpdateLevel\replacewith(and(imp(gt(contradCoeffSmaller,Z(0(#))),imp(gt(contradCoeffBigger,Z(0(#))),geq(mul(contradCoeffBigger,contradRightSmaller),mul(contradCoeffSmaller,contradRightBigger)))),leq(mul(contradLeft,contradCoeffSmaller),contradRightSmaller))) &#10;\heuristics(notHumanReadable, inEqSimp_contradInEqs, inEqSimp_propagation)&#10;…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1112] inEqSimp_contradInEq5, inEqSimp_contradInEq5 {&#10;\assumes ([geq(contradLeft,contradRightBigger)]==&gt;[]) &#10;\find(leq(mul(contradLeft,contradCoeffSmaller),contradRightSmaller))&#10;\sameUpdateLevel\replacewith(and(imp(gt(contradCoeffSmaller,Z(0(#))),geq(contradRightSmaller,mul(contradCoeffSmaller,contradRightBigger))),leq(mul(contradLeft,contradCoeffSmaller),contradRightSmaller))) &#10;\heuristics(notHumanReadable, inEqSimp_contradInEqs, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1113] inEqSimp_exactShadow0, inEqSimp_exactShadow0 {&#10;\assumes ([leq(mul(esLeft,esCoeff1),esRight1)]==&gt;[]) &#10;\find(geq(mul(esLeft,esCoeff2),esRight2)==&gt;)&#10;\add [imp(and(gt(esCoeff1,Z(0(#))),gt(esCoeff2,Z(0(#)))),geq(add(mul(Z(neglit(1(#))),mul(esCoeff1,esRight2)),mul(esCoeff2,esRight1)),Z(0(#))))]==&gt;[] &#10;\heuristics(notHumanReadable, inEqSimp_exactShadow, inEqSimp_saturate)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1114] inEqSimp_exactShadow1, inEqSimp_exactShadow1 {&#10;\assumes ([leq(esLeft,esRight1)]==&gt;[]) &#10;\find(geq(mul(esLeft,esCoeff2),esRight2)==&gt;)&#10;\add [imp(gt(esCoeff2,Z(0(#))),geq(add(mul(Z(neglit(1(#))),esRight2),mul(esCoeff2,esRight1)),Z(0(#))))]==&gt;[] &#10;\heuristics(notHumanReadable, inEqSimp_exactShadow, inEqSimp_saturate)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1115] inEqSimp_exactShadow2, inEqSimp_exactShadow2 {&#10;\assumes ([leq(mul(esLeft,esCoeff1),esRight1)]==&gt;[]) &#10;\find(geq(esLeft,esRight2)==&gt;)&#10;\add [imp(gt(esCoeff1,Z(0(#))),geq(add(mul(Z(neglit(1(#))),mul(esCoeff1,esRight2)),esRight1),Z(0(#))))]==&gt;[] &#10;\heuristics(notHumanReadable, inEqSimp_exactShadow, inEqSimp_saturate)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1116] inEqSimp_exactShadow3, inEqSimp_exactShadow3 {&#10;\assumes ([leq(esLeft,esRight1)]==&gt;[]) &#10;\find(geq(esLeft,esRight2)==&gt;)&#10;\add [geq(add(mul(Z(neglit(1(#))),esRight2),esRight1),Z(0(#)))]==&gt;[] &#10;\heuristics(notHumanReadable, inEqSimp_exactShadow, inEqSimp_saturate)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1117] inEqSimp_geqRight, inEqSimp_geqRight {&#10;\find(==&gt;geq(i,i0))&#10;\replacewith([leq(add(add(Z(1(#)),mul(Z(neglit(1(#))),i0)),i),Z(0(#)))]==&gt;[]) &#10;\heuristics(notHumanReadable, inEqSimp_moveLeft, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1118] inEqSimp_gtRight, inEqSimp_gtRight {&#10;\find(==&gt;gt(i,i0))&#10;\replacewith([leq(add(mul(Z(neglit(1(#))),i0),i),Z(0(#)))]==&gt;[]) &#10;\heuristics(notHumanReadable, inEqSimp_moveLeft, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1119] inEqSimp_gtToGeq, inEqSimp_gtToGeq {&#10;\find(gt(i,i0))&#10;\replacewith(geq(add(add(Z(neglit(1(#))),mul(Z(neglit(1(#))),i0)),i),Z(0(#)))) &#10;\heuristics(notHumanReadable, inEqSimp_makeNonStrict, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1120] inEqSimp_homoInEq0, inEqSimp_homoInEq0 {&#10;\find(leq(homoLeft,homoRight))&#10;\replacewith(geq(add(homoRight,mul(homoLeft,Z(neglit(1(#))))),Z(0(#)))) &#10;\heuristics(notHumanReadable, inEqSimp_homo, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1121] inEqSimp_homoInEq1, inEqSimp_homoInEq1 {&#10;\find(geq(homoLeft,homoRight))&#10;\replacewith(leq(add(homoRight,mul(homoLeft,Z(neglit(1(#))))),Z(0(#)))) &#10;\heuristics(notHumanReadable, inEqSimp_homo, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1122] inEqSimp_invertInEq0, inEqSimp_invertInEq0 {&#10;\find(leq(invertLeft,invertRight))&#10;\replacewith(geq(mul(invertLeft,Z(neglit(1(#)))),mul(invertRight,Z(neglit(1(#)))))) &#10;\heuristics(notHumanReadable, inEqSimp_normalise, inEqSimp_directInEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1123] inEqSimp_invertInEq1, inEqSimp_invertInEq1 {&#10;\find(geq(invertLeft,invertRight))&#10;\replacewith(leq(mul(invertLeft,Z(neglit(1(#)))),mul(invertRight,Z(neglit(1(#)))))) &#10;\heuristics(notHumanReadable, inEqSimp_normalise, inEqSimp_directInEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1124] inEqSimp_leqRight, inEqSimp_leqRight {&#10;\find(==&gt;leq(i,i0))&#10;\replacewith([geq(add(add(Z(neglit(1(#))),mul(Z(neglit(1(#))),i0)),i),Z(0(#)))]==&gt;[]) &#10;\heuristics(notHumanReadable, inEqSimp_moveLeft, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[1125] inEqSimp_ltRight, inEqSimp_ltRight {&#10;\find(==&gt;lt(i,i0))&#10;\replacewith([geq(add(mul(Z(neglit(1(#))),i0),i),Z(0(#)))]==&gt;[]) &#10;\heuristics(notHumanReadable, inEqSimp_moveLeft, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1126] inEqSimp_ltToLeq, inEqSimp_ltToLeq {&#10;\find(lt(i,i0))&#10;\replacewith(leq(add(add(Z(1(#)),mul(Z(neglit(1(#))),i0)),i),Z(0(#)))) &#10;\heuristics(notHumanReadable, inEqSimp_makeNonStrict, inEqSimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1127] inEqSimp_notGeq, inEqSimp_notGeq {&#10;\find(not(geq(i,i0)))&#10;\replacewith(leq(add(add(Z(1(#)),mul(Z(neglit(1(#))),i0)),i),Z(0(#)))) &#10;\heuristics(notHumanReadable, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1128] inEqSimp_notLeq, inEqSimp_notLeq {&#10;\find(not(leq(i,i0)))&#10;\replacewith(geq(add(add(Z(neglit(1(#))),mul(Z(neglit(1(#))),i0)),i),Z(0(#)))) &#10;\heuristics(notHumanReadable, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1129] inEqSimp_or_antiSymm0, inEqSimp_or_antiSymm0 {&#10;\find(or(leq(antiSymmLeft,antiSymmRightSmaller),geq(antiSymmLeft,antiSymmRightBigger)))&#10;\replacewith(if-then-else(equals(add(Z(2(#)),antiSymmRightSmaller),antiSymmRightBigger),not(equals(antiSymmLeft,add(Z(1(#)),antiSymmRightSmaller))),or(leq(antiSymmLeft,antiSymmRightSmaller),geq(antiSymmLeft,antiSymmRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_or_antiSymm, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1130] inEqSimp_or_antiSymm1, inEqSimp_or_antiSymm1 {&#10;\find(or(or(b,leq(antiSymmLeft,antiSymmRightSmaller)),geq(antiSymmLeft,antiSymmRightBigger)))&#10;\replacewith(or(b,if-then-else(equals(add(Z(2(#)),antiSymmRightSmaller),antiSymmRightBigger),not(equals(antiSymmLeft,add(Z(1(#)),antiSymmRightSmaller))),or(leq(antiSymmLeft,antiSymmRightSmaller),geq(antiSymmLeft,antiSymmRightBigger))))) &#10;\heuristics(notHumanReadable, inEqSimp_or_antiSymm, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1131] inEqSimp_or_subsumption0, inEqSimp_or_subsumption0 {&#10;\find(or(leq(subsumLeft,subsumRightSmaller),leq(subsumLeft,subsumRightBigger)))&#10;\replacewith(or(and(geq(subsumRightSmaller,subsumRightBigger),leq(subsumLeft,subsumRightSmaller)),leq(subsumLeft,subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1132] inEqSimp_or_subsumption1, inEqSimp_or_subsumption1 {&#10;\find(or(or(b,leq(subsumLeft,subsumRightSmaller)),leq(subsumLeft,subsumRightBigger)))&#10;\replacewith(or(or(b,and(geq(subsumRightSmaller,subsumRightBigger),leq(subsumLeft,subsumRightSmaller))),leq(subsumLeft,subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1133] inEqSimp_or_subsumption2, inEqSimp_or_subsumption2 {&#10;\find(or(geq(subsumLeft,subsumRightSmaller),geq(subsumLeft,subsumRightBigger)))&#10;\replacewith(or(geq(subsumLeft,subsumRightSmaller),and(geq(subsumRightSmaller,subsumRightBigger),geq(subsumLeft,subsumRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1134] inEqSimp_or_subsumption3, inEqSimp_or_subsumption3 {&#10;\find(or(or(b,geq(subsumLeft,subsumRightSmaller)),geq(subsumLeft,subsumRightBigger)))&#10;\replacewith(or(or(b,geq(subsumLeft,subsumRightSmaller)),and(geq(subsumRightSmaller,subsumRightBigger),geq(subsumLeft,subsumRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1135] inEqSimp_or_subsumption4, inEqSimp_or_subsumption4 {&#10;\find(or(equals(subsumLeft,subsumRightSmaller),leq(subsumLeft,subsumRightBigger)))&#10;\replacewith(or(and(gt(subsumRightSmaller,subsumRightBigger),equals(subsumLeft,subsumRightSmaller)),leq(subsumLeft,subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1136] inEqSimp_or_subsumption5, inEqSimp_or_subsumption5 {&#10;\find(or(or(b,equals(subsumLeft,subsumRightSmaller)),leq(subsumLeft,subsumRightBigger)))&#10;\replacewith(or(or(b,and(gt(subsumRightSmaller,subsumRightBigger),equals(subsumLeft,subsumRightSmaller))),leq(subsumLeft,subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1137] inEqSimp_or_subsumption6, inEqSimp_or_subsumption6 {&#10;\find(or(geq(subsumLeft,subsumRightSmaller),equals(subsumLeft,subsumRightBigger)))&#10;\replacewith(or(geq(subsumLeft,subsumRightSmaller),and(gt(subsumRightSmaller,subsumRightBigger),equals(subsumLeft,subsumRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1138] inEqSimp_or_subsumption7, inEqSimp_or_subsumption7 {&#10;\find(or(or(b,geq(subsumLeft,subsumRightSmaller)),equals(subsumLeft,subsumRightBigger)))&#10;\replacewith(or(or(b,geq(subsumLeft,subsumRightSmaller)),and(gt(subsumRightSmaller,subsumRightBigger),equals(subsumLeft,subsumRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_andOr_subsumption, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1139] inEqSimp_or_tautInEq0, inEqSimp_or_tautInEq0 {&#10;\find(or(leq(tautLeft,tautRightBigger),geq(tautLeft,tautRightSmaller)))&#10;\replacewith(or(or(leq(tautLeft,tautRightBigger),geq(tautLeft,tautRightSmaller)),geq(tautRightBigger,add(Z(neglit(1(#))),tautRightSmaller)))) &#10;\heuristics(notHumanReadable, inEqSimp_or_tautInEqs, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1140] inEqSimp_or_tautInEq1, inEqSimp_or_tautInEq1 {&#10;\find(or(or(b,leq(tautLeft,tautRightBigger)),geq(tautLeft,tautRightSmaller)))&#10;\replacewith(or(or(or(b,leq(tautLeft,tautRightBigger)),geq(tautLeft,tautRightSmaller)),geq(tautRightBigger,add(Z(neglit(1(#))),tautRightSmaller)))) &#10;\heuristics(notHumanReadable, inEqSimp_or_tautInEqs, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1141] inEqSimp_or_tautInEq2, inEqSimp_or_tautInEq2 {&#10;\find(or(geq(tautLeft,tautRightSmaller),leq(tautLeft,tautRightBigger)))&#10;\replacewith(or(or(geq(tautLeft,tautRightSmaller),leq(tautLeft,tautRightBigger)),geq(tautRightBigger,add(Z(neglit(1(#))),tautRightSmaller)))) &#10;\heuristics(notHumanReadable, inEqSimp_or_tautInEqs, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1142] inEqSimp_or_tautInEq3, inEqSimp_or_tautInEq3 {&#10;\find(or(or(b,geq(tautLeft,tautRightSmaller)),leq(tautLeft,tautRightBigger)))&#10;\replacewith(or(or(or(b,geq(tautLeft,tautRightSmaller)),leq(tautLeft,tautRightBigger)),geq(tautRightBigger,add(Z(neglit(1(#))),tautRightSmaller)))) &#10;\heuristics(notHumanReadable, inEqSimp_or_tautInEqs, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1143] inEqSimp_or_weaken0, inEqSimp_or_weaken0 {&#10;\find(or(leq(weakenLeft,weakenRightSmaller),equals(weakenLeft,weakenRightBigger)))&#10;\replacewith(if-then-else(equals(weakenRightBigger,add(Z(1(#)),weakenRightSmaller)),leq(weakenLeft,weakenRightBigger),or(leq(weakenLeft,weakenRightSmaller),equals(weakenLeft,weakenRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_or_weaken, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1144] inEqSimp_or_weaken1, inEqSimp_or_weaken1 {&#10;\find(or(equals(weakenLeft,weakenRightSmaller),geq(weakenLeft,weakenRightBigger)))&#10;\replacewith(if-then-else(equals(weakenRightBigger,add(Z(1(#)),weakenRightSmaller)),geq(weakenLeft,weakenRightSmaller),or(equals(weakenLeft,weakenRightSmaller),geq(weakenLeft,weakenRightBigger)))) &#10;\heuristics(notHumanReadable, inEqSimp_or_weaken, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1145] inEqSimp_or_weaken2, inEqSimp_or_weaken2 {&#10;\find(or(or(b,leq(weakenLeft,weakenRightSmaller)),equals(weakenLeft,weakenRightBigger)))&#10;\replacewith(or(b,if-then-else(equals(weakenRightBigger,add(Z(1(#)),weakenRightSmaller)),leq(weakenLeft,weakenRightBigger),or(leq(weakenLeft,weakenRightSmaller),equals(weakenLeft,weakenRightBigger))))) &#10;\heuristics(notHumanReadable, inEqSimp_or_weaken, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1146] inEqSimp_or_weaken3, inEqSimp_or_weaken3 {&#10;\find(or(or(b,equals(weakenLeft,weakenRightSmaller)),geq(weakenLeft,weakenRightBigger)))&#10;\replacewith(or(b,if-then-else(equals(weakenRightBigger,add(Z(1(#)),weakenRightSmaller)),geq(weakenLeft,weakenRightSmaller),or(equals(weakenLeft,weakenRightSmaller),geq(weakenLeft,weakenRightBigger))))) &#10;\heuristics(notHumanReadable, inEqSimp_or_weaken, inEqSimp_forNormalisation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1147] inEqSimp_sepNegMonomial0, inEqSimp_sepNegMonomial0 {&#10;\find(leq(add(sepResidue,sepNegMono),Z(0(#))))&#10;\replacewith(geq(mul(sepNegMono,Z(neglit(1(#)))),sepResidue)) &#10;\heuristics(notHumanReadable, inEqSimp_balance, inEqSimp_directInEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1148] inEqSimp_sepNegMonomial1, inEqSimp_sepNegMonomial1 {&#10;\find(geq(add(sepResidue,sepNegMono),Z(0(#))))&#10;\replacewith(leq(mul(sepNegMono,Z(neglit(1(#)))),sepResidue)) &#10;\heuristics(notHumanReadable, inEqSimp_balance, inEqSimp_directInEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1149] inEqSimp_sepPosMonomial0, inEqSimp_sepPosMonomial0 {&#10;\find(leq(add(sepResidue,sepPosMono),Z(0(#))))&#10;\replacewith(leq(sepPosMono,mul(sepResidue,Z(neglit(1(#)))))) &#10;\heuristics(notHumanReadable, inEqSimp_balance, inEqSimp_directInEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1150] inEqSimp_sepPosMonomial1, inEqSimp_sepPosMonomial1 {&#10;\find(geq(add(sepResidue,sepPosMono),Z(0(#))))&#10;\replacewith(geq(sepPosMono,mul(sepResidue,Z(neglit(1(#)))))) &#10;\heuristics(notHumanReadable, inEqSimp_balance, inEqSimp_directInEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1151] inEqSimp_strengthen0, inEqSimp_strengthen0 {&#10;\assumes ([]==&gt;[equals(strengthenLeft,strengthenRight)]) &#10;\find(leq(strengthenLeft,strengthenRight)==&gt;)&#10;\replacewith([leq(strengthenLeft,add(Z(neglit(1(#))),strengthenRight))]==&gt;[]) &#10;\heuristics(notHumanReadable, inEqSimp_strengthen, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1152] inEqSimp_strengthen1, inEqSimp_strengthen1 {&#10;\assumes ([]==&gt;[equals(strengthenLeft,strengthenRight)]) &#10;\find(geq(strengthenLeft,strengthenRight)==&gt;)&#10;\replacewith([geq(strengthenLeft,add(Z(1(#)),strengthenRight))]==&gt;[]) &#10;\heuristics(notHumanReadable, inEqSimp_strengthen, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1153] inEqSimp_subsumption0, inEqSimp_subsumption0 {&#10;\assumes ([leq(subsumLeft,subsumRightSmaller)]==&gt;[]) &#10;\find(leq(subsumLeft,subsumRightBigger))&#10;\sameUpdateLevel\replacewith(or(leq(subsumRightSmaller,subsumRightBigger),leq(subsumLeft,subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_subsumption, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1154] inEqSimp_subsumption1, inEqSimp_subsumption1 {&#10;\assumes ([geq(subsumLeft,subsumRightBigger)]==&gt;[]) &#10;\find(geq(subsumLeft,subsumRightSmaller))&#10;\sameUpdateLevel\replacewith(or(leq(subsumRightSmaller,subsumRightBigger),geq(subsumLeft,subsumRightSmaller))) &#10;\heuristics(notHumanReadable, inEqSimp_subsumption, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1155] inEqSimp_subsumption2, inEqSimp_subsumption2 {&#10;\assumes ([leq(mul(subsumLeft,subsumCoeffSmaller),subsumRightSmaller)]==&gt;[]) &#10;\find(leq(mul(subsumLeft,subsumCoeffBigger),subsumRightBigger))&#10;\sameUpdateLevel\replacewith(or(and(and(gt(subsumCoeffSmaller,Z(0(#))),gt(subsumCoeffBigger,Z(0(#)))),leq(mul(subsumCoeffBigger,subsumRightSmaller),mul(subsumCoeffSmaller,subsumRightBigger))),leq(mul(subsumLeft,subsumCoeffBigger),subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_subsumption, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1156] inEqSimp_subsumption4, inEqSimp_subsumption4 {&#10;\assumes ([leq(subsumLeft,subsumRightSmaller)]==&gt;[]) &#10;\find(leq(mul(subsumLeft,subsumCoeffBigger),subsumRightBigger))&#10;\sameUpdateLevel\replacewith(or(and(gt(subsumCoeffBigger,Z(0(#))),leq(mul(subsumCoeffBigger,subsumRightSmaller),subsumRightBigger)),leq(mul(subsumLeft,subsumCoeffBigger),subsumRightBigger))) &#10;\heuristics(notHumanReadable, inEqSimp_subsumption, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1157] inEqSimp_subsumption5, inEqSimp_subsumption5 {&#10;\assumes ([geq(mul(subsumLeft,subsumCoeffBigger),subsumRightBigger)]==&gt;[]) &#10;\find(geq(mul(subsumLeft,subsumCoeffSmaller),subsumRightSmaller))&#10;\sameUpdateLevel\replacewith(or(and(and(gt(subsumCoeffSmaller,Z(0(#))),gt(subsumCoeffBigger,Z(0(#)))),leq(mul(subsumCoeffBigger,subsumRightSmaller),mul(subsumCoeffSmaller,subsumRightBigger))),geq(mul(subsumLeft,subsumCoeffSmaller),subsumRightSmaller))) &#10;\heuristics(notHumanReadable, inEqSimp_subsumption, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1158] inEqSimp_subsumption6, inEqSimp_subsumption6 {&#10;\assumes ([geq(subsumLeft,subsumRightBigger)]==&gt;[]) &#10;\find(geq(mul(subsumLeft,subsumCoeffSmaller),subsumRightSmaller))&#10;\sameUpdateLevel\replacewith(or(and(gt(subsumCoeffSmaller,Z(0(#))),leq(subsumRightSmaller,mul(subsumCoeffSmaller,subsumRightBigger))),geq(mul(subsumLeft,subsumCoeffSmaller),subsumRightSmaller))) &#10;\heuristics(notHumanReadable, inEqSimp_subsumption, inEqSimp_propagation)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1159] indexOf, indexOf {&#10;\find(clIndexOfChar(l,c,i))&#10;\varcond(\notFreeIn(iv (variable), i (int term)), \notFreeIn(iv (variable), c (int term)), \notFreeIn(iv (variable), l (Seq term)))&#10;\replacewith(ifExThenElse{iv (variable)}(and(and(and(geq(i,Z(0(#))),geq(iv,i)),lt(iv,seqLen(l))),equals(int::seqGet(l,iv),c)),iv,Z(neglit(1(#))))) &#10;\heuristics(stringsExpandDefNormalOp)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1160] indexOfSeqConcatFirst, indexOfSeqConcatFirst {&#10;\find(seqIndexOf(seqConcat(s1,s2),x))&#10;\sameUpdateLevel\varcond(\notFreeIn(idx (variable), x (any term)), \notFreeIn(idx (variable), s2 (Seq term)), \notFreeIn(idx (variable), s1 (Seq term)))&#10;\add []==&gt;[exists{idx (variable)}(and(and(leq(Z(0(#)),idx),lt(idx,seqLen(s1))),equals(any::seqGet(s1,idx),x)))] ;&#10;\replacewith(seqIndexOf(s1,x)) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1161] indexOfSeqConcatSecond, indexOfSeqConcatSecond {&#10;\find(seqIndexOf(seqConcat(s1,s2),x))&#10;\sameUpdateLevel\varcond(\notFreeIn(idx (variable), x (any term)), \notFreeIn(idx (variable), s2 (Seq term)), \notFreeIn(idx (variable), s1 (Seq term)))&#10;\add []==&gt;[and(not(exists{idx (variable)}(and(and(leq(Z(0(#)),idx),lt(idx,seqLen(s1))),equals(any::seqGet(s1,idx),x)))),exists{idx (variable)}(and(and(leq(Z(0(#)),idx),lt(idx,seqLen(s2))),equals(any::seqGet(s2,idx),x))))] ;&#10;\replacewith(add(seqIndexOf(s2,x),seqLen(s1))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1162] indexOfSeqSingleton, indexOfSeqSingleton {&#10;\find(seqIndexOf(seqSingleton(x),x))&#10;\sameUpdateLevel\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1163] indexOfSeqSub, indexOfSeqSub {&#10;\find(seqIndexOf(seqSub(s,from,to),x))&#10;\sameUpdateLevel\varcond(\notFreeIn(nx (variable), to (int term)), \notFreeIn(nx (variable), from (int term)), \notFreeIn(nx (variable), x (any term)), \notFreeIn(nx (variable), s (Seq term)))&#10;\add []==&gt;[and(and(and(leq(from,seqIndexOf(s,x)),lt(seqIndexOf(s,x),to)),leq(Z(0(#)),from)),exists{nx (variable)}(and(and(leq(Z(0(#)),nx),lt(nx,seqLen(s))),equals(any::seqGet(s,nx),x))))] ;&#10;\replacewith(sub(seqIndexOf(s,x),from)) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1164] indexOfStr, indexOfStr {&#10;\find(clIndexOfCl(sourceStr,i,searchStr))&#10;\varcond(\notFreeIn(iv (variable), i (int term)), \notFreeIn(iv (variable), sourceStr (Seq term)), \notFreeIn(iv (variable), searchStr (Seq term)))&#10;\replacewith(ifExThenElse{iv (variable)}(and(and(and(geq(iv,i),geq(iv,Z(0(#)))),leq(add(iv,seqLen(searchStr)),seqLen(sourceStr))),equals(seqSub(sourceStr,iv,add(iv,seqLen(searchStr))),searchStr)),iv,Z(neglit(1(#))))) &#10;\heuristics(stringsExpandDefNormalOp)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.011"/>
  <testcase name="[1165] ineffectiveCast, ineffectiveCast {&#10;\assumes ([equals(H::instance(t),TRUE)]==&gt;[]) &#10;\find(H::cast(t))&#10;\sameUpdateLevel\add [equals(H::cast(t),t)]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1166] ineffectiveCast2, ineffectiveCast2 {&#10;\assumes ([equals(cs,gt)]==&gt;[]) &#10;\find(C::cast(gt))&#10;\sameUpdateLevel\add [equals(C::cast(gt),gt)]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1167] ineffectiveCast3, ineffectiveCast3 {&#10;\assumes ([equals(H::exactInstance(t),TRUE)]==&gt;[]) &#10;\find(H::cast(t))&#10;\sameUpdateLevel\add [equals(H::cast(t),t)]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1168] inequality_comparison_new, inequality_comparison_new {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 != #senf1;&#10;... }\] (post))&#10;\replacewith(if-then-else(not(equals(#senf0,#senf1)),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;... }\] (post),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = false;&#10;... }\] (post))) &#10;\heuristics(split_if, simplify_prog, obsolete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1169] inequality_comparison_simple, inequality_comparison_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 != #senf1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(equals(#senf0,#senf1),FALSE,TRUE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1170] inequality_comparison_simple_double, inequality_comparison_simple_double {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seDouble0 != #seDouble1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(eqDouble(#seDouble0,#seDouble1),FALSE,TRUE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1171] inequality_comparison_simple_float, inequality_comparison_simple_float {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seFloat0 != #seFloat1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(eqFloat(#seFloat0,#seFloat1),FALSE,TRUE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1172] infiniteUnionUnused, infiniteUnionUnused {&#10;\find(infiniteUnion{av (variable)}(s))&#10;\varcond(\notFreeIn(av (variable), s (LocSet term)))&#10;\replacewith(s) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1173] insert_constant_string_value, insert_constant_string_value {&#10;\assumes ([wellFormed(heap)]==&gt;[]) &#10;\find(#csv)&#10;\sameUpdateLevel\replacewith(if-then-else(equals(#constantvalue(#csv),null),null,strPool(Seq::cast(#constantvalue(#csv))))) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1174] insert_constant_value, insert_constant_value {&#10;\find(#cv)&#10;\replacewith(#constantvalue(#cv)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1175] insert_eq_all, insert_eq_all {&#10;\find(equals(sr,tr)==&gt;)&#10;\addrules [auto_insert_eq {&#10;\find(sr)&#10;\replacewith(tr) &#10;\heuristics(simplify)&#10;Choices: true}] \replacewith([]==&gt;[]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1176] insert_eqv_lr, insert_eqv_lr {&#10;\find(equiv(br,cr)==&gt;)&#10;\addrules [insert_eqv {&#10;\find(br)&#10;\replacewith(cr) &#10;\heuristics(simplify)&#10;Choices: true}] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1177] insert_eqv_once_lr, insert_eqv_once_lr {&#10;\find(equiv(br,cr)==&gt;)&#10;\addrules [insert_eqv {&#10;\find(br)&#10;\replacewith(cr) &#10;Choices: true}] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1178] insert_eqv_once_rl, insert_eqv_once_rl {&#10;\find(equiv(br,cr)==&gt;)&#10;\addrules [insert_eqv {&#10;\find(cr)&#10;\replacewith(br) &#10;Choices: true}] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1179] insert_eqv_rl, insert_eqv_rl {&#10;\find(equiv(br,cr)==&gt;)&#10;\addrules [insert_eqv {&#10;\find(cr)&#10;\replacewith(br) &#10;\heuristics(simplify)&#10;Choices: true}] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1180] instAll, instAll {&#10;\assumes ([all{u (variable)}(b)]==&gt;[]) &#10;\find(t)&#10;\add [subst{u (variable)}(t,b)]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1181] instEx, instEx {&#10;\assumes ([]==&gt;[exists{u (variable)}(b)]) &#10;\find(t)&#10;\add []==&gt;[subst{u (variable)}(t,b)] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1182] instanceCreation, instanceCreation {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #n&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#n (program SimpleInstanceCreation))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#v0) #v0 = create-object(#n);&#10;  constructor-call(#n)&#10;  post-work(#v0)&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1183] instanceCreationAssignment, instanceCreationAssignment {&#10;\find(#normal ( (modal operator))\[{ ..&#10;  #lhs = #n;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#lhs (program LeftHandSide))))&#10;\replacewith(#normal ( (modal operator))\[{ ..&#10;  #typeof(#v0) #v0 = create-object(#n);&#10;  constructor-call(#n)&#10;  post-work(#v0)&#10;  #lhs = #v0;&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1184] instanceCreationAssignmentUnfoldArguments, instanceCreationAssignmentUnfoldArguments {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nsn;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #evaluate-arguments(#lhs = #nsn)&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1185] instanceCreationUnfoldArguments, instanceCreationUnfoldArguments {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #nsn&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #evaluate-arguments(#nsn)&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1186] instanceof_eval, instanceof_eval {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = #nse instanceof #t;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0 = #nse;&#10;  #v = #v0 instanceof #t;&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1187] instanceof_known_dynamic_type, instanceof_known_dynamic_type {&#10;\assumes ([equals(G::exactInstance(a),TRUE)]==&gt;[]) &#10;\find(H::instance(a))&#10;\sameUpdateLevel\varcond(\sub(G, H), )&#10;\replacewith(TRUE) &#10;\heuristics(evaluate_instanceof, simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1188] instanceof_known_dynamic_type_2, instanceof_known_dynamic_type_2 {&#10;\assumes ([equals(G::exactInstance(a),TRUE)]==&gt;[]) &#10;\find(H::instance(a))&#10;\sameUpdateLevel\varcond(\not\sub(G, H), )&#10;\replacewith(FALSE) &#10;\heuristics(evaluate_instanceof, simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1189] instanceof_not_compatible, instanceof_not_compatible {&#10;\find(equals(G::instance(a),TRUE))&#10;\varcond(\sub(Null, G), \disjointModuloNull(G, \typeof(a (any term))), )&#10;\replacewith(equals(a,null)) &#10;\heuristics(evaluate_instanceof, concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1190] instanceof_not_compatible_2, instanceof_not_compatible_2 {&#10;\find(equals(G::instance(a),FALSE))&#10;\varcond(\sub(Null, G), \disjointModuloNull(G, \typeof(a (any term))), )&#10;\replacewith(not(equals(a,null))) &#10;\heuristics(evaluate_instanceof, concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1191] instanceof_not_compatible_3, instanceof_not_compatible_3 {&#10;\find(equals(G::instance(a),TRUE))&#10;\varcond(\not\sub(Null, G), \disjointModuloNull(G, \typeof(a (any term))), )&#10;\replacewith(false) &#10;\heuristics(evaluate_instanceof, concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1192] instanceof_not_compatible_4, instanceof_not_compatible_4 {&#10;\find(equals(G::instance(a),FALSE))&#10;\varcond(\not\sub(Null, G), \disjointModuloNull(G, \typeof(a (any term))), )&#10;\replacewith(true) &#10;\heuristics(evaluate_instanceof, concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1193] instanceof_not_compatible_5, instanceof_not_compatible_5 {&#10;\assumes ([equals(H::instance(a),TRUE)]==&gt;[]) &#10;\find(equals(G::instance(a),TRUE))&#10;\varcond(\sub(Null, G), \disjointModuloNull(G, H), )&#10;\replacewith(equals(a,null)) &#10;\heuristics(evaluate_instanceof, concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1194] instanceof_static_type, instanceof_static_type {&#10;\find(G::instance(a))&#10;\varcond(\sub(\typeof(a (any term)), G), )&#10;\replacewith(TRUE) &#10;\heuristics(evaluate_instanceof, concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1195] instanceof_static_type_2, instanceof_static_type_2 {&#10;\assumes ([equals(a2,a)]==&gt;[]) &#10;\find(G::instance(a))&#10;\sameUpdateLevel\varcond(\sub(\typeof(a2 (any term)), G), )&#10;\replacewith(TRUE) &#10;\heuristics(evaluate_instanceof, concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1196] intDivRem, intDivRem {&#10;\find(jmod(divNum,divDenom))&#10;\add [imp(not(equals(divDenom,Z(0(#)))),equals(divNum,add(mul(jdiv(divNum,divDenom),divDenom),jmod(divNum,divDenom))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1197] intLongToFloatAddition1, intLongToFloatAddition1 {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seLong + #seFloat;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddFloat(float::cast(#seLong),#seFloat)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1198] intToFloatAddition, intToFloatAddition {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = #seCharByteShortInt + #seFloat;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaAddFloat(float::cast(#seCharByteShortInt),#seFloat)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1199] int_diff_minus_eq, int_diff_minus_eq {&#10;\find(sub(i0,neg(i1)))&#10;\replacewith(add(i0,i1)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1200] int_induction, int_induction {&#10;\add [all{nv (variable)}(imp(geq(nv,Z(0(#))),b))]==&gt;[] ;&#10;\add []==&gt;[all{nv (variable)}(imp(and(geq(nv,Z(0(#))),b),subst{nv (variable)}(add(nv,Z(1(#))),b)))] ;&#10;\add []==&gt;[subst{nv (variable)}(Z(0(#)),b)] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1201] intersectAllFieldsFreshLocs, intersectAllFieldsFreshLocs {&#10;\find(equals(intersect(allFields(o),freshLocs(h)),empty))&#10;\replacewith(or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1202] intersectWithAllLocs, intersectWithAllLocs {&#10;\find(intersect(allLocs,s))&#10;\replacewith(s) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1203] intersectWithAllLocsRight, intersectWithAllLocsRight {&#10;\find(intersect(s,allLocs))&#10;\replacewith(s) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1204] intersectWithEmpty, intersectWithEmpty {&#10;\find(intersect(empty,s))&#10;\replacewith(empty) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1205] intersectWithEmptyRight, intersectWithEmptyRight {&#10;\find(intersect(s,empty))&#10;\replacewith(empty) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1206] intersectWithItself, intersectWithItself {&#10;\find(intersect(s,s))&#10;\replacewith(s) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1207] intersectWithSingleton, intersectWithSingleton {&#10;\find(intersect(singleton(o,f),s))&#10;\replacewith(if-then-else(elementOf(o,f,s),singleton(o,f),empty)) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1208] intersectionSetMinusItself, intersectionSetMinusItself {&#10;\find(intersect(setMinus(s1,s2),s2))&#10;\replacewith(empty) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1209] intersectionSetMinusItself_2, intersectionSetMinusItself_2 {&#10;\find(intersect(s2,setMinus(s1,s2)))&#10;\replacewith(empty) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1210] introduceAxiom, introduceAxiom {&#10;\add [cutFormula]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1211] irrflConcrete1, irrflConcrete1 {&#10;\find(lt(i,i)==&gt;)&#10;\replacewith([false]==&gt;[]) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1212] irrflConcrete2, irrflConcrete2 {&#10;\find(gt(i,i)==&gt;)&#10;\replacewith([false]==&gt;[]) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1213] isFiniteOfMapEmpty, isFiniteOfMapEmpty {&#10;\find(isFinite(mapEmpty))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1214] isFiniteOfMapRemove, isFiniteOfMapRemove {&#10;\find(isFinite(mapRemove(m,key)))&#10;\sameUpdateLevel\replacewith(isFinite(m)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1215] isFiniteOfMapSingleton, isFiniteOfMapSingleton {&#10;\find(isFinite(mapSingleton(key,value)))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1216] isFiniteOfMapUpdate, isFiniteOfMapUpdate {&#10;\find(isFinite(mapUpdate(m,key,value)))&#10;\sameUpdateLevel\replacewith(isFinite(m)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1217] isFiniteOfSeq2Map, isFiniteOfSeq2Map {&#10;\find(isFinite(seq2map(s)))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1218] iterated_assignments_0, iterated_assignments_0 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 = #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = #e;&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1219] iterated_assignments_1, iterated_assignments_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 *= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 * #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1220] iterated_assignments_10, iterated_assignments_10 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 |= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 | #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1221] iterated_assignments_11, iterated_assignments_11 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 ^= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 ^ #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1222] iterated_assignments_2, iterated_assignments_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 /= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 / #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1223] iterated_assignments_3, iterated_assignments_3 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 %= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 % #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1224] iterated_assignments_4, iterated_assignments_4 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 += #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 + #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1225] iterated_assignments_5, iterated_assignments_5 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 -= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 - #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1226] iterated_assignments_6, iterated_assignments_6 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 &lt;&lt;= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 &lt;&lt; #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[1227] iterated_assignments_7, iterated_assignments_7 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 &gt;&gt;= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 &gt;&gt; #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1228] iterated_assignments_8, iterated_assignments_8 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 &gt;&gt;&gt;= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 &gt;&gt;&gt; #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1229] iterated_assignments_9, iterated_assignments_9 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1 &amp;= #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 &amp; #e);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1230] javaShiftLeftIntDef, javaShiftLeftIntDef {&#10;\find(shiftleftJint(left,right))&#10;\replacewith(moduloInt(shiftleft(left,mod(right,Z(2(3(#))))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1231] javaShiftLeftLongDef, javaShiftLeftLongDef {&#10;\find(shiftleftJlong(left,right))&#10;\replacewith(moduloLong(shiftleft(left,mod(right,Z(4(6(#))))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1232] javaShiftRightIntDef, javaShiftRightIntDef {&#10;\find(shiftrightJint(left,right))&#10;\replacewith(moduloInt(shiftright(left,mod(right,Z(2(3(#))))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1233] javaShiftRightLongDef, javaShiftRightLongDef {&#10;\find(shiftrightJlong(left,right))&#10;\replacewith(moduloLong(shiftright(left,mod(right,Z(4(6(#))))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1234] jdivAddMultDenom, jdivAddMultDenom {&#10;\add [all{N (variable)}(all{D (variable)}(all{A (variable)}(imp(not(equals(D,Z(0(#)))),equals(jdiv(add(N,mul(A,D)),D),if-then-else(equals(N,mul(jdiv(N,D),D)),add(jdiv(N,D),A),if-then-else(and(not(equals(N,mul(jdiv(N,D),D))),equiv(geq(N,Z(0(#))),geq(add(N,mul(D,A)),Z(0(#))))),add(jdiv(N,D),A),if-then-else(and(and(not(equals(N,mul(jdiv(N,D),D))),equiv(geq(N,Z(0(#))),lt(add(N,mul(D,A)),Z(0(#))))),equiv(gt(D,Z(0(#))),lt(add(N,mul(D,A)),Z(0(#))))),add(add(jdiv(N,D),A),Z(1(#))),sub(add(jdiv(N,…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1235] jdivMultDenom1, jdivMultDenom1 {&#10;\find(jdiv(mul(divDenom,cfac),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(cfac) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1236] jdivMultDenom2, jdivMultDenom2 {&#10;\find(jdiv(mul(cfac,divDenom),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(cfac) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1237] jdivPulloutMinusDenom, jdivPulloutMinusDenom {&#10;\find(jdiv(divNum,neg(divDenom)))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(neg(jdiv(divNum,divDenom))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1238] jdivPulloutMinusNum, jdivPulloutMinusNum {&#10;\find(jdiv(neg(divNum),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(neg(jdiv(divNum,divDenom))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1239] jdiv_axiom, jdiv_axiom {&#10;\find(jdiv(divNum,divDenom))&#10;\sameUpdateLevel\add [equals(jdiv(divNum,divDenom),if-then-else(geq(divNum,Z(0(#))),div(divNum,divDenom),mul(div(mul(divNum,Z(neglit(1(#)))),divDenom),Z(neglit(1(#))))))]==&gt;[] &#10;\heuristics(notHumanReadable, defOps_jdiv)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1240] jdiv_axiom_inline, jdiv_axiom_inline {&#10;\find(jdiv(divNum,divDenom))&#10;\replacewith(if-then-else(geq(divNum,Z(0(#))),div(divNum,divDenom),mul(div(mul(divNum,Z(neglit(1(#)))),divDenom),Z(neglit(1(#)))))) &#10;\heuristics(notHumanReadable, defOps_jdiv_inline)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1241] jdiv_one, jdiv_one {&#10;\find(jdiv(divNum,Z(1(#))))&#10;\replacewith(divNum) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1242] jdiv_uniqueNegNeg, jdiv_uniqueNegNeg {&#10;\find(jdiv(divNum,divDenom))&#10;\add [all{a (variable)}(all{cnom (variable)}(all{x (variable)}(all{y (variable)}(imp(and(and(and(and(and(lt(a,Z(0(#))),lt(cnom,Z(0(#)))),geq(mul(x,cnom),a)),geq(mul(y,cnom),a)),lt(mul(add(x,Z(1(#))),cnom),a)),lt(mul(add(y,Z(1(#))),cnom),a)),equals(x,y))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1243] jdiv_uniqueNegPos, jdiv_uniqueNegPos {&#10;\find(jdiv(divNum,divDenom))&#10;\add [all{a (variable)}(all{cnom (variable)}(all{x (variable)}(all{y (variable)}(imp(and(and(and(and(and(lt(a,Z(0(#))),gt(cnom,Z(0(#)))),geq(mul(x,cnom),a)),geq(mul(y,cnom),a)),lt(mul(sub(x,Z(1(#))),cnom),a)),lt(mul(sub(y,Z(1(#))),cnom),a)),equals(x,y))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1244] jdiv_uniquePosNeg, jdiv_uniquePosNeg {&#10;\find(jdiv(divNum,divDenom))&#10;\add [all{a (variable)}(all{cnom (variable)}(all{x (variable)}(all{y (variable)}(imp(and(and(and(and(and(geq(a,Z(0(#))),lt(cnom,Z(0(#)))),leq(mul(x,cnom),a)),leq(mul(y,cnom),a)),gt(mul(sub(x,Z(1(#))),cnom),a)),gt(mul(sub(y,Z(1(#))),cnom),a)),equals(x,y))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1245] jdiv_uniquePosPos, jdiv_uniquePosPos {&#10;\find(jdiv(divNum,divDenom))&#10;\add [all{a (variable)}(all{cnom (variable)}(all{x (variable)}(all{y (variable)}(imp(and(and(and(and(and(geq(a,Z(0(#))),gt(cnom,Z(0(#)))),leq(mul(x,cnom),a)),leq(mul(y,cnom),a)),gt(mul(add(x,Z(1(#))),cnom),a)),gt(mul(add(y,Z(1(#))),cnom),a)),equals(x,y))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1246] jdiv_zero, jdiv_zero {&#10;\find(jdiv(Z(0(#)),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1247] jmodAddMultDenomZero, jmodAddMultDenomZero {&#10;\find(equals(jmod(add(N,mul(A,D)),D),Z(0(#))))&#10;\sameUpdateLevel\add []==&gt;[not(equals(D,Z(0(#))))] ;&#10;\replacewith(equals(jmod(N,D),Z(0(#)))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1248] jmodAltZero, jmodAltZero {&#10;\add [all{N (variable)}(all{D (variable)}(imp(not(equals(D,Z(0(#)))),equiv(equals(jmod(N,D),Z(0(#))),exists{A (variable)}(equals(N,mul(A,D)))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1249] jmodDivisible, jmodDivisible {&#10;\add [all{D (variable)}(all{A (variable)}(imp(not(equals(D,Z(0(#)))),equals(jmod(mul(D,A),D),Z(0(#))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1250] jmodDivisibleRep, jmodDivisibleRep {&#10;\find(jmod(mul(D,A),D))&#10;\add []==&gt;[not(equals(D,Z(0(#))))] ;&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1251] jmodNumZero, jmodNumZero {&#10;\find(jmod(Z(0(#)),divDenom))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1252] jmodUnique1, jmodUnique1 {&#10;\add [all{a (variable)}(all{deb (variable)}(all{cmod (variable)}(imp(and(and(and(and(geq(a,Z(0(#))),not(equals(deb,Z(0(#))))),leq(Z(0(#)),cmod)),lt(cmod,if-then-else(gt(deb,Z(0(#))),deb,neg(deb)))),exists{x (variable)}(equals(a,add(mul(deb,x),cmod)))),equals(cmod,jmod(a,deb))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1253] jmodUnique2, jmodUnique2 {&#10;\add [all{a (variable)}(all{deb (variable)}(all{cmod (variable)}(imp(and(and(and(and(leq(a,Z(0(#))),not(equals(deb,Z(0(#))))),lt(neg(cmod),if-then-else(gt(deb,Z(0(#))),deb,neg(deb)))),leq(cmod,Z(0(#)))),exists{x (variable)}(equals(a,add(mul(deb,x),cmod)))),equals(cmod,jmod(a,deb))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1254] jmod_NumNeg, jmod_NumNeg {&#10;\find(jmod(divNum,divDenom))&#10;\add [imp(and(not(equals(divDenom,Z(0(#)))),leq(divNum,Z(0(#)))),gt(jmod(divNum,divDenom),if-then-else(geq(divDenom,Z(0(#))),neg(divDenom),divDenom)))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1255] jmod_NumPos, jmod_NumPos {&#10;\find(jmod(divNum,divDenom))&#10;\add [imp(and(not(equals(divDenom,Z(0(#)))),geq(divNum,Z(0(#)))),lt(jmod(divNum,divDenom),if-then-else(geq(divDenom,Z(0(#))),divDenom,neg(divDenom))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1256] jmod_axiom, jmod_axiom {&#10;\find(jmod(divNum,divDenom))&#10;\replacewith(add(divNum,mul(mul(jdiv(divNum,divDenom),Z(neglit(1(#)))),divDenom))) &#10;\heuristics(notHumanReadable, defOps_mod)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1257] jmod_geZero, jmod_geZero {&#10;\find(jmod(divNum,divDenom))&#10;\add [imp(not(equals(divDenom,Z(0(#)))),leq(Z(0(#)),if-then-else(geq(divNum,Z(0(#))),jmod(divNum,divDenom),neg(jmod(divNum,divDenom)))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1258] jmod_pulloutminusDenom, jmod_pulloutminusDenom {&#10;\find(jmod(divNum,neg(divDenom)))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(jmod(divNum,divDenom)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1259] jmod_pulloutminusNum, jmod_pulloutminusNum {&#10;\find(jmod(neg(divNum),divDenom))&#10;\add []==&gt;[not(equals(divDenom,Z(0(#))))] ;&#10;\replacewith(neg(jmod(divNum,divDenom))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1260] jmodjmod, jmodjmod {&#10;\add [all{N (variable)}(all{D1 (variable)}(all{D2 (variable)}(imp(and(and(and(not(equals(D1,Z(0(#)))),not(equals(D2,Z(0(#))))),equals(jmod(D1,D2),Z(0(#)))),equiv(geq(D1,Z(0(#))),geq(D2,Z(0(#))))),equals(jmod(N,D2),jmod(jmod(N,D1),D2))))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1261] lastIndexOf, lastIndexOf {&#10;\find(clLastIndexOfChar(sourceStr,c,i))&#10;\varcond(\notFreeIn(iv (variable), sourceStr (Seq term)), \notFreeIn(iv (variable), i (int term)), \notFreeIn(iv (variable), c (int term)))&#10;\replacewith(ifExThenElse{iv (variable)}(and(and(and(gt(iv,Z(0(#))),geq(i,iv)),lt(sub(i,iv),seqLen(sourceStr))),equals(int::seqGet(sourceStr,sub(i,iv)),c)),sub(i,iv),Z(neglit(1(#))))) &#10;\heuristics(stringsExpandDefNormalOp)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1262] lastIndexOfStr, lastIndexOfStr {&#10;\find(clLastIndexOfCl(sourceStr,i,searchStr))&#10;\varcond(\notFreeIn(iv (variable), sourceStr (Seq term)), \notFreeIn(iv (variable), i (int term)), \notFreeIn(iv (variable), searchStr (Seq term)))&#10;\replacewith(ifExThenElse{iv (variable)}(and(and(and(gt(iv,Z(0(#))),geq(sub(i,iv),Z(0(#)))),leq(sub(add(seqLen(searchStr),i),iv),seqLen(sourceStr))),equals(seqSub(sourceStr,sub(i,iv),sub(add(seqLen(searchStr),i),iv)),searchStr)),sub(i,iv),Z(neglit(1(#))))) &#10;\heuristics(stringsExpandDefNormalOp)&#10;Choi…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1263] le1_add1_eq_le, le1_add1_eq_le {&#10;\find(lt(i0,add(i1,Z(1(#)))))&#10;\replacewith(leq(i0,i1)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1264] left_add_mult_distrib, left_add_mult_distrib {&#10;\find(add(mul(i0,i1),add(mul(i2,i1),i3)))&#10;\replacewith(add(mul(add(i0,i2),i1),i3)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1265] lenNonNegative, lenNonNegative {&#10;\find(seqLen(seq))&#10;\sameUpdateLevel\add [leq(Z(0(#)),seqLen(seq))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1266] lenOfArray2seq, lenOfArray2seq {&#10;\find(seqLen(array2seq(h,a)))&#10;\replacewith(length(a)) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1267] lenOfSeqConcat, lenOfSeqConcat {&#10;\find(seqLen(seqConcat(seq,seq2)))&#10;\replacewith(add(seqLen(seq),seqLen(seq2))) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1268] lenOfSeqConcatEQ, lenOfSeqConcatEQ {&#10;\assumes ([equals(seqConcat(seq,seq2),EQ)]==&gt;[]) &#10;\find(seqLen(EQ))&#10;\sameUpdateLevel\replacewith(add(seqLen(seq),seqLen(seq2))) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1269] lenOfSeqDef, lenOfSeqDef {&#10;\find(seqLen(seqDef{uSub (variable)}(from,to,t)))&#10;\replacewith(if-then-else(lt(from,to),sub(to,from),Z(0(#)))) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1270] lenOfSeqDefEQ, lenOfSeqDefEQ {&#10;\assumes ([equals(seqDef{uSub (variable)}(from,to,t),EQ)]==&gt;[]) &#10;\find(seqLen(EQ))&#10;\sameUpdateLevel\replacewith(if-then-else(leq(from,to),sub(to,from),Z(0(#)))) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1271] lenOfSeqEmpty, lenOfSeqEmpty {&#10;\find(seqLen(seqEmpty))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1272] lenOfSeqEmptyEQ, lenOfSeqEmptyEQ {&#10;\assumes ([equals(seqEmpty,EQ)]==&gt;[]) &#10;\find(seqLen(EQ))&#10;\sameUpdateLevel\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1273] lenOfSeqReverse, lenOfSeqReverse {&#10;\find(seqLen(seqReverse(seq)))&#10;\replacewith(seqLen(seq)) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1274] lenOfSeqReverseEQ, lenOfSeqReverseEQ {&#10;\assumes ([equals(seqReverse(seq),EQ)]==&gt;[]) &#10;\find(seqLen(EQ))&#10;\sameUpdateLevel\replacewith(seqLen(seq)) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1275] lenOfSeqSingleton, lenOfSeqSingleton {&#10;\find(seqLen(seqSingleton(x)))&#10;\replacewith(Z(1(#))) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1276] lenOfSeqSingletonEQ, lenOfSeqSingletonEQ {&#10;\assumes ([equals(seqSingleton(x),EQ)]==&gt;[]) &#10;\find(seqLen(EQ))&#10;\sameUpdateLevel\replacewith(Z(1(#))) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1277] lenOfSeqSub, lenOfSeqSub {&#10;\find(seqLen(seqSub(seq,from,to)))&#10;\replacewith(if-then-else(lt(from,to),sub(to,from),Z(0(#)))) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1278] lenOfSeqSubEQ, lenOfSeqSubEQ {&#10;\assumes ([equals(seqSub(seq,from,to),EQ)]==&gt;[]) &#10;\find(seqLen(EQ))&#10;\sameUpdateLevel\replacewith(if-then-else(lt(from,to),sub(to,from),Z(0(#)))) &#10;\heuristics(find_term_not_in_assumes, simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1279] lengthReplace, lengthReplace {&#10;\find(seqLen(clReplace(str,searchChar,replaceChar)))&#10;\replacewith(seqLen(str)) &#10;\heuristics(stringsSimplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1280] lengthReplaceEQ, lengthReplaceEQ {&#10;\assumes ([equals(clReplace(str,searchChar,replaceChar),newStr)]==&gt;[]) &#10;\find(seqLen(newStr))&#10;\sameUpdateLevel\replacewith(seqLen(str)) &#10;\heuristics(stringsSimplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1281] leq_add, leq_add {&#10;\find(==&gt;leq(i0,i1))&#10;\varcond(\notFreeIn(j2 (variable), i1 (int term)), \notFreeIn(j2 (variable), i0 (int term)))&#10;\replacewith([]==&gt;[exists{j2 (variable)}(leq(add(i0,j2),add(i1,j2)))]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1282] leq_add_iff1, leq_add_iff1 {&#10;\find(leq(add(mul(i0,i1),i2),add(mul(i3,i1),i4)))&#10;\replacewith(leq(add(mul(sub(i0,i3),i1),i2),i4)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1283] leq_add_iff2, leq_add_iff2 {&#10;\find(leq(add(mul(i0,i1),i2),add(mul(i3,i1),i4)))&#10;\replacewith(leq(i2,add(mul(sub(i3,i0),i1),i4))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1284] leq_add_one, leq_add_one {&#10;\find(leq(i0,i1))&#10;\replacewith(leq(add(i0,Z(1(#))),add(i1,Z(1(#))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1285] leq_diff1_eq, leq_diff1_eq {&#10;\find(leq(i0,sub(i1,Z(1(#)))))&#10;\replacewith(lt(i0,i1)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1286] leq_diff_1, leq_diff_1 {&#10;\find(leq(i0,add(i0,Z(1(#)))))&#10;\replacewith(true) &#10;\heuristics(int_arithmetic)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1287] leq_iff_diff_leq_0, leq_iff_diff_leq_0 {&#10;\find(leq(i0,i1))&#10;\replacewith(leq(sub(i0,i1),Z(0(#)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1288] leq_literals, leq_literals {&#10;\find(leq(Z(iz),Z(jz)))&#10;\replacewith(#leq(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1289] leq_to_geq, leq_to_geq {&#10;\find(leq(i,i0))&#10;\replacewith(geq(i0,i)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1290] leq_to_gt, leq_to_gt {&#10;\find(leq(i,j))&#10;\replacewith(not(gt(i,j))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1291] leq_to_gt_alt, leq_to_gt_alt {&#10;\find(leq(i,j))&#10;\replacewith(or(lt(i,j),equals(i,j))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1292] leq_trans, leq_trans {&#10;\assumes ([leq(i,i0)]==&gt;[]) &#10;\find(leq(i0,i1)==&gt;)&#10;\add [leq(i,i1)]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1293] less_1_mult, less_1_mult {&#10;\find(and(lt(Z(1(#)),i0),lt(Z(1(#)),i1)))&#10;\replacewith(lt(Z(1(#)),mul(i0,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1294] less_add, less_add {&#10;\find(==&gt;lt(i0,i1))&#10;\varcond(\notFreeIn(j2 (variable), i1 (int term)), \notFreeIn(j2 (variable), i0 (int term)))&#10;\replacewith([]==&gt;[exists{j2 (variable)}(lt(add(i0,j2),add(i1,j2)))]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1295] less_add_iff1, less_add_iff1 {&#10;\find(lt(add(mul(i0,i1),i2),add(mul(i3,i1),i4)))&#10;\replacewith(lt(add(mul(sub(i0,i3),i1),i2),i4)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1296] less_add_iff2, less_add_iff2 {&#10;\find(lt(add(mul(i0,i1),i2),add(mul(i3,i1),i4)))&#10;\replacewith(lt(i2,add(mul(sub(i3,i0),i1),i4))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1297] less_add_one, less_add_one {&#10;\find(lt(i0,i1))&#10;\replacewith(lt(add(i0,Z(1(#))),add(i1,Z(1(#))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1298] less_base, less_base {&#10;\find(lt(i,i))&#10;\replacewith(false) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1299] less_equal_than_comparison_new, less_equal_than_comparison_new {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 &lt;= #senf1;&#10;... }\] (post))&#10;\replacewith(if-then-else(leq(#senf0,#senf1),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;... }\] (post),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = false;&#10;... }\] (post))) &#10;\heuristics(split_if, simplify_prog, obsolete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1300] less_equal_than_comparison_simple, less_equal_than_comparison_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 &lt;= #senf1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(leq(#senf0,#senf1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1301] less_equal_than_comparison_simple_double, less_equal_than_comparison_simple_double {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seDouble0 &lt;= #seDouble1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(leqDouble(#seDouble0,#seDouble1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1302] less_equal_than_comparison_simple_float, less_equal_than_comparison_simple_float {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seFloat0 &lt;= #seFloat1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(leqFloat(#seFloat0,#seFloat1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1303] less_iff_diff_less_0, less_iff_diff_less_0 {&#10;\find(lt(i0,i1))&#10;\replacewith(lt(sub(i0,i1),Z(0(#)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1304] less_is_alternative_1, less_is_alternative_1 {&#10;\assumes ([lt(i,i0),lt(i0,i)]==&gt;[]) &#10;\closegoal&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1305] less_is_alternative_2, less_is_alternative_2 {&#10;\assumes ([]==&gt;[lt(i,i0)]) &#10;\find(==&gt;lt(i0,i))&#10;\add [equals(i,i0)]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1306] less_is_total, less_is_total {&#10;\find(i)&#10;\sameUpdateLevel\add [lt(i0,i)]==&gt;[] ;&#10;\add [equals(i,i0)]==&gt;[] ;&#10;\add [lt(i,i0)]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1307] less_is_total_heu, less_is_total_heu {&#10;\assumes ([]==&gt;[lt(i,i0),equals(i,i0),lt(i0,i)]) &#10;\closegoal&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1308] less_literals, less_literals {&#10;\find(lt(Z(iz),Z(jz)))&#10;\replacewith(#less(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1309] less_neg, less_neg {&#10;\find(lt(i,i0))&#10;\replacewith(not(lt(i0,add(i,Z(1(#)))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1310] less_plus, less_plus {&#10;\find(lt(Z(0(#)),add(i0,i1)))&#10;\replacewith(lt(neg(i0),i1)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1311] less_sub, less_sub {&#10;\find(lt(i,i0))&#10;\replacewith(lt(neg(i0),neg(i))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1312] less_than_comparison_new, less_than_comparison_new {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 &lt; #senf1;&#10;... }\] (post))&#10;\replacewith(if-then-else(lt(#senf0,#senf1),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;... }\] (post),#allmodal ( (modal operator))\[{ ..&#10;  #lhs = false;&#10;... }\] (post))) &#10;\heuristics(split_if, simplify_prog, obsolete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1313] less_than_comparison_simple, less_than_comparison_simple {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #senf0 &lt; #senf1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(lt(#senf0,#senf1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1314] less_than_comparison_simple_double, less_than_comparison_simple_double {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seDouble0 &lt; #seDouble1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(ltDouble(#seDouble0,#seDouble1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1315] less_than_comparison_simple_float, less_than_comparison_simple_float {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seFloat0 &lt; #seFloat1;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(if-then-else(ltFloat(#seFloat0,#seFloat1),TRUE,FALSE)),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1316] less_trans, less_trans {&#10;\assumes ([lt(i,i0)]==&gt;[]) &#10;\find(lt(i0,i1)==&gt;)&#10;\add [lt(i,i1)]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1317] less_zero_is_total, less_zero_is_total {&#10;\find(i)&#10;\sameUpdateLevel\add [lt(Z(0(#)),i)]==&gt;[] ;&#10;\add [equals(i,Z(0(#)))]==&gt;[] ;&#10;\add [lt(i,Z(0(#)))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1318] local_cut, local_cut {&#10;\find(phi)&#10;\replacewith(and(or(not(psi),phi),or(psi,phi))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1319] log1Concrete, log1Concrete {&#10;\find(log(base,Z(1(#))))&#10;\replacewith(if-then-else(gt(base,Z(1(#))),Z(0(#)),undefinedLog(base,Z(1(#))))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1320] logDefinition, logDefinition {&#10;\find(log(base,x))&#10;\replacewith(if-then-else(and(geq(x,Z(1(#))),gt(base,Z(1(#)))),if-then-else(lt(x,base),Z(0(#)),add(Z(1(#)),log(base,div(x,base)))),undefinedLog(base,x))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1321] logLessThanPow, logLessThanPow {&#10;\find(lt(log(base,x),exp))&#10;\add [imp(and(and(and(gt(base,Z(1(#))),geq(x,Z(1(#)))),lt(x,pow(base,exp))),geq(exp,Z(1(#)))),lt(log(base,x),exp))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1322] logLessThanPowConcrete, logLessThanPowConcrete {&#10;\find(==&gt;lt(log(base,x),exp))&#10;\add []==&gt;[and(and(and(gt(base,Z(1(#))),geq(x,Z(1(#)))),lt(x,pow(base,exp))),geq(exp,Z(1(#))))] &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1323] logMono, logMono {&#10;\find(leq(log(base,x),log(base,x_2)))&#10;\add [imp(and(and(geq(x,Z(1(#))),geq(x_2,x)),gt(base,Z(1(#)))),leq(log(base,x),log(base,x_2)))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1324] logMonoConcrete, logMonoConcrete {&#10;\find(leq(log(base,x_2),add(Z(neglit(1(#))),log(base,x)))==&gt;)&#10;\add []==&gt;[and(and(geq(x,Z(1(#))),geq(x_2,x)),gt(base,Z(1(#))))] &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1325] logPositive, logPositive {&#10;\find(log(base,x))&#10;\add [imp(and(gt(base,Z(1(#))),geq(x,Z(1(#)))),geq(log(base,x),Z(0(#))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1326] logPositiveConcrete, logPositiveConcrete {&#10;\find(leq(log(base,x),Z(neglit(1(#))))==&gt;)&#10;\add []==&gt;[and(gt(base,Z(1(#))),geq(x,Z(1(#))))] &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1327] logPowIdentity, logPowIdentity {&#10;\find(log(base,x))&#10;\varcond(\notFreeIn(i (variable), base (int term)), \notFreeIn(i (variable), x (int term)))&#10;\add [imp(gt(base,Z(1(#))),all{i (variable)}(imp(geq(i,Z(0(#))),equals(log(base,pow(base,i)),i))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1328] logPowIdentityConcrete, logPowIdentityConcrete {&#10;\find(log(base,pow(base,exp)))&#10;\replacewith(if-then-else(gt(base,Z(1(#))),if-then-else(geq(exp,Z(0(#))),exp,log(base,undefinedPow(base,exp))),undefinedLog(base,pow(base,exp)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1329] logProdIdentity, logProdIdentity {&#10;\find(log(base,bprod{i (variable)}(Z(0(#)),exp,base)))&#10;\varcond(\notFreeIn(i (variable), base (int term)), \notFreeIn(i (variable), exp (int term)))&#10;\add [imp(and(geq(exp,Z(0(#))),gt(base,Z(1(#)))),equals(log(base,bprod{i (variable)}(Z(0(#)),exp,base)),exp))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1330] logProdIdentityConcrete, logProdIdentityConcrete {&#10;\find(log(base,bprod{i (variable)}(Z(0(#)),exp,base)))&#10;\varcond(\notFreeIn(i (variable), base (int term)), \notFreeIn(i (variable), exp (int term)))&#10;\replacewith(if-then-else(gt(base,Z(1(#))),if-then-else(lt(exp,Z(0(#))),Z(0(#)),exp),undefinedLog(base,bprod{i (variable)}(Z(0(#)),exp,base)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1331] logProduct, logProduct {&#10;\find(log(base,mul(x,base)))&#10;\add [imp(and(geq(x,Z(1(#))),gt(base,Z(1(#)))),equals(log(base,mul(x,base)),add(log(base,x),Z(1(#)))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1332] logSelfConcrete, logSelfConcrete {&#10;\find(log(base,base))&#10;\replacewith(if-then-else(gt(base,Z(1(#))),Z(1(#)),undefinedLog(base,base))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1333] logSqueeze, logSqueeze {&#10;\find(equals(log(base,x),exp))&#10;\add [imp(and(and(and(and(gt(base,Z(1(#))),geq(x,Z(1(#)))),geq(x,pow(base,exp))),lt(x,pow(base,add(exp,Z(1(#)))))),geq(exp,Z(0(#)))),equals(log(base,x),exp))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1334] logTimesBaseConcrete, logTimesBaseConcrete {&#10;\find(log(base,mul(x,base)))&#10;\replacewith(if-then-else(and(geq(x,Z(1(#))),gt(base,Z(1(#)))),add(log(base,x),Z(1(#))),undefinedLog(base,mul(x,base)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1335] loopScopeInvBox, loopScopeInvBox {&#10;\find(#box ( (modal operator))\[{ ..&#10;  while (#nse) #body&#10;... }\] (post))&#10;\varcond(\new(#permissionsBefore_LOOP (program Variable), KeYJavaType:null,Heap), \new(#savedHeapBefore_LOOP (program Variable), KeYJavaType:null,Heap), \new(#heapBefore_LOOP (program Variable), KeYJavaType:null,Heap), \new(#x (program Variable), (type, sort): (boolean,boolean)), \varcond (\storeTermIn(loopFormula (formula), #box ( (modal operator))\[{&#10;  while (#nse) #body&#10;}\] (post))), \varcond (\storeStmtIn(#loopS…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1336] loopScopeInvDia, loopScopeInvDia {&#10;\find(#dia ( (modal operator))\[{ ..&#10;  while (#nse) #body&#10;... }\] (post))&#10;\varcond(\new(#permissionsBefore_LOOP (program Variable), KeYJavaType:null,Heap), \new(#savedHeapBefore_LOOP (program Variable), KeYJavaType:null,Heap), \new(#heapBefore_LOOP (program Variable), KeYJavaType:null,Heap), \new(#variant (program Variable), KeYJavaType:null,any), \new(#x (program Variable), (type, sort): (boolean,boolean)), \varcond (\storeTermIn(loopFormula (formula), #dia ( (modal operator))\[{&#10;  while…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1337] loopUnwind, loopUnwind {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  while (#e) #s&#10;... }\] (post))&#10;\varcond(\newLabel (#innerLabel (program Label)), \newLabel (#outerLabel (program Label)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #unwind-loop(while (#e) #s)&#10;... }\] (post)) &#10;\heuristics(loop_expand)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1338] lsBreak, lsBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  loop-scope (#lhs) {&#10;    break;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1339] lsContinue, lsContinue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  loop-scope (#lhs) {&#10;    continue;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(FALSE),post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1340] lsLblBreak, lsLblBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  loop-scope (#lhs) {&#10;    break;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #lhs = true;&#10;    break;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1341] lsLblContinueMatch, lsLblContinueMatch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb:&#10;  loop-scope (#lhs) {&#10;    continue;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#lhs (program LeftHandSide))(FALSE),post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1342] lsLblContinueNoMatch1, lsLblContinueNoMatch1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  loop-scope (#lhs) {&#10;    continue;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\varcond(\varcond (\storeStmtIn(#lsStmt (program Statement), #allmodal ( (modal operator))\[{&#10;  loop-scope (#lhs) {&#10;    continue;&#10;    #slist&#10;  }&#10;}\] (post))), \varcond (\not\isLabeled(#lsStmt (program Statement)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;  continue;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1343] lsLblContinueNoMatch2, lsLblContinueNoMatch2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb1:&#10;  loop-scope (#lhs) {&#10;    continue;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\varcond(\different (#lb1 (program Label), #lb (program Label)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;  continue;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1344] lsReturnNonVoid, lsReturnNonVoid {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  loop-scope (#lhs) {&#10;    return #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;  return #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1345] lsReturnVoid, lsReturnVoid {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  loop-scope (#lhs) {&#10;    return;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;  return;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1346] lsThrow, lsThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  loop-scope (#lhs) {&#10;    throw #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = true;&#10;  throw #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1347] lt_diff_1, lt_diff_1 {&#10;\find(lt(i0,add(i0,Z(1(#)))))&#10;\replacewith(true) &#10;\heuristics(int_arithmetic)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1348] lt_to_gt, lt_to_gt {&#10;\find(lt(i,i0))&#10;\replacewith(gt(i0,i)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1349] lt_to_leq_1, lt_to_leq_1 {&#10;\find(or(lt(i,j),equals(i,j)))&#10;\replacewith(leq(i,j)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1350] lt_to_leq_2, lt_to_leq_2 {&#10;\assumes ([]==&gt;[lt(i,j)]) &#10;\find(==&gt;equals(i,j))&#10;\replacewith([]==&gt;[leq(i,j)]) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1351] make_insert_eq, make_insert_eq {&#10;\find(equals(sr,tr)==&gt;)&#10;\addrules [insert_eq {&#10;\find(sr)&#10;\replacewith(tr) &#10;Choices: true}] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1352] make_insert_eq_nonrigid, make_insert_eq_nonrigid {&#10;\find(equals(s,t)==&gt;)&#10;\addrules [insert_eq_nonrigid {&#10;\find(s)&#10;\sameUpdateLevel\replacewith(t) &#10;Choices: true}] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1353] mapEqualityRight, mapEqualityRight {&#10;\find(==&gt;equals(m0,m1))&#10;\varcond(\notFreeIn(vy (variable), m1 (Map term)), \notFreeIn(vy (variable), m0 (Map term)))&#10;\replacewith([]==&gt;[all{vy (variable)}(and(equiv(inDomain(m0,vy),inDomain(m1,vy)),imp(inDomain(m0,vy),equals(mapGet(m0,vy),mapGet(m1,vy)))))]) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1354] mapRemoveUnchanged, mapRemoveUnchanged {&#10;\find(equals(m,mapRemove(m,key)))&#10;\replacewith(not(inDomain(m,key))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1355] mapRemoveUnchanged2, mapRemoveUnchanged2 {&#10;\find(equals(mapRemove(m,key),m))&#10;\replacewith(not(inDomain(m,key))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1356] mapSizeNotNegativeForFiniteMaps, mapSizeNotNegativeForFiniteMaps {&#10;\find(mapSize(m))&#10;\add [imp(isFinite(m),geq(mapSize(m),Z(0(#))))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1357] mapUpdateUnchanged, mapUpdateUnchanged {&#10;\find(equals(m,mapUpdate(m,key,value)))&#10;\replacewith(and(inDomain(m,key),equals(mapGet(m,key),value))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1358] mapUpdateUnchanged2, mapUpdateUnchanged2 {&#10;\find(equals(mapUpdate(m,key,value),m))&#10;\replacewith(and(inDomain(m,key),equals(mapGet(m,key),value))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1359] maxAxiom, maxAxiom {&#10;\find(equals(max{x (variable)}(b,t),t2)==&gt;)&#10;\varcond(\notFreeIn(y (variable), t2 (int term)), \notFreeIn(y (variable), t (int term)), \notFreeIn(y (variable), b (boolean term)), \notFreeIn(x (variable), t2 (int term)))&#10;\add []==&gt;[exists{x (variable)}(and(equals(b,TRUE),all{y (variable)}(imp(equals(subst{x (variable)}(y,b),TRUE),leq(subst{x (variable)}(y,t),t)))))] ;&#10;\add [and(all{y (variable)}(subst{x (variable)}(y,imp(equals(b,TRUE),leq(t,t2)))),exists{y (variable)}(subst{x (variable)}(y,and(eq…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1360] measuredByCheck, measuredByCheck {&#10;\assumes ([measuredBy(m)]==&gt;[]) &#10;\find(measuredByCheck(c))&#10;\sameUpdateLevel\replacewith(prec(c,m)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1361] measuredByCheckEmpty, measuredByCheckEmpty {&#10;\assumes ([measuredByEmpty]==&gt;[]) &#10;\find(measuredByCheck(c))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1362] memsetEmpty, memsetEmpty {&#10;\find(memset(h,empty,x))&#10;\replacewith(h) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1363] methodBodyExpand, methodBodyExpand {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #mb&#10;... }\] (post))&#10;\replacewith(#introAtPreDefs(#allmodal ( (modal operator))\[{ ..&#10;  expand-method-body(#mb)&#10;... }\] (post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1364] methodCall, methodCall {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #se.#mn(#selist);&#10;... }\] (post))&#10;\varcond(\not \staticMethodReference(#se (program SimpleExpression), #mn (program MethodName), #selist (program SimpleExpression)), \mayExpandMethod(#se (program SimpleExpression), #mn (program MethodName), #selist (program SimpleExpression)), )&#10;\add [equals(#se,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[#allmodal ( (modal operator))\[{ ..&#10;  method-call(#se.#mn(#selist))&#10;... }\] (post)]) &#10;\heurist…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.016"/>
  <testcase name="[1365] methodCallEmpty, methodCallEmpty {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  method-frame (#ex) {}&#10;... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1366] methodCallEmptyNoreturnBox, methodCallEmptyNoreturnBox {&#10;\find(\[{ ..&#10;  method-frame (result-&gt;#v0, #ex) {}&#10;... }\] (post))&#10;\replacewith(box(post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1367] methodCallEmptyReturn, methodCallEmptyReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  method-frame (#ex) {&#10;    return;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1368] methodCallParamThrow, methodCallParamThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  method-frame (result-&gt;#v0, #ex) {&#10;    throw #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\varcond(\isLocalVariable (#se (program SimpleExpression)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  throw #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1369] methodCallReturn, methodCallReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  method-frame (result-&gt;#v0, #ex) {&#10;    return #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  method-frame (#ex) {&#10;    #v0 = #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1370] methodCallReturnIgnoreResult, methodCallReturnIgnoreResult {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  method-frame (#ex) {&#10;    return #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1371] methodCallSuper, methodCallSuper {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  super.#mn(#elist);&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  method-call(super.#mn(#elist))&#10;... }\] (post)) &#10;\heuristics(method_expand, simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1372] methodCallThrow, methodCallThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  method-frame (#ex) {&#10;    throw #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\varcond(\isLocalVariable (#se (program SimpleExpression)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  throw #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1373] methodCallUnfoldArguments, methodCallUnfoldArguments {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #nsmr&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #evaluate-arguments(#nsmr)&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1374] methodCallUnfoldTarget, methodCallUnfoldTarget {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #nse.#mn(#elist);&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0;&#10;  #v0 = #nse;&#10;  #v0.#mn(#elist);&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1375] methodCallWithAssignment, methodCallWithAssignment {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #se.#mn(#selist);&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#lhs (program LeftHandSide))), \not \staticMethodReference(#se (program SimpleExpression), #mn (program MethodName), #selist (program SimpleExpression)), \mayExpandMethod(#se (program SimpleExpression), #mn (program MethodName), #selist (program SimpleExpression)), )&#10;\add [equals(#se,null)]==&gt;[] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[#allm…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1376] methodCallWithAssignmentSuper, methodCallWithAssignmentSuper {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = super.#mn(#elist);&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#lhs (program LeftHandSide))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#lhs) #v0;&#10;  method-call(super.#mn(#elist))&#10;  #lhs = #v0;&#10;... }\] (post)) &#10;\heuristics(method_expand, simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1377] methodCallWithAssignmentUnfoldArguments, methodCallWithAssignmentUnfoldArguments {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nsmr;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #evaluate-arguments(#lhs = #nsmr)&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1378] methodCallWithAssignmentUnfoldTarget, methodCallWithAssignmentUnfoldTarget {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #nse.#mn(#elist);&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0;&#10;  #v0 = #nse;&#10;  #lhs = #v0.#mn(#elist);&#10;... }\] (post)) &#10;\heuristics(simplify_autoname)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1379] methodCallWithAssignmentWithinClass, methodCallWithAssignmentWithinClass {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #mn(#elist);&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#lhs (program LeftHandSide))), \mayExpandMethod(null, #mn (program MethodName), #elist (program Expression)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#lhs) #v0;&#10;  method-call(#mn(#elist))&#10;  #lhs = #v0;&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1380] methodCallWithinClass, methodCallWithinClass {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #mn(#elist);&#10;... }\] (post))&#10;\varcond(\mayExpandMethod(null, #mn (program MethodName), #elist (program Expression)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  method-call(#mn(#elist))&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1381] minAxiom, minAxiom {&#10;\find(equals(min{x (variable)}(b,t),t2)==&gt;)&#10;\varcond(\notFreeIn(y (variable), t2 (int term)), \notFreeIn(y (variable), t (int term)), \notFreeIn(y (variable), b (boolean term)), \notFreeIn(x (variable), t2 (int term)))&#10;\add []==&gt;[exists{x (variable)}(and(equals(b,TRUE),all{y (variable)}(imp(equals(subst{x (variable)}(y,b),TRUE),geq(subst{x (variable)}(y,t),t)))))] ;&#10;\add [and(all{y (variable)}(subst{x (variable)}(y,imp(equals(b,TRUE),geq(t,t2)))),exists{y (variable)}(subst{x (variable)}(y,and(eq…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1382] minus_distribute_1, minus_distribute_1 {&#10;\find(neg(add(i,i1)))&#10;\replacewith(add(neg(i),neg(i1))) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1383] minus_distribute_2, minus_distribute_2 {&#10;\find(neg(sub(i,i1)))&#10;\replacewith(add(neg(i),i1)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1384] mod_axiom, mod_axiom {&#10;\find(mod(divNum,divDenom))&#10;\replacewith(add(divNum,mul(mul(div(divNum,divDenom),Z(neglit(1(#)))),divDenom))) &#10;\heuristics(notHumanReadable, defOps_mod)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1385] mod_geZero, mod_geZero {&#10;\find(mod(divNum,divDenom))&#10;\add [imp(not(equals(divDenom,Z(0(#)))),leq(Z(0(#)),mod(divNum,divDenom)))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1386] mod_homoEq, mod_homoEq {&#10;\find(equals(mod(modNumLeft,modDenom),mod(modNumRight,modDenom)))&#10;\replacewith(equals(mod(sub(modNumLeft,modNumRight),modDenom),Z(0(#)))) &#10;\heuristics(notHumanReadable, defOps_modHomoEq)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1387] mod_lessDenom, mod_lessDenom {&#10;\find(mod(divNum,divDenom))&#10;\add [imp(not(equals(divDenom,Z(0(#)))),lt(mod(divNum,divDenom),if-then-else(geq(divDenom,Z(0(#))),divDenom,neg(divDenom))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1388] moduloByteFixpoint, moduloByteFixpoint {&#10;\assumes ([inRangeByte(i)]==&gt;[]) &#10;\find(moduloByte(i))&#10;\sameUpdateLevel\replacewith(i) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1389] moduloByteFixpointInline, moduloByteFixpointInline {&#10;\find(moduloByte(i))&#10;\sameUpdateLevel\add [equals(if-then-else(inRangeByte(i),i,moduloT),moduloT),equals(moduloByte(i),moduloT)]==&gt;[] \replacewith(moduloT) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1390] moduloByteIsInByte, moduloByteIsInByte {&#10;\find(inByte(moduloByte(t)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1391] moduloByteIsInRangeByte, moduloByteIsInRangeByte {&#10;\find(inRangeByte(moduloByte(i)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1392] moduloCharFixpoint, moduloCharFixpoint {&#10;\assumes ([inRangeChar(i)]==&gt;[]) &#10;\find(moduloChar(i))&#10;\sameUpdateLevel\replacewith(i) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1393] moduloCharFixpointInline, moduloCharFixpointInline {&#10;\find(moduloChar(i))&#10;\sameUpdateLevel\add [equals(if-then-else(inRangeChar(i),i,moduloT),moduloT),equals(moduloChar(i),moduloT)]==&gt;[] \replacewith(moduloT) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1394] moduloCharIsInChar, moduloCharIsInChar {&#10;\find(inChar(moduloChar(t)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1395] moduloCharIsInRangeChar, moduloCharIsInRangeChar {&#10;\find(inRangeChar(moduloChar(i)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1396] moduloIntFixpoint, moduloIntFixpoint {&#10;\assumes ([inRangeInt(i)]==&gt;[]) &#10;\find(moduloInt(i))&#10;\sameUpdateLevel\replacewith(i) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1397] moduloIntFixpointInline, moduloIntFixpointInline {&#10;\find(moduloInt(i))&#10;\sameUpdateLevel\add [equals(if-then-else(inRangeInt(i),i,moduloT),moduloT),equals(moduloInt(i),moduloT)]==&gt;[] \replacewith(moduloT) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1398] moduloIntIsInInt, moduloIntIsInInt {&#10;\find(inInt(moduloInt(t)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1399] moduloIntIsInRangeInt, moduloIntIsInRangeInt {&#10;\find(inRangeInt(moduloInt(i)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1400] moduloLongFixpoint, moduloLongFixpoint {&#10;\assumes ([inRangeLong(i)]==&gt;[]) &#10;\find(moduloLong(i))&#10;\sameUpdateLevel\replacewith(i) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1401] moduloLongFixpointInline, moduloLongFixpointInline {&#10;\find(moduloLong(i))&#10;\sameUpdateLevel\add [equals(if-then-else(inRangeLong(i),i,moduloT),moduloT),equals(moduloLong(i),moduloT)]==&gt;[] \replacewith(moduloT) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1402] moduloLongIsInLong, moduloLongIsInLong {&#10;\find(inLong(moduloLong(t)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1403] moduloLongIsInRangeLong, moduloLongIsInRangeLong {&#10;\find(inRangeLong(moduloLong(i)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1404] moduloShortFixpoint, moduloShortFixpoint {&#10;\assumes ([inRangeShort(i)]==&gt;[]) &#10;\find(moduloShort(i))&#10;\sameUpdateLevel\replacewith(i) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1405] moduloShortFixpointInline, moduloShortFixpointInline {&#10;\find(moduloShort(i))&#10;\sameUpdateLevel\add [equals(if-then-else(inRangeShort(i),i,moduloT),moduloT),equals(moduloShort(i),moduloT)]==&gt;[] \replacewith(moduloT) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1406] moduloShortIsInRangeShort, moduloShortIsInRangeShort {&#10;\find(inRangeShort(moduloShort(i)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1407] moduloShortIsInShort, moduloShortIsInShort {&#10;\find(inShort(moduloShort(t)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1408] mul_assoc, mul_assoc {&#10;\find(mul(mul(i,i0),i1))&#10;\replacewith(mul(i,mul(i0,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1409] mul_comm, mul_comm {&#10;\find(mul(i0,i1))&#10;\replacewith(mul(i1,i0)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1410] mul_distribute_4, mul_distribute_4 {&#10;\find(mul(i0,add(i1,i2)))&#10;\replacewith(add(mul(i0,i1),mul(i0,i2))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1411] mul_distribute_5, mul_distribute_5 {&#10;\find(mul(add(i1,i2),i0))&#10;\replacewith(add(mul(i0,i1),mul(i0,i2))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1412] mul_literals, mul_literals {&#10;\find(mul(Z(iz),Z(jz)))&#10;\replacewith(#mul(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1413] mult_eq_1_iff, mult_eq_1_iff {&#10;\find(equals(mul(i0,i1),Z(1(#))))&#10;\replacewith(or(and(equals(i0,Z(1(#))),equals(i1,Z(1(#)))),and(equals(i0,Z(neglit(1(#)))),equals(i1,Z(neglit(1(#))))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1414] mult_eq_self_iff, mult_eq_self_iff {&#10;\find(equals(i0,mul(i0,i1)))&#10;\replacewith(or(equals(i0,Z(0(#))),equals(i1,Z(1(#))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1415] mult_leq_0_iff, mult_leq_0_iff {&#10;\find(leq(mul(i0,i1),Z(0(#))))&#10;\replacewith(or(and(leq(i0,Z(0(#))),leq(Z(0(#)),i1)),and(leq(Z(0(#)),i0),leq(i1,Z(0(#)))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1416] mult_less_0_iff, mult_less_0_iff {&#10;\find(lt(mul(i0,i1),Z(0(#))))&#10;\replacewith(or(and(lt(i0,Z(0(#))),lt(Z(0(#)),i1)),and(lt(Z(0(#)),i0),lt(i1,Z(0(#)))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1417] mult_neg, mult_neg {&#10;\find(and(lt(i0,Z(0(#))),lt(i1,Z(0(#)))))&#10;\replacewith(lt(Z(0(#)),mul(i0,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1418] mult_pos, mult_pos {&#10;\find(and(lt(Z(0(#)),i0),lt(Z(0(#)),i1)))&#10;\replacewith(lt(Z(0(#)),mul(i0,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1419] mult_pos_neg, mult_pos_neg {&#10;\find(and(lt(i0,Z(0(#))),lt(Z(0(#)),i1)))&#10;\replacewith(lt(mul(i0,i1),Z(0(#)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1420] multiply_2_inEq0, multiply_2_inEq0 {&#10;\assumes ([leq(multFacLeft,multFacRight)]==&gt;[]) &#10;\find(leq(multLeft,multRight)==&gt;)&#10;\add [geq(mul(multLeft,multFacLeft),add(add(mul(neg(multRight),multFacRight),mul(multRight,multFacLeft)),mul(multLeft,multFacRight)))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_multiply, inEqSimp_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1421] multiply_2_inEq1, multiply_2_inEq1 {&#10;\assumes ([geq(multFacLeft,multFacRight)]==&gt;[]) &#10;\find(leq(multLeft,multRight)==&gt;)&#10;\add [leq(mul(multLeft,multFacLeft),add(add(mul(neg(multRight),multFacRight),mul(multRight,multFacLeft)),mul(multLeft,multFacRight)))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_multiply, inEqSimp_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1422] multiply_2_inEq2, multiply_2_inEq2 {&#10;\assumes ([leq(multFacLeft,multFacRight)]==&gt;[]) &#10;\find(geq(multLeft,multRight)==&gt;)&#10;\add [leq(mul(multLeft,multFacLeft),add(add(mul(neg(multRight),multFacRight),mul(multRight,multFacLeft)),mul(multLeft,multFacRight)))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_multiply, inEqSimp_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1423] multiply_2_inEq3, multiply_2_inEq3 {&#10;\assumes ([geq(multFacLeft,multFacRight)]==&gt;[]) &#10;\find(geq(multLeft,multRight)==&gt;)&#10;\add [geq(mul(multLeft,multFacLeft),add(add(mul(neg(multRight),multFacRight),mul(multRight,multFacLeft)),mul(multLeft,multFacRight)))]==&gt;[] &#10;\heuristics(inEqSimp_nonLin_multiply, inEqSimp_nonLin)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1424] multiply_distribute_1, multiply_distribute_1 {&#10;\find(mul(add(i0,i1),add(j0,j1)))&#10;\replacewith(add(add(mul(i0,j0),mul(i0,j1)),add(mul(i1,j0),mul(i1,j1)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1425] multiply_distribute_2, multiply_distribute_2 {&#10;\find(mul(add(i0,i1),sub(j0,j1)))&#10;\replacewith(add(sub(mul(i0,j0),mul(i0,j1)),sub(mul(i1,j0),mul(i1,j1)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.019"/>
  <testcase name="[1426] multiply_distribute_3, multiply_distribute_3 {&#10;\find(mul(sub(i0,i1),sub(j0,j1)))&#10;\replacewith(add(sub(mul(i0,j0),mul(i0,j1)),sub(mul(i1,j1),mul(i1,j0)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[1427] multiply_eq, multiply_eq {&#10;\find(equals(multLeft,multRight)==&gt;)&#10;\add [equals(mul(multLeft,multFac),mul(multRight,multFac))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1428] multiply_inEq0, multiply_inEq0 {&#10;\find(leq(multLeft,multRight)==&gt;)&#10;\add [if-then-else(geq(multFac,Z(0(#))),leq(mul(multLeft,multFac),mul(multRight,multFac)),geq(mul(multLeft,multFac),mul(multRight,multFac)))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1429] multiply_inEq1, multiply_inEq1 {&#10;\find(geq(multLeft,multRight)==&gt;)&#10;\add [if-then-else(geq(multFac,Z(0(#))),geq(mul(multLeft,multFac),mul(multRight,multFac)),leq(mul(multLeft,multFac),mul(multRight,multFac)))]==&gt;[] &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1430] narrowSelectArrayType, narrowSelectArrayType {&#10;\assumes ([wellFormed(h)]==&gt;[equals(o,null)]) &#10;\find(beta::select(h,o,arr(idx)))&#10;\sameUpdateLevel\varcond(\hasSort(\elemSort(o (java.lang.Object term)), alpha), \strict\sub(alpha, beta), )&#10;\replacewith(alpha::select(h,o,arr(idx))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1431] narrowSelectType, narrowSelectType {&#10;\assumes ([wellFormed(h)]==&gt;[]) &#10;\find(beta::select(h,o,f))&#10;\varcond(\fieldType(f (Field term), alpha), \strict\sub(alpha, beta), )&#10;\replacewith(alpha::select(h,o,f)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1432] narrowingByteCastBigint, narrowingByteCastBigint {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = (byte) #seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastByte(#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1433] narrowingByteCastInt, narrowingByteCastInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (byte) #seInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastByte(#seInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1434] narrowingByteCastLong, narrowingByteCastLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (byte) #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastByte(#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1435] narrowingByteCastShort, narrowingByteCastShort {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (byte) #seShort;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastByte(#seShort)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1436] narrowingCastFloatToInt, narrowingCastFloatToInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (int) #seFloat;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(int::cast(#seFloat)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1437] narrowingCastFloatToLong, narrowingCastFloatToLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (long) #seFloat;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(int::cast(#seFloat)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1438] narrowingCharCastBigint, narrowingCharCastBigint {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = (char) #seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastChar(#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1439] narrowingCharCastByte, narrowingCharCastByte {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (char) #seByte;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastChar(#seByte)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[1440] narrowingCharCastInt, narrowingCharCastInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (char) #seInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastChar(#seInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1441] narrowingCharCastLong, narrowingCharCastLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (char) #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastChar(#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1442] narrowingCharCastShort, narrowingCharCastShort {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (char) #seShort;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastChar(#seShort)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1443] narrowingIntCastBigint, narrowingIntCastBigint {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = (int) #seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastInt(#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1444] narrowingIntCastLong, narrowingIntCastLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (int) #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastInt(#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1445] narrowingLongCastBigint, narrowingLongCastBigint {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = (long) #seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastLong(#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1446] narrowingShortCastBigint, narrowingShortCastBigint {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = (short) #seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastShort(#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1447] narrowingShortCastInt, narrowingShortCastInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (short) #seInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastShort(#seInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1448] narrowingShortCastLong, narrowingShortCastLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (short) #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaCastShort(#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1449] neg_literal, neg_literal {&#10;\find(neg(Z(iz)))&#10;\replacewith(Z(neglit(iz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1450] neq_and, neq_and {&#10;\find(and(phi,not(phi)))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1451] neq_and_2, neq_and_2 {&#10;\find(and(not(phi),phi))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[1452] neq_and_3, neq_and_3 {&#10;\find(and(and(psi,phi),not(phi)))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1453] neq_and_4, neq_and_4 {&#10;\find(and(and(psi,not(phi)),phi))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[1454] neq_or, neq_or {&#10;\find(or(phi,not(phi)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1455] neq_or_2, neq_or_2 {&#10;\find(or(not(phi),phi))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1456] neq_or_3, neq_or_3 {&#10;\find(or(or(psi,phi),not(phi)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1457] neq_or_4, neq_or_4 {&#10;\find(or(or(psi,not(phi)),phi))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1458] newSym_eq, newSym_eq {&#10;\find(equals(mul(newSymLeft,newSymLeftCoeff),newSymRight)==&gt;)&#10;\add [equals(newSymLeft,add(l,newSymDef))]==&gt;[] &#10;\heuristics(polySimp_newSmallSym, polySimp_newSym, polySimp_leftNonUnit)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1459] niceDouble, niceDouble {&#10;\find(doubleIsNice(arg))&#10;\replacewith(and(not(doubleIsNaN(arg)),not(doubleIsInfinite(arg)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1460] niceFloat, niceFloat {&#10;\find(floatIsNice(arg))&#10;\replacewith(and(not(floatIsNaN(arg)),not(floatIsInfinite(arg)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1461] nnf_ex2all, nnf_ex2all {&#10;\find(==&gt;exists{u (variable)}(phi))&#10;\replacewith([all{u (variable)}(not(phi))]==&gt;[]) &#10;\heuristics(notHumanReadable, moveQuantToLeft)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1462] nnf_imp2or, nnf_imp2or {&#10;\find(imp(phi,psi))&#10;\replacewith(or(not(phi),psi)) &#10;\heuristics(notHumanReadable, negationNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1463] nnf_notAll, nnf_notAll {&#10;\find(not(all{u (variable)}(phi)))&#10;\replacewith(exists{u (variable)}(not(phi))) &#10;\heuristics(notHumanReadable, negationNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1464] nnf_notAnd, nnf_notAnd {&#10;\find(not(and(phi,psi)))&#10;\replacewith(or(not(phi),not(psi))) &#10;\heuristics(notHumanReadable, negationNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[1465] nnf_notEqv, nnf_notEqv {&#10;\find(not(equiv(phi,psi)))&#10;\replacewith(equiv(phi,not(psi))) &#10;\heuristics(notHumanReadable, negationNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1466] nnf_notEx, nnf_notEx {&#10;\find(not(exists{u (variable)}(phi)))&#10;\replacewith(all{u (variable)}(not(phi))) &#10;\heuristics(notHumanReadable, negationNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1467] nnf_notOr, nnf_notOr {&#10;\find(not(or(phi,psi)))&#10;\replacewith(and(not(phi),not(psi))) &#10;\heuristics(notHumanReadable, negationNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1468] noElementOfSupersetImpliesNoElementOfSubset, noElementOfSupersetImpliesNoElementOfSubset {&#10;\assumes ([subset(s,s2)]==&gt;[]) &#10;\find(==&gt;elementOf(o,f,s2))&#10;\add []==&gt;[elementOf(o,f,s)] &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1469] nonNull, nonNull {&#10;\find(nonNull(heapSV,o,depth))&#10;\varcond(\notFreeIn(i (variable), depth (int term)), \notFreeIn(i (variable), heapSV (Heap term)), \notFreeIn(i (variable), o (java.lang.Object term)), \isReferenceArray(o (java.lang.Object term)), )&#10;\replacewith(and(not(equals(o,null)),imp(gt(depth,Z(0(#))),all{i (variable)}(imp(and(leq(Z(0(#)),i),lt(i,length(o))),nonNull(heapSV,java.lang.Object::select(heapSV,o,arr(i)),sub(depth,Z(1(#))))))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1470] nonNullZero, nonNullZero {&#10;\find(nonNull(heapSV,o,Z(0(#))))&#10;\replacewith(not(equals(o,null))) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1471] notInDomain, notInDomain {&#10;\find(==&gt;inDomain(m,x))&#10;\add [equals(mapGet(m,x),mapUndef)]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1472] notLeft, notLeft {&#10;\find(not(b)==&gt;)&#10;\replacewith([]==&gt;[b]) &#10;\heuristics(alpha)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1473] notRight, notRight {&#10;\find(==&gt;not(b))&#10;\replacewith([b]==&gt;[]) &#10;\heuristics(alpha)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1474] nullCreated, nullCreated {&#10;\add [or(all{h (variable)}(equals(boolean::select(h,null,java.lang.Object::&lt;created&gt;),TRUE)),all{h (variable)}(equals(boolean::select(h,null,java.lang.Object::&lt;created&gt;),FALSE)))]==&gt;[] &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1475] nullIsNotNonNull, nullIsNotNonNull {&#10;\find(nonNull(heapSV,null,depth))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1476] nullString, nullString {&#10;\find(strContent(null))&#10;\replacewith(seqConcat(seqSingleton(C(0(1(1(#))))),seqConcat(seqSingleton(C(7(1(1(#))))),seqConcat(seqSingleton(C(8(0(1(#))))),seqSingleton(C(8(0(1(#))))))))) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1477] null_can_always_be_stored_in_a_reference_type_array, null_can_always_be_stored_in_a_reference_type_array {&#10;\assumes ([]==&gt;[equals(array,null)]) &#10;\find(arrayStoreValid(array,null))&#10;\sameUpdateLevel\varcond(\isReferenceArray(array (GOS term)), )&#10;\replacewith(true) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1478] observerDependency, observerDependency {&#10;\find(termWithLargeHeap)&#10;\inSequentState\varcond(\sameObserver (termWithLargeHeap (any term), termWithSmallHeap (any term)), )&#10;\add []==&gt;[#ObserverEquality(termWithLargeHeap,termWithSmallHeap)] ;&#10;\replacewith(termWithSmallHeap) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1479] observerDependencyEQ, observerDependencyEQ {&#10;\find(equals(t1,t2))&#10;\inSequentState\varcond(\sameObserver (t1 (any term), t2 (any term)), )&#10;\add []==&gt;[#ObserverEquality(t1,t2)] ;&#10;\replacewith(true) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.007"/>
  <testcase name="[1480] observerDependencyEquiv, observerDependencyEquiv {&#10;\find(equiv(t1,t2))&#10;\inSequentState\varcond(\sameObserver (t1 (formula), t2 (formula)), )&#10;\add []==&gt;[#ObserverEquality(t1,t2)] ;&#10;\replacewith(true) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1481] observerDependencyFormula, observerDependencyFormula {&#10;\find(termWithLargeHeap)&#10;\inSequentState\varcond(\sameObserver (termWithLargeHeap (formula), termWithSmallHeap (formula)), )&#10;\add []==&gt;[#ObserverEquality(termWithLargeHeap,termWithSmallHeap)] ;&#10;\replacewith(termWithSmallHeap) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1482] onlyCreatedObjectsAreInLocSets, onlyCreatedObjectsAreInLocSets {&#10;\assumes ([wellFormed(h)]==&gt;[]) &#10;\find(elementOf(o2,f2,LocSet::select(h,o,f))==&gt;)&#10;\add [or(equals(o2,null),equals(boolean::select(h,o2,java.lang.Object::&lt;created&gt;),TRUE))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1483] onlyCreatedObjectsAreInLocSetsEQ, onlyCreatedObjectsAreInLocSetsEQ {&#10;\assumes ([wellFormed(h),equals(LocSet::select(h,o,f),EQ)]==&gt;[]) &#10;\find(elementOf(o2,f2,EQ)==&gt;)&#10;\add [or(equals(o2,null),equals(boolean::select(h,o2,java.lang.Object::&lt;created&gt;),TRUE))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1484] onlyCreatedObjectsAreObserved, onlyCreatedObjectsAreObserved {&#10;\find(obs)&#10;\sameUpdateLevel\varcond(\isObserver (obs (deltaObject term), h (Heap term)), )&#10;\add [or(equals(obs,null),equals(boolean::select(h,obs,java.lang.Object::&lt;created&gt;),TRUE))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1485] onlyCreatedObjectsAreObservedInLocSets, onlyCreatedObjectsAreObservedInLocSets {&#10;\find(elementOf(o,f,obs)==&gt;)&#10;\varcond(\isObserver (obs (LocSet term), h (Heap term)), )&#10;\add [or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1486] onlyCreatedObjectsAreObservedInLocSetsEQ, onlyCreatedObjectsAreObservedInLocSetsEQ {&#10;\assumes ([equals(obs,EQ)]==&gt;[]) &#10;\find(elementOf(o,f,EQ)==&gt;)&#10;\varcond(\isObserver (obs (LocSet term), h (Heap term)), )&#10;\add [or(equals(o,null),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1487] onlyCreatedObjectsAreReferenced, onlyCreatedObjectsAreReferenced {&#10;\assumes ([wellFormed(h)]==&gt;[]) &#10;\find(deltaObject::select(h,o,f))&#10;\sameUpdateLevel\add [or(equals(deltaObject::select(h,o,f),null),equals(boolean::select(h,deltaObject::select(h,o,f),java.lang.Object::&lt;created&gt;),TRUE))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1488] only_created_objects_are_reachable, only_created_objects_are_reachable {&#10;\assumes ([wellFormed(h)]==&gt;[equals(o,null)]) &#10;\find(reach(h,s,o,o2,n)==&gt;)&#10;\add [or(not(equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE)),equals(boolean::select(h,o2,java.lang.Object::&lt;created&gt;),TRUE))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1489] optAxiom, optAxiom {&#10;\find(match(opt(rexp),string))&#10;\replacewith(or(match(repeat(rexp,Z(0(#))),string),match(rexp,string))) &#10;\heuristics(simplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1490] optEmpty, optEmpty {&#10;\find(match(opt(rexp),seqEmpty))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1491] orJIntDef, orJIntDef {&#10;\find(orJint(left,right))&#10;\replacewith(moduloInt(binaryOr(left,right))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1492] orJintInInt, orJintInInt {&#10;\find(orJint(left,right))&#10;\sameUpdateLevel\add [inRangeInt(orJint(left,right))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1493] orLeft, orLeft {&#10;\find(or(b,c)==&gt;)&#10;\replacewith([c]==&gt;[]) ;&#10;\replacewith([b]==&gt;[]) &#10;\heuristics(beta)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1494] orRight, orRight {&#10;\find(==&gt;or(b,c))&#10;\replacewith([]==&gt;[b,c]) &#10;\heuristics(alpha)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1495] parallelWithSkip1, parallelWithSkip1 {&#10;\find(parallel-upd(skip,u))&#10;\replacewith(u) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1496] parallelWithSkip2, parallelWithSkip2 {&#10;\find(parallel-upd(u,skip))&#10;\replacewith(u) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1497] partition_inequation, partition_inequation {&#10;\assumes ([]==&gt;[lt(i,i0)]) &#10;\find(lt(i,i1)==&gt;)&#10;\add []==&gt;[lt(i1,i0)] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1498] permissionDefaultValue, permissionDefaultValue {&#10;\find(Permission::defaultValue)&#10;\replacewith(initFullPermission) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1499] polyDiv_pullOut, polyDiv_pullOut {&#10;\find(div(divNum,divDenom))&#10;\replacewith(if-then-else(equals(divDenom,Z(0(#))),div(divNum,Z(0(#))),add(div(add(divNum,mul(mul(polyDivCoeff,Z(neglit(1(#)))),divDenom)),divDenom),polyDivCoeff))) &#10;\heuristics(notHumanReadable, defOps_divModPullOut, polyDivision)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1500] polyDiv_zero, polyDiv_zero {&#10;\find(div(Z(0(#)),divDenom))&#10;\replacewith(if-then-else(equals(divDenom,Z(0(#))),div(Z(0(#)),Z(0(#))),Z(0(#)))) &#10;\heuristics(polyDivision)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1501] polyMod_ltdivDenom, polyMod_ltdivDenom {&#10;\find(mod(divNum,divDenom))&#10;\add [and(imp(gt(divDenom,Z(0(#))),lt(mod(divNum,divDenom),divDenom)),imp(lt(divDenom,Z(0(#))),lt(mod(divNum,divDenom),neg(divDenom))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1502] polyMod_pullOut, polyMod_pullOut {&#10;\find(mod(divNum,divDenom))&#10;\replacewith(mod(add(divNum,mul(mul(polyDivCoeff,Z(neglit(1(#)))),divDenom)),divDenom)) &#10;\heuristics(notHumanReadable, defOps_divModPullOut, polyDivision)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1503] polyMod_zero, polyMod_zero {&#10;\find(mod(Z(0(#)),divDenom))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete, polyDivision)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1504] polySimp_addAssoc, polySimp_addAssoc {&#10;\find(add(addAssocPoly0,add(addAssocPoly1,addAssocMono)))&#10;\replacewith(add(add(addAssocPoly0,addAssocPoly1),addAssocMono)) &#10;\heuristics(polySimp_addAssoc, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1505] polySimp_addComm0, polySimp_addComm0 {&#10;\find(add(commLeft,commRight))&#10;\replacewith(add(commRight,commLeft)) &#10;\heuristics(polySimp_addOrder, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1506] polySimp_addComm1, polySimp_addComm1 {&#10;\find(add(add(i0,commLeft),commRight))&#10;\replacewith(add(add(i0,commRight),commLeft)) &#10;\heuristics(polySimp_addOrder, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1507] polySimp_addLiterals, polySimp_addLiterals {&#10;\find(add(add(i,Z(iz)),Z(jz)))&#10;\replacewith(add(i,#add(Z(iz),Z(jz)))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1508] polySimp_critPair, polySimp_critPair {&#10;\assumes ([equals(cpLeft1,cpRight1)]==&gt;[]) &#10;\find(equals(cpLeft2,cpRight2)==&gt;)&#10;\add [equals(add(mul(#divideLCRMonomials(cpLeft2,cpLeft1),add(mul(Z(neglit(1(#))),cpRight1),cpLeft1)),mul(#divideLCRMonomials(cpLeft1,cpLeft2),add(cpRight2,mul(Z(neglit(1(#))),cpLeft2)))),Z(0(#)))]==&gt;[] &#10;\heuristics(notHumanReadable, polySimp_critPair, polySimp_saturate)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1509] polySimp_elimNeg, polySimp_elimNeg {&#10;\find(neg(i))&#10;\replacewith(mul(i,Z(neglit(1(#))))) &#10;\heuristics(polySimp_elimSubNeg, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1510] polySimp_elimOne, polySimp_elimOne {&#10;\find(mul(i,Z(1(#))))&#10;\replacewith(i) &#10;\heuristics(polySimp_elimOneRight, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1511] polySimp_elimOneLeft0, polySimp_elimOneLeft0 {&#10;\find(mul(Z(1(#)),i))&#10;\replacewith(i) &#10;\heuristics(polySimp_elimOneLeft, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1512] polySimp_elimOneLeft1, polySimp_elimOneLeft1 {&#10;\find(mul(mul(i0,Z(1(#))),i))&#10;\replacewith(mul(i0,i)) &#10;\heuristics(polySimp_elimOneLeft, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1513] polySimp_elimSub, polySimp_elimSub {&#10;\find(sub(i,i0))&#10;\replacewith(add(i,mul(i0,Z(neglit(1(#)))))) &#10;\heuristics(polySimp_elimSubNeg, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1514] polySimp_homoEq, polySimp_homoEq {&#10;\find(equals(homoLeft,homoRight))&#10;\replacewith(equals(add(homoRight,mul(homoLeft,Z(neglit(1(#))))),Z(0(#)))) &#10;\heuristics(notHumanReadable, polySimp_homo, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1515] polySimp_invertEq, polySimp_invertEq {&#10;\find(equals(invertLeft,invertRight))&#10;\replacewith(equals(mul(invertLeft,Z(neglit(1(#)))),mul(invertRight,Z(neglit(1(#)))))) &#10;\heuristics(polySimp_normalise, polySimp_directEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.015"/>
  <testcase name="[1516] polySimp_mulAssoc, polySimp_mulAssoc {&#10;\find(mul(mulAssocMono0,mul(mulAssocMono1,mulAssocAtom)))&#10;\replacewith(mul(mul(mulAssocMono0,mulAssocMono1),mulAssocAtom)) &#10;\heuristics(polySimp_mulAssoc, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1517] polySimp_mulComm0, polySimp_mulComm0 {&#10;\find(mul(commLeft,commRight))&#10;\replacewith(mul(commRight,commLeft)) &#10;\heuristics(polySimp_mulOrder, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1518] polySimp_mulComm1, polySimp_mulComm1 {&#10;\find(mul(mul(i0,commLeft),commRight))&#10;\replacewith(mul(mul(i0,commRight),commLeft)) &#10;\heuristics(polySimp_mulOrder, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1519] polySimp_mulLiterals, polySimp_mulLiterals {&#10;\find(mul(mul(i,Z(iz)),Z(jz)))&#10;\replacewith(mul(i,#mul(Z(iz),Z(jz)))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1520] polySimp_pullOutFactor0, polySimp_pullOutFactor0 {&#10;\find(add(mul(pullOutCommon,pullOutLeft),mul(pullOutCommon,pullOutRight)))&#10;\replacewith(mul(pullOutCommon,add(pullOutLeft,pullOutRight))) &#10;\heuristics(polySimp_pullOutFactor, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1521] polySimp_pullOutFactor0b, polySimp_pullOutFactor0b {&#10;\find(add(add(i0,mul(pullOutCommon,pullOutLeft)),mul(pullOutCommon,pullOutRight)))&#10;\replacewith(add(i0,mul(pullOutCommon,add(pullOutLeft,pullOutRight)))) &#10;\heuristics(polySimp_pullOutFactor, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1522] polySimp_pullOutFactor1, polySimp_pullOutFactor1 {&#10;\find(add(pullOutCommon,mul(pullOutCommon,pullOutRight)))&#10;\replacewith(mul(pullOutCommon,add(Z(1(#)),pullOutRight))) &#10;\heuristics(polySimp_pullOutFactor, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1523] polySimp_pullOutFactor1b, polySimp_pullOutFactor1b {&#10;\find(add(add(i0,pullOutCommon),mul(pullOutCommon,pullOutRight)))&#10;\replacewith(add(i0,mul(pullOutCommon,add(Z(1(#)),pullOutRight)))) &#10;\heuristics(polySimp_pullOutFactor, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1524] polySimp_pullOutFactor2, polySimp_pullOutFactor2 {&#10;\find(add(mul(pullOutCommon,pullOutLeft),pullOutCommon))&#10;\replacewith(mul(pullOutCommon,add(pullOutLeft,Z(1(#))))) &#10;\heuristics(polySimp_pullOutFactor, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1525] polySimp_pullOutFactor2b, polySimp_pullOutFactor2b {&#10;\find(add(add(i0,mul(pullOutCommon,pullOutLeft)),pullOutCommon))&#10;\replacewith(add(i0,mul(pullOutCommon,add(pullOutLeft,Z(1(#)))))) &#10;\heuristics(polySimp_pullOutFactor, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1526] polySimp_pullOutFactor3, polySimp_pullOutFactor3 {&#10;\find(add(pullOutCommon,pullOutCommon))&#10;\replacewith(mul(pullOutCommon,Z(2(#)))) &#10;\heuristics(polySimp_pullOutFactor, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1527] polySimp_pullOutFactor3b, polySimp_pullOutFactor3b {&#10;\find(add(add(i0,pullOutCommon),pullOutCommon))&#10;\replacewith(add(i0,mul(pullOutCommon,Z(2(#))))) &#10;\heuristics(polySimp_pullOutFactor, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1528] polySimp_rightDist, polySimp_rightDist {&#10;\find(mul(distCoeff,add(distSummand0,distSummand1)))&#10;\replacewith(add(mul(distCoeff,distSummand0),mul(distSummand1,distCoeff))) &#10;\heuristics(polySimp_dist, polySimp_expand)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1529] polySimp_sepNegMonomial, polySimp_sepNegMonomial {&#10;\find(equals(add(sepResidue,sepNegMono),Z(0(#))))&#10;\replacewith(equals(mul(sepNegMono,Z(neglit(1(#)))),sepResidue)) &#10;\heuristics(polySimp_balance, polySimp_directEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1530] polySimp_sepPosMonomial, polySimp_sepPosMonomial {&#10;\find(equals(add(sepResidue,sepPosMono),Z(0(#))))&#10;\replacewith(equals(sepPosMono,mul(sepResidue,Z(neglit(1(#)))))) &#10;\heuristics(notHumanReadable, polySimp_balance, polySimp_directEquations)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1531] poolIsInjective, poolIsInjective {&#10;\find(equals(strPool(slit1),strPool(slit2)))&#10;\replacewith(equals(slit1,slit2)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1532] poolKeyIsContentOfValue, poolKeyIsContentOfValue {&#10;\find(strContent(strPool(slit)))&#10;\replacewith(slit) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1533] pos_mult_eq_1_iff, pos_mult_eq_1_iff {&#10;\find(imp(lt(Z(0(#)),i0),equals(mul(i0,i1),Z(1(#)))))&#10;\replacewith(and(equals(i0,Z(1(#))),equals(i1,Z(1(#))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1534] postdecrement, postdecrement {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1--;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) #lhs1 - 1;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1535] postdecrement_array, postdecrement_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e[#e0]--;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1536] postdecrement_assignment, postdecrement_assignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1--;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#lhs0 (program LeftHandSide))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#lhs0) #v = #lhs1;&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1);&#10;  #lhs0 = #v;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1537] postdecrement_assignment_array, postdecrement_assignment_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e[#e0]--;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#lhs0 (program LeftHandSide))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#lhs0) #v1 = #v[#v0];&#10;  #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);&#10;  #lhs0 = #v1;&#10;..…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1538] postdecrement_assignment_attribute, postdecrement_assignment_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e.#attribute--;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#lhs0 (program LeftHandSide))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#lhs0) #v1 = #v.#attribute;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute -&#10;                                           1);&#10;  #lhs0 = #v1;&#10;... }\] (post)) &#10;\h…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1539] postdecrement_attribute, postdecrement_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e.#attribute--;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute -&#10;                                           1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1540] postincrement, postincrement {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1++;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1541] postincrement_array, postincrement_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e[#e0]++;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1542] postincrement_assignment, postincrement_assignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #lhs1++;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#lhs0 (program LeftHandSide))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#lhs0) #v = #lhs1;&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);&#10;  #lhs0 = #v;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[1543] postincrement_assignment_array, postincrement_assignment_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e[#e0]++;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#lhs0 (program LeftHandSide))), \new(#v0 (program Variable), \typeof(#e0 (program Expression))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#e0) #v0 = #e0;&#10;  #typeof(#lhs0) #v1 = #v[#v0];&#10;  #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);&#10;  #lhs0 = #v1;&#10;..…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1544] postincrement_assignment_attribute, postincrement_assignment_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = #e.#attribute++;&#10;... }\] (post))&#10;\varcond(\new(#v1 (program Variable), \typeof(#lhs0 (program LeftHandSide))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#lhs0) #v1 = #v.#attribute;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute +&#10;                                           1);&#10;  #lhs0 = #v1;&#10;... }\] (post)) &#10;\h…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1545] postincrement_attribute, postincrement_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #e.#attribute++;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute +&#10;                                           1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1546] pow2InIntLower, pow2InIntLower {&#10;\find(leq(pow(Z(2(#)),exp),Z(neglit(9(4(6(3(8(4(7(4(1(2(#)))))))))))))==&gt;)&#10;\add []==&gt;[geq(exp,Z(0(#)))] &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1547] pow2InIntUpper, pow2InIntUpper {&#10;\find(geq(pow(Z(2(#)),exp),Z(8(4(6(3(8(4(7(4(1(2(#))))))))))))==&gt;)&#10;\add []==&gt;[and(geq(exp,Z(0(#))),leq(exp,Z(0(3(#)))))] &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1548] powAdd, powAdd {&#10;\find(pow(base,add(exp,exp_2)))&#10;\replacewith(if-then-else(and(geq(exp,Z(0(#))),geq(exp_2,Z(0(#)))),mul(pow(base,exp),pow(base,exp_2)),pow(base,add(exp,exp_2)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1549] powConcrete0, powConcrete0 {&#10;\find(pow(base,Z(0(#))))&#10;\replacewith(Z(1(#))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1550] powConcrete1, powConcrete1 {&#10;\find(pow(base,Z(1(#))))&#10;\replacewith(base) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1551] powDef, powDef {&#10;\find(pow(base,exp))&#10;\varcond(\notFreeIn(i (variable), base (int term)), \notFreeIn(i (variable), exp (int term)))&#10;\replacewith(if-then-else(geq(exp,Z(0(#))),bprod{i (variable)}(Z(0(#)),exp,base),undefinedPow(base,exp))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1552] powGeq1Concrete, powGeq1Concrete {&#10;\find(leq(pow(base,exp),Z(0(#)))==&gt;)&#10;\add []==&gt;[and(geq(exp,Z(0(#))),geq(base,Z(1(#))))] &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1553] powIsInfinite1, powIsInfinite1 {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(or(and(and(or(geqDouble(arg1,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))),leqDouble(arg1,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))),doubleIsInfinite(arg2)),gtDouble(arg2,DFP(0(#)))),and(and(and(ltDouble(arg1,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))),gtDouble(arg1,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))),doubleIsInfinite(arg2)),ltDouble(arg2,…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1554] powIsInfinite2, powIsInfinite2 {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(or(and(eqDouble(arg1,DFP(0(#))),ltDouble(arg2,DFP(0(#)))),and(and(doubleIsInfinite(arg1),gtDouble(arg1,DFP(0(#)))),gtDouble(arg2,DFP(0(#))))),and(doubleIsInfinite(powDouble(arg1,arg2)),gtDouble(powDouble(arg1,arg2),DFP(0(#)))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1555] powIsNaN1, powIsNaN1 {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(doubleIsNaN(arg2),doubleIsNaN(powDouble(arg1,arg2)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1556] powIsNaN2, powIsNaN2 {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(and(doubleIsNaN(arg1),not(equals(arg2,DFP(0(#))))),doubleIsNaN(powDouble(arg1,arg2)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1557] powIsNaN3, powIsNaN3 {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(and(or(geqDouble(arg1,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))),leqDouble(arg1,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))),doubleIsInfinite(arg2)),doubleIsNaN(powDouble(arg1,arg2)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1558] powIsNotNaN, powIsNotNaN {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(and(not(doubleIsNaN(arg1)),equals(arg2,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),equals(powDouble(arg1,arg2),arg1))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1559] powIsOne, powIsOne {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(equals(arg2,DFP(0(#))),equals(powDouble(arg1,arg2),DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1560] powIsZero1, powIsZero1 {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(or(and(and(or(geqDouble(arg1,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))),leqDouble(arg1,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))),doubleIsInfinite(arg2)),ltDouble(arg2,DFP(0(#)))),and(and(and(ltDouble(arg1,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))),gtDouble(arg1,negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))),doubleIsInfinite(arg2)),gtDouble(arg2,DFP(…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1561] powIsZero2, powIsZero2 {&#10;\find(powDouble(arg1,arg2))&#10;\add [imp(or(and(eqDouble(arg1,DFP(0(#))),gtDouble(arg2,DFP(0(#)))),and(and(doubleIsInfinite(arg1),gtDouble(arg1,DFP(0(#)))),ltDouble(arg2,DFP(0(#))))),equals(powDouble(arg1,arg2),DFP(0(#))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1562] powLogLess, powLogLess {&#10;\find(pow(base,log(base,exp)))&#10;\add [imp(and(geq(exp,Z(1(#))),gt(base,Z(1(#)))),leq(pow(base,log(base,exp)),exp))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1563] powLogMore2, powLogMore2 {&#10;\find(pow(base,log(base,x)))&#10;\add [imp(and(equals(base,Z(2(#))),geq(x,Z(1(#)))),lt(sub(x,pow(base,log(base,x))),pow(base,log(base,x))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1564] powMono, powMono {&#10;\find(leq(pow(base,exp),pow(base,exp_2)))&#10;\add [imp(and(and(geq(exp,Z(0(#))),geq(exp_2,exp)),geq(base,Z(1(#)))),leq(pow(base,exp),pow(base,exp_2)))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1565] powMonoConcrete, powMonoConcrete {&#10;\find(leq(pow(base,exp_2),add(Z(neglit(1(#))),pow(base,exp)))==&gt;)&#10;\add []==&gt;[and(and(geq(exp,Z(0(#))),geq(exp_2,exp)),geq(base,Z(1(#))))] &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1566] powMonoConcreteRight, powMonoConcreteRight {&#10;\find(==&gt;leq(pow(base,exp),pow(base,exp_2)))&#10;\add []==&gt;[and(and(geq(exp,Z(0(#))),geq(exp_2,exp)),geq(base,Z(1(#))))] &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[1567] powPositive, powPositive {&#10;\find(pow(base,exp))&#10;\add [imp(and(geq(exp,Z(0(#))),geq(base,Z(1(#)))),geq(pow(base,exp),Z(1(#))))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1568] powPositiveConcrete, powPositiveConcrete {&#10;\find(leq(pow(base,exp),Z(neglit(1(#))))==&gt;)&#10;\add []==&gt;[and(geq(exp,Z(0(#))),geq(base,Z(1(#))))] &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1569] powSplitFactor, powSplitFactor {&#10;\find(pow(base,exp))&#10;\replacewith(if-then-else(geq(exp,Z(0(#))),if-then-else(geq(exp,Z(1(#))),mul(base,pow(base,sub(exp,Z(1(#))))),Z(1(#))),undefinedPow(base,exp))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1570] pow_literals, pow_literals {&#10;\find(pow(Z(iz),Z(jz)))&#10;\replacewith(#pow(Z(iz),Z(jz))) &#10;\heuristics(nonDuplicateAppCheckEq, simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1571] precOfDouble, precOfDouble {&#10;\find(prec(d1,d2))&#10;\replacewith(ltDouble(d1,d2)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1572] precOfFloat, precOfFloat {&#10;\find(prec(f1,f2))&#10;\replacewith(ltFloat(f1,f2)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1573] precOfInt, precOfInt {&#10;\find(prec(a,b))&#10;\replacewith(and(leq(Z(0(#)),a),lt(a,b))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1574] precOfIntPair, precOfIntPair {&#10;\find(prec(a,pair(b,x)))&#10;\replacewith(and(leq(Z(0(#)),a),leq(a,b))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1575] precOfPair, precOfPair {&#10;\find(prec(pair(a1,b1),pair(a2,b2)))&#10;\replacewith(or(prec(a1,a2),and(equals(a1,a2),prec(b1,b2)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1576] precOfPairInt, precOfPairInt {&#10;\find(prec(pair(a,x),b))&#10;\replacewith(and(leq(Z(0(#)),a),lt(a,b))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1577] precOfSeq, precOfSeq {&#10;\find(prec(s1,s2))&#10;\varcond(\notFreeIn(jv (variable), s2 (Seq term)), \notFreeIn(jv (variable), s1 (Seq term)), \notFreeIn(iv (variable), s2 (Seq term)), \notFreeIn(iv (variable), s1 (Seq term)))&#10;\replacewith(or(and(equals(seqLen(s1),seqLen(s2)),exists{iv (variable)}(and(and(and(leq(Z(0(#)),iv),lt(iv,seqLen(s1))),prec(any::seqGet(s1,iv),any::seqGet(s2,iv))),all{jv (variable)}(imp(and(leq(Z(0(#)),jv),lt(jv,iv)),equals(any::seqGet(s1,jv),any::seqGet(s2,jv))))))),lt(seqLen(s1),seqLen(s2)))) &#10;Choic…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1578] predecrement, predecrement {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  --#lhs1;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1579] predecrement_array, predecrement_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  --#e[#e0];&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1580] predecrement_assignment, predecrement_assignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = --#lhs1;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 - 1);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1581] predecrement_assignment_array, predecrement_assignment_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = --#e[#e0];&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] - 1);&#10;  #lhs0 = #v[#v0];&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1582] predecrement_assignment_attribute, predecrement_assignment_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = --#e.#attribute;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute -&#10;                                           1);&#10;  #lhs = #v.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1583] predecrement_attribute, predecrement_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  --#e.#attribute;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute -&#10;                                           1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1584] preincrement, preincrement {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  ++#lhs1;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1585] preincrement_array, preincrement_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  ++#e[#e0];&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1586] preincrement_assignment, preincrement_assignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = ++#lhs1;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs1 = (#typeof(#lhs1)) (#lhs1 + 1);&#10;  #lhs0 = #lhs1;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1587] preincrement_assignment_array, preincrement_assignment_array {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = ++#e[#e0];&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#e0 (program Expression))), \new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #typeof(#e0) #v0 = #e0;&#10;  #v[#v0] = (#typeof(#e[#e0])) (#v[#v0] + 1);&#10;  #lhs0 = #v[#v0];&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1588] preincrement_assignment_attribute, preincrement_assignment_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs0 = ++#e.#attribute;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute +&#10;                                           1);&#10;  #lhs0 = #v.#attribute;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1589] preincrement_attribute, preincrement_attribute {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  ++#e.#attribute;&#10;... }\] (post))&#10;\varcond(\new(#v (program Variable), \typeof(#e (program Expression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#e) #v = #e;&#10;  #v.#attribute = (#typeof(#attribute)) (#v.#attribute +&#10;                                           1);&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1590] prod_empty, prod_empty {&#10;\find(prod{x (variable)}(FALSE,t))&#10;\replacewith(Z(1(#))) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1591] prod_one, prod_one {&#10;\find(prod{x (variable)}(range,Z(1(#))))&#10;\replacewith(Z(1(#))) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1592] pullOut, pullOut {&#10;\find(t)&#10;\sameUpdateLevel\add [equals(t,sk)]==&gt;[] \replacewith(sk) &#10;\heuristics(semantics_blasting)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1593] pullOutSelect, pullOutSelect {&#10;\find(beta::select(h,o,f))&#10;\sameUpdateLevel\add [equals(beta::select(h,o,f),selectSK&lt;&lt;selectSK&gt;&gt;)]==&gt;[] \replacewith(selectSK&lt;&lt;selectSK&gt;&gt;) &#10;\heuristics(pull_out_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1594] pullOutbsum1, pullOutbsum1 {&#10;\find(geq(bsum{uSub1 (variable)}(i0,i1,t1),t)==&gt;)&#10;\add [equals(bsum{uSub1 (variable)}(i0,i1,t1),sk)]==&gt;[] \replacewith([geq(sk,t)]==&gt;[]) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1595] pullOutbsum2, pullOutbsum2 {&#10;\find(leq(bsum{uSub1 (variable)}(i0,i1,t1),t)==&gt;)&#10;\add [equals(bsum{uSub1 (variable)}(i0,i1,t1),sk)]==&gt;[] \replacewith([leq(sk,t)]==&gt;[]) &#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1596] pull_out_neg_1, pull_out_neg_1 {&#10;\find(mul(neg(i0),i1))&#10;\replacewith(neg(mul(i0,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1597] pull_out_neg_2, pull_out_neg_2 {&#10;\find(mul(i0,neg(i1)))&#10;\replacewith(neg(mul(i0,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1598] qeq_literals, qeq_literals {&#10;\find(geq(Z(iz),Z(jz)))&#10;\replacewith(#geq(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1599] reachAddOne, reachAddOne {&#10;\find(reach(h,s,o,o2,add(Z(1(#)),n)))&#10;\varcond(\notFreeIn(ov (variable), n (int term)), \notFreeIn(ov (variable), o2 (java.lang.Object term)), \notFreeIn(ov (variable), o (java.lang.Object term)), \notFreeIn(ov (variable), s (LocSet term)), \notFreeIn(ov (variable), h (Heap term)))&#10;\replacewith(and(and(and(geq(n,Z(neglit(1(#)))),not(equals(o,null))),not(equals(o2,null))),or(and(equals(n,Z(neglit(1(#)))),equals(o,o2)),exists{ov (variable)}(and(reach(h,s,o,ov,n),acc(h,s,ov,o2)))))) &#10;\heuristics…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1600] reachAddOne2, reachAddOne2 {&#10;\find(reach(h,s,o,o2,add(n,Z(1(#)))))&#10;\varcond(\notFreeIn(ov (variable), n (int term)), \notFreeIn(ov (variable), o2 (java.lang.Object term)), \notFreeIn(ov (variable), o (java.lang.Object term)), \notFreeIn(ov (variable), s (LocSet term)), \notFreeIn(ov (variable), h (Heap term)))&#10;\replacewith(and(and(and(geq(n,Z(neglit(1(#)))),not(equals(o,null))),not(equals(o2,null))),or(and(equals(n,Z(neglit(1(#)))),equals(o,o2)),exists{ov (variable)}(and(reach(h,s,o,ov,n),acc(h,s,ov,o2)))))) &#10;\heuristic…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1601] reachDefinition, reachDefinition {&#10;\find(reach(h,s,o,o2,n))&#10;\varcond(\notFreeIn(ov (variable), n (int term)), \notFreeIn(ov (variable), o2 (java.lang.Object term)), \notFreeIn(ov (variable), o (java.lang.Object term)), \notFreeIn(ov (variable), s (LocSet term)), \notFreeIn(ov (variable), h (Heap term)))&#10;\replacewith(and(and(and(geq(n,Z(0(#))),not(equals(o,null))),not(equals(o2,null))),or(and(equals(n,Z(0(#))),equals(o,o2)),exists{ov (variable)}(and(reach(h,s,o,ov,sub(n,Z(1(#)))),acc(h,s,ov,o2)))))) &#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1602] reachDependenciesAnon, reachDependenciesAnon {&#10;\find(reach(anon(h,s2,h2),s,o,o2,n))&#10;\sameUpdateLevel\varcond(\notFreeIn(nv (variable), n (int term)), \notFreeIn(nv (variable), o2 (java.lang.Object term)), \notFreeIn(nv (variable), o (java.lang.Object term)), \notFreeIn(nv (variable), s (LocSet term)), \notFreeIn(nv (variable), h2 (Heap term)), \notFreeIn(nv (variable), s2 (LocSet term)), \notFreeIn(nv (variable), h (Heap term)), \notFreeIn(fv (variable), n (int term)), \notFreeIn(fv (variable), o2 (java.lang.Object term)), \notF…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1603] reachDependenciesAnonCoarse, reachDependenciesAnonCoarse {&#10;\find(reach(anon(h,s2,h2),s,o,o2,n))&#10;\sameUpdateLevel\varcond(\notFreeIn(nv (variable), n (int term)), \notFreeIn(nv (variable), o2 (java.lang.Object term)), \notFreeIn(nv (variable), o (java.lang.Object term)), \notFreeIn(nv (variable), s (LocSet term)), \notFreeIn(nv (variable), h2 (Heap term)), \notFreeIn(nv (variable), s2 (LocSet term)), \notFreeIn(nv (variable), h (Heap term)), \notFreeIn(fv (variable), n (int term)), \notFreeIn(fv (variable), o2 (java.lang.Object term)),…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1604] reachDependenciesStore, reachDependenciesStore {&#10;\find(reach(store(h,o3,f,x),s,o,o2,n))&#10;\sameUpdateLevel\varcond(\notFreeIn(nv (variable), n (int term)), \notFreeIn(nv (variable), o2 (java.lang.Object term)), \notFreeIn(nv (variable), o (java.lang.Object term)), \notFreeIn(nv (variable), s (LocSet term)), \notFreeIn(nv (variable), x (any term)), \notFreeIn(nv (variable), f (Field term)), \notFreeIn(nv (variable), o3 (java.lang.Object term)), \notFreeIn(nv (variable), h (Heap term)))&#10;\add [not(and(exists{nv (variable)}(and(lt(nv,n…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1605] reachDependenciesStoreEQ, reachDependenciesStoreEQ {&#10;\assumes ([equals(store(h,o3,f,x),h2)]==&gt;[]) &#10;\find(reach(h2,s,o,o2,n))&#10;\sameUpdateLevel\varcond(\notFreeIn(nv (variable), n (int term)), \notFreeIn(nv (variable), o2 (java.lang.Object term)), \notFreeIn(nv (variable), o (java.lang.Object term)), \notFreeIn(nv (variable), s (LocSet term)), \notFreeIn(nv (variable), x (any term)), \notFreeIn(nv (variable), f (Field term)), \notFreeIn(nv (variable), o3 (java.lang.Object term)), \notFreeIn(nv (variable), h (Heap term)))&#10;\add [not(an…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1606] reachDependenciesStoreSimple, reachDependenciesStoreSimple {&#10;\find(reach(store(h,o3,f2,x),allObjects(f),o,o2,n))&#10;\varcond(\metaDisjoint f (Field term), f2 (Field term), )&#10;\replacewith(reach(h,allObjects(f),o,o2,n)) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1607] reachDependenciesStoreSimpleEQ, reachDependenciesStoreSimpleEQ {&#10;\assumes ([equals(store(h,o3,f2,x),h2)]==&gt;[]) &#10;\find(reach(h2,allObjects(f),o,o2,n))&#10;\varcond(\metaDisjoint f (Field term), f2 (Field term), )&#10;\replacewith(reach(h,allObjects(f),o,o2,n)) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1608] reachDoesNotDependOnCreatedness, reachDoesNotDependOnCreatedness {&#10;\find(reach(create(h,o3),s,o,o2,n))&#10;\replacewith(reach(h,s,o,o2,n)) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1609] reachEndOfUniquePath, reachEndOfUniquePath {&#10;\assumes ([reach(h,allObjects(f),o,o2,n),equals(alpha::select(h,o2,f),null),equals(alpha::select(h,o3,f),null)]==&gt;[]) &#10;\find(reach(h,allObjects(f),o,o3,n2)==&gt;)&#10;\varcond(\different (n (int term), n2 (int term)), )&#10;\add [and(equals(o2,o3),equals(n,n2))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1610] reachEndOfUniquePath2, reachEndOfUniquePath2 {&#10;\assumes ([reach(h,allObjects(f),o,o2,n),equals(alpha::select(h,o2,f),null)]==&gt;[]) &#10;\find(reach(h,allObjects(f),o,o3,n2)==&gt;)&#10;\varcond(\different (o (java.lang.Object term), o2 (java.lang.Object term)), \different (n (int term), n2 (int term)), )&#10;\add [or(lt(n2,n),and(equals(o2,o3),equals(n,n2)))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1611] reachNull, reachNull {&#10;\find(reach(h,s,o,null,n))&#10;\replacewith(false) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1612] reachNull2, reachNull2 {&#10;\find(reach(h,s,null,o2,n))&#10;\replacewith(false) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1613] reachOne, reachOne {&#10;\find(reach(h,s,o,o2,Z(1(#))))&#10;\replacewith(acc(h,s,o,o2)) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1614] reachUniquePathSameSteps, reachUniquePathSameSteps {&#10;\assumes ([reach(h,allObjects(f),o,o2,n)]==&gt;[]) &#10;\find(reach(h,allObjects(f),o,o3,n)==&gt;)&#10;\varcond(\different (o2 (java.lang.Object term), o3 (java.lang.Object term)), )&#10;\add [equals(o2,o3)]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1615] reachZero, reachZero {&#10;\find(reach(h,s,o,o2,Z(0(#))))&#10;\replacewith(and(not(equals(o,null)),equals(o,o2))) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1616] reach_does_not_depend_on_fresh_locs, reach_does_not_depend_on_fresh_locs {&#10;\assumes ([]==&gt;[equals(o,null)]) &#10;\find(reach(anon(h,empty,h2),s,o,o2,n))&#10;\add []==&gt;[and(wellFormed(h),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))] ;&#10;\replacewith(reach(h,s,o,o2,n)) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1617] reach_does_not_depend_on_fresh_locs_EQ, reach_does_not_depend_on_fresh_locs_EQ {&#10;\assumes ([equals(anon(h,empty,h2),EQ)]==&gt;[equals(o,null)]) &#10;\find(reach(EQ,s,o,o2,n))&#10;\add []==&gt;[and(wellFormed(h),equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE))] ;&#10;\replacewith(reach(h,s,o,o2,n)) &#10;\heuristics(simplify)&#10;Choices: reach:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1618] readPermission, readPermission {&#10;\find(readPermission(p))&#10;\replacewith(readPermissionObject(currentThread,p)) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1619] readPermissionObject, readPermissionObject {&#10;\find(readPermissionObject(o,p))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: permissions:off}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1620] reference_type_cast, reference_type_cast {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#npit) #se;&#10;... }\] (post))&#10;\varcond(\hasSort(#npit (program NonPrimitiveType), G), \not\sub(\typeof(#se (program SimpleExpression)), G), )&#10;\add []==&gt;[or(equals(#se,null),equals(G::instance(#se),TRUE))] \replacewith([]==&gt;[false]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(#lhs (program LeftHandSide))(#addCast(#se,#lhs)),#allmodal(post))]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1621] referencedObjectIsCreatedRight, referencedObjectIsCreatedRight {&#10;\assumes ([]==&gt;[equals(deltaObject::select(h,o,f),null)]) &#10;\find(==&gt;equals(boolean::select(h,deltaObject::select(h,o,f),java.lang.Object::&lt;created&gt;),TRUE))&#10;\replacewith([]==&gt;[wellFormed(h)]) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1622] referencedObjectIsCreatedRightEQ, referencedObjectIsCreatedRightEQ {&#10;\assumes ([equals(deltaObject::select(h,o,f),EQ)]==&gt;[equals(EQ,null)]) &#10;\find(==&gt;equals(boolean::select(h,EQ,java.lang.Object::&lt;created&gt;),TRUE))&#10;\replacewith([]==&gt;[wellFormed(h)]) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1623] regExAxiom, regExAxiom {&#10;\find(match(regEx(stringAsPattern),string))&#10;\replacewith(equals(string,stringAsPattern)) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1624] regExConcatAltLeft, regExConcatAltLeft {&#10;\find(match(regExConcat(alt(rexp1,rexp2),rexp3),string))&#10;\replacewith(or(match(regExConcat(rexp1,rexp3),string),match(regExConcat(rexp2,rexp3),string))) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1625] regExConcatAltRight, regExConcatAltRight {&#10;\find(match(regExConcat(rexp1,alt(rexp2,rexp3)),string))&#10;\replacewith(or(match(regExConcat(rexp1,rexp2),string),match(regExConcat(rexp1,rexp3),string))) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1626] regExConcatAxiom, regExConcatAxiom {&#10;\find(match(regExConcat(rexp1,rexp2),string))&#10;\varcond(\notFreeIn(endIdx (variable), string (Seq term)), \notFreeIn(endIdx (variable), rexp2 (RegEx term)), \notFreeIn(endIdx (variable), rexp1 (RegEx term)))&#10;\replacewith(exists{endIdx (variable)}(and(and(and(geq(endIdx,Z(0(#))),leq(endIdx,seqLen(string))),match(rexp1,seqSub(string,Z(0(#)),endIdx))),match(rexp2,seqSub(string,endIdx,seqLen(string)))))) &#10;\heuristics(simplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1627] regExConcatConcreteStringLeft, regExConcatConcreteStringLeft {&#10;\find(match(regExConcat(regEx(pattern),rexp),string))&#10;\replacewith(and(and(leq(seqLen(pattern),seqLen(string)),match(regEx(pattern),seqSub(string,Z(0(#)),seqLen(pattern)))),match(rexp,seqSub(string,seqLen(pattern),seqLen(string))))) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1628] regExConcatConcreteStringRight, regExConcatConcreteStringRight {&#10;\find(match(regExConcat(rexp,regEx(pattern)),string))&#10;\replacewith(and(and(leq(seqLen(pattern),seqLen(string)),match(rexp,seqSub(string,Z(0(#)),sub(seqLen(string),seqLen(pattern))))),match(regEx(pattern),seqSub(string,sub(seqLen(string),seqLen(pattern)),seqLen(string))))) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1629] regExConcatOptLeft, regExConcatOptLeft {&#10;\find(match(regExConcat(opt(rexp1),rexp2),string))&#10;\replacewith(or(match(rexp2,string),match(regExConcat(rexp1,rexp2),string))) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1630] regExConcatOptRight, regExConcatOptRight {&#10;\find(match(regExConcat(rexp1,opt(rexp2)),string))&#10;\replacewith(or(match(rexp1,string),match(regExConcat(rexp1,rexp2),string))) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1631] regExConcatRepeatLeft, regExConcatRepeatLeft {&#10;\find(match(regExConcat(repeat(rexp1,nTimes),rexp2),string))&#10;\varcond(\notFreeIn(string2 (variable), nTimes (int term)), \notFreeIn(string2 (variable), rexp2 (RegEx term)), \notFreeIn(string2 (variable), rexp1 (RegEx term)), \notFreeIn(string2 (variable), string (Seq term)), \notFreeIn(string1 (variable), nTimes (int term)), \notFreeIn(string1 (variable), rexp2 (RegEx term)), \notFreeIn(string1 (variable), rexp1 (RegEx term)), \notFreeIn(string1 (variable), string (Seq term)))&#10;\repl…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1632] regExConcatRepeatRight, regExConcatRepeatRight {&#10;\find(match(regExConcat(rexp1,repeat(rexp2,nTimes)),string))&#10;\varcond(\notFreeIn(string2 (variable), nTimes (int term)), \notFreeIn(string2 (variable), rexp2 (RegEx term)), \notFreeIn(string2 (variable), rexp1 (RegEx term)), \notFreeIn(string2 (variable), string (Seq term)), \notFreeIn(string1 (variable), nTimes (int term)), \notFreeIn(string1 (variable), rexp2 (RegEx term)), \notFreeIn(string1 (variable), rexp1 (RegEx term)), \notFreeIn(string1 (variable), string (Seq term)))&#10;\rep…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1633] removeZeros, removeZeros {&#10;\find(clRemoveZeros(l))&#10;\replacewith(if-then-else(or(equals(l,seqEmpty),equals(int::seqGet(l,Z(0(#))),C(8(4(#))))),l,clRemoveZeros(seqSub(l,Z(1(#)),seqLen(l))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1634] remove_parentheses_attribute_left, remove_parentheses_attribute_left {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  (#e.#attribute) = #e0;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #e.#attribute = #e0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1635] remove_parentheses_lhs_left, remove_parentheses_lhs_left {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  (#lhs) = #e;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1636] remove_parentheses_right, remove_parentheses_right {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (#e);&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #e;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1637] repeatAxiom, repeatAxiom {&#10;\find(match(repeat(rexp,nTimes),string))&#10;\varcond(\notFreeIn(endIdx (variable), string (Seq term)), \notFreeIn(endIdx (variable), nTimes (int term)), \notFreeIn(endIdx (variable), rexp (RegEx term)))&#10;\replacewith(if-then-else(lt(nTimes,Z(0(#))),false,if-then-else(equals(nTimes,Z(0(#))),equals(string,empty),exists{endIdx (variable)}(and(and(and(geq(endIdx,Z(0(#))),leq(endIdx,seqLen(string))),match(rexp,seqSub(string,Z(0(#)),endIdx))),match(repeat(rexp,sub(nTimes,Z(1(#)))),seqSub(string,endIdx,…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1638] repeatMatchEmpty, repeatMatchEmpty {&#10;\find(match(repeat(rexp,nTimes1),seqEmpty))&#10;\replacewith(or(equals(nTimes1,Z(0(#))),and(gt(nTimes1,Z(0(#))),match(rexp,seqEmpty)))) &#10;\heuristics(simplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1639] repeatOnce, repeatOnce {&#10;\find(repeat(rexp,Z(1(#))))&#10;\replacewith(rexp) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1640] repeatPlusAxiom, repeatPlusAxiom {&#10;\find(match(repeatPlus(rexp),string))&#10;\varcond(\notFreeIn(nTimes (variable), string (Seq term)), \notFreeIn(nTimes (variable), rexp (RegEx term)))&#10;\replacewith(exists{nTimes (variable)}(and(geq(nTimes,Z(1(#))),match(repeat(rexp,nTimes),string)))) &#10;\heuristics(simplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1641] repeatStarAxiom, repeatStarAxiom {&#10;\find(match(repeatStar(rexp),string))&#10;\varcond(\notFreeIn(nTimes (variable), string (Seq term)), \notFreeIn(nTimes (variable), rexp (RegEx term)))&#10;\replacewith(exists{nTimes (variable)}(and(geq(nTimes,Z(0(#))),match(repeat(rexp,nTimes),string)))) &#10;\heuristics(simplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1642] repeatZero, repeatZero {&#10;\find(repeat(rexp,Z(0(#))))&#10;\replacewith(regEx(seqEmpty)) &#10;\heuristics(concrete)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1643] replaceConcat, replaceConcat {&#10;\find(clReplace(seqConcat(leftStr,rightStr),searchChar,replaceChar))&#10;\replacewith(seqConcat(clReplace(leftStr,searchChar,replaceChar),clReplace(rightStr,searchChar,replaceChar))) &#10;\heuristics(stringsMoveReplaceInside)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1644] replaceCons, replaceCons {&#10;\find(clReplace(seqConcat(seqSingleton(fstChar),str),searchChar,replChar))&#10;\replacewith(if-then-else(equals(searchChar,fstChar),seqConcat(seqSingleton(replChar),clReplace(str,searchChar,replChar)),seqConcat(seqSingleton(fstChar),clReplace(str,searchChar,replChar)))) &#10;\heuristics(defOpsReplaceInline)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1645] replaceDef, replaceDef {&#10;\find(clReplace(str,searchChar,replChar))&#10;\sameUpdateLevel\varcond(\notFreeIn(pos (variable), replChar (int term)), \notFreeIn(pos (variable), searchChar (int term)), \notFreeIn(pos (variable), str (Seq term)))&#10;\add [and(equals(clReplace(str,searchChar,replChar),newSym),equals(seqDef{pos (variable)}(Z(0(#)),seqLen(str),if-then-else(equals(int::seqGet(str,pos),searchChar),replChar,int::seqGet(str,pos))),newSym))]==&gt;[] &#10;\heuristics(stringsIntroduceNewSym, defOpsReplace)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1646] replaceEmpty, replaceEmpty {&#10;\find(clReplace(seqEmpty,searchChar,replChar))&#10;\replacewith(seqEmpty) &#10;\heuristics(stringsSimplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1647] replaceSingleton, replaceSingleton {&#10;\find(clReplace(seqSingleton(fstChar),searchChar,replChar))&#10;\replacewith(if-then-else(equals(searchChar,fstChar),seqSingleton(replChar),seqSingleton(fstChar))) &#10;\heuristics(stringsSimplify)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1648] replaceSubstring, replaceSubstring {&#10;\assumes ([equals(seqSub(str,startIdx,endIdx),subStr)]==&gt;[]) &#10;\find(clReplace(subStr,searchChar,replaceChar))&#10;\sameUpdateLevel\replacewith(if-then-else(and(and(geq(startIdx,Z(0(#))),geq(endIdx,startIdx)),leq(endIdx,seqLen(str))),seqSub(clReplace(str,searchChar,replaceChar),startIdx,endIdx),clReplace(subStr,searchChar,replaceChar))) &#10;\heuristics(stringsMoveReplaceInside)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1649] replace_byte_HALFRANGE, replace_byte_HALFRANGE {&#10;\find(byte_HALFRANGE)&#10;\replacewith(Z(8(2(1(#))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1650] replace_byte_MAX, replace_byte_MAX {&#10;\find(byte_MAX)&#10;\replacewith(Z(7(2(1(#))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1651] replace_byte_MIN, replace_byte_MIN {&#10;\find(byte_MIN)&#10;\replacewith(Z(neglit(8(2(1(#)))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1652] replace_byte_RANGE, replace_byte_RANGE {&#10;\find(byte_RANGE)&#10;\replacewith(Z(6(5(2(#))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1653] replace_char_MAX, replace_char_MAX {&#10;\find(char_MAX)&#10;\replacewith(Z(5(3(5(5(6(#))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1654] replace_char_MIN, replace_char_MIN {&#10;\find(char_MIN)&#10;\replacewith(Z(0(#))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1655] replace_char_RANGE, replace_char_RANGE {&#10;\find(char_RANGE)&#10;\replacewith(Z(6(3(5(5(6(#))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1656] replace_int_HALFRANGE, replace_int_HALFRANGE {&#10;\find(int_HALFRANGE)&#10;\replacewith(Z(8(4(6(3(8(4(7(4(1(2(#)))))))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1657] replace_int_MAX, replace_int_MAX {&#10;\find(int_MAX)&#10;\replacewith(Z(7(4(6(3(8(4(7(4(1(2(#)))))))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1658] replace_int_MIN, replace_int_MIN {&#10;\find(int_MIN)&#10;\replacewith(Z(neglit(8(4(6(3(8(4(7(4(1(2(#))))))))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1659] replace_int_RANGE, replace_int_RANGE {&#10;\find(int_RANGE)&#10;\replacewith(Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1660] replace_known_left, replace_known_left {&#10;\assumes ([b]==&gt;[]) &#10;\find(b)&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(replace_known_left)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1661] replace_known_right, replace_known_right {&#10;\assumes ([]==&gt;[b]) &#10;\find(b)&#10;\sameUpdateLevel\replacewith(false) &#10;\heuristics(replace_known_right)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1662] replace_long_HALFRANGE, replace_long_HALFRANGE {&#10;\find(long_HALFRANGE)&#10;\replacewith(Z(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1663] replace_long_MAX, replace_long_MAX {&#10;\find(long_MAX)&#10;\replacewith(Z(7(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#))))))))))))))))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1664] replace_long_MIN, replace_long_MIN {&#10;\find(long_MIN)&#10;\replacewith(Z(neglit(8(0(8(5(7(7(4(5(8(6(3(0(2(7(3(3(2(2(9(#)))))))))))))))))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1665] replace_long_RANGE, replace_long_RANGE {&#10;\find(long_RANGE)&#10;\replacewith(Z(6(1(6(1(5(5(9(0(7(3(7(0(4(4(7(6(4(4(8(1(#)))))))))))))))))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1666] replace_short_HALFRANGE, replace_short_HALFRANGE {&#10;\find(short_HALFRANGE)&#10;\replacewith(Z(8(6(7(2(3(#))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1667] replace_short_MAX, replace_short_MAX {&#10;\find(short_MAX)&#10;\replacewith(Z(7(6(7(2(3(#))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1668] replace_short_MIN, replace_short_MIN {&#10;\find(short_MIN)&#10;\replacewith(Z(neglit(8(6(7(2(3(#)))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1669] replace_short_RANGE, replace_short_RANGE {&#10;\find(short_RANGE)&#10;\replacewith(Z(6(3(5(5(6(#))))))) &#10;\heuristics(defOps_expandRanges)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1670] returnUnfold, returnUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  return #nse;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0 = #nse;&#10;  return #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1671] rotate_and, rotate_and {&#10;\find(and(b,and(c,d)))&#10;\replacewith(and(c,and(b,d))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1672] rotate_or, rotate_or {&#10;\find(or(b,or(c,d)))&#10;\replacewith(or(c,or(b,d))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1673] rotate_params, rotate_params {&#10;\find(add(i,add(i0,i1)))&#10;\replacewith(add(i0,add(i,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1674] sameTypeFalse, sameTypeFalse {&#10;\assumes ([equals(G::exactInstance(x1),TRUE),equals(H::exactInstance(x2),TRUE)]==&gt;[]) &#10;\find(sameType(x1,x2))&#10;\varcond(\not\same(G, H), )&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1675] sameTypeTrue, sameTypeTrue {&#10;\assumes ([equals(G::exactInstance(x1),TRUE),equals(G::exactInstance(x2),TRUE)]==&gt;[]) &#10;\find(sameType(x1,x2))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1676] same_boxes_left, same_boxes_left {&#10;\assumes ([\[{ ..&#10;  #s&#10;... }\] (post)]==&gt;[]) &#10;\find(\[{ ..&#10;  #s&#10;... }\] (post1)==&gt;)&#10;\add [\[{ ..&#10;  #s&#10;... }\] (and(post,post1))]==&gt;[] &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1677] same_boxes_right, same_boxes_right {&#10;\assumes ([]==&gt;[\[{ ..&#10;  #s&#10;... }\] (post)]) &#10;\find(==&gt;\[{ ..&#10;  #s&#10;... }\] (post1))&#10;\add []==&gt;[\[{ ..&#10;  #s&#10;... }\] (or(post,post1))] &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1678] same_diamonds_left, same_diamonds_left {&#10;\assumes ([\&lt;{ ..&#10;  #s&#10;... }\&gt; (post)]==&gt;[]) &#10;\find(\&lt;{ ..&#10;  #s&#10;... }\&gt; (post1)==&gt;)&#10;\add [\&lt;{ ..&#10;  #s&#10;... }\&gt; (and(post,post1))]==&gt;[] &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1679] same_diamonds_right, same_diamonds_right {&#10;\assumes ([]==&gt;[\&lt;{&#10;  #s&#10;}\&gt; (post)]) &#10;\find(==&gt;\&lt;{&#10;  #s&#10;}\&gt; (post1))&#10;\add []==&gt;[\&lt;{&#10;  #s&#10;}\&gt; (or(post,post1))] &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1680] schiffl_lemma_2, schiffl_lemma_2 {&#10;\find(seqPerm(s,t)==&gt;)&#10;\varcond(\notFreeIn(y (variable), t (Seq term)), \notFreeIn(y (variable), s (Seq term)), \notFreeIn(x (variable), t (Seq term)), \notFreeIn(x (variable), s (Seq term)), \notFreeIn(r (variable), t (Seq term)), \notFreeIn(r (variable), s (Seq term)), \notFreeIn(iv (variable), t (Seq term)), \notFreeIn(iv (variable), s (Seq term)))&#10;\add [all{x (variable)}(all{y (variable)}(imp(and(and(and(and(and(equals(any::seqGet(s,x),any::seqGet(t,x)),equals(any::seqGet(s,y),any::se…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1681] schiffl_thm_1, schiffl_thm_1 {&#10;\find(seqPerm(s,t)==&gt;)&#10;\varcond(\notFreeIn(idx (variable), t (Seq term)), \notFreeIn(idx (variable), s (Seq term)), \notFreeIn(idx (variable), b (any term)), \notFreeIn(idx (variable), a (any term)), \notFreeIn(idx (variable), y (int term)), \notFreeIn(idx (variable), x (int term)))&#10;\add [imp(and(and(and(and(and(and(seqPerm(s,t),equals(any::seqGet(s,x),any::seqGet(t,x))),equals(any::seqGet(s,y),any::seqGet(t,y))),leq(Z(0(#)),x)),lt(x,seqLen(s))),leq(Z(0(#)),y)),lt(y,seqLen(s))),seqPerm(seqD…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1682] secondOfPair, secondOfPair {&#10;\find(second(pair(t,t1)))&#10;\replacewith(t1) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1683] selectCreatedOfAnon, selectCreatedOfAnon {&#10;\find(boolean::select(anon(h,s,h2),o,java.lang.Object::&lt;created&gt;))&#10;\replacewith(if-then-else(equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE),TRUE,boolean::select(h2,o,java.lang.Object::&lt;created&gt;))) &#10;\heuristics(simplify_heap_high_costs)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1684] selectCreatedOfAnonAsFormula, selectCreatedOfAnonAsFormula {&#10;\find(equals(boolean::select(anon(h,s,h2),o,java.lang.Object::&lt;created&gt;),TRUE))&#10;\replacewith(or(equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE),equals(boolean::select(h2,o,java.lang.Object::&lt;created&gt;),TRUE))) &#10;\heuristics(simplify_ENLARGING)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1685] selectCreatedOfAnonAsFormulaEQ, selectCreatedOfAnonAsFormulaEQ {&#10;\assumes ([equals(anon(h,s,h2),EQ)]==&gt;[]) &#10;\find(equals(boolean::select(EQ,o,java.lang.Object::&lt;created&gt;),TRUE))&#10;\sameUpdateLevel\replacewith(or(equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE),equals(boolean::select(h2,o,java.lang.Object::&lt;created&gt;),TRUE))) &#10;\heuristics(simplify_ENLARGING)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1686] selectCreatedOfAnonEQ, selectCreatedOfAnonEQ {&#10;\assumes ([equals(anon(h,s,h2),EQ)]==&gt;[]) &#10;\find(boolean::select(EQ,o,java.lang.Object::&lt;created&gt;))&#10;\sameUpdateLevel\replacewith(if-then-else(equals(boolean::select(h,o,java.lang.Object::&lt;created&gt;),TRUE),TRUE,boolean::select(h2,o,java.lang.Object::&lt;created&gt;))) &#10;\heuristics(simplify_heap_high_costs)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1687] selectOfAnon, selectOfAnon {&#10;\find(beta::select(anon(h,s,h2),o,f))&#10;\replacewith(if-then-else(or(and(elementOf(o,f,s),not(equals(f,java.lang.Object::&lt;created&gt;))),elementOf(o,f,freshLocs(h))),beta::select(h2,o,f),beta::select(h,o,f))) &#10;\heuristics(semantics_blasting)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1688] selectOfAnonEQ, selectOfAnonEQ {&#10;\assumes ([equals(anon(h,s,h2),EQ)]==&gt;[]) &#10;\find(beta::select(EQ,o,f))&#10;\sameUpdateLevel\replacewith(if-then-else(or(and(elementOf(o,f,s),not(equals(f,java.lang.Object::&lt;created&gt;))),elementOf(o,f,freshLocs(h))),beta::select(h2,o,f),beta::select(h,o,f))) &#10;\heuristics(simplify_heap_high_costs)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1689] selectOfCreate, selectOfCreate {&#10;\find(beta::select(create(h,o),o2,f))&#10;\replacewith(if-then-else(and(and(equals(o,o2),not(equals(o,null))),equals(f,java.lang.Object::&lt;created&gt;)),beta::cast(TRUE),beta::select(h,o2,f))) &#10;\heuristics(semantics_blasting)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1690] selectOfCreateEQ, selectOfCreateEQ {&#10;\assumes ([equals(create(h,o),EQ)]==&gt;[]) &#10;\find(beta::select(EQ,o2,f))&#10;\sameUpdateLevel\replacewith(if-then-else(and(and(equals(o,o2),not(equals(o,null))),equals(f,java.lang.Object::&lt;created&gt;)),beta::cast(TRUE),beta::select(h,o2,f))) &#10;\heuristics(simplify_heap_high_costs)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1691] selectOfMemset, selectOfMemset {&#10;\find(beta::select(memset(h,s,x),o,f))&#10;\replacewith(if-then-else(and(elementOf(o,f,s),not(equals(f,java.lang.Object::&lt;created&gt;))),beta::cast(x),beta::select(h,o,f))) &#10;\heuristics(semantics_blasting)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1692] selectOfMemsetEQ, selectOfMemsetEQ {&#10;\assumes ([equals(memset(h,s,x),EQ)]==&gt;[]) &#10;\find(beta::select(EQ,o,f))&#10;\sameUpdateLevel\replacewith(if-then-else(and(elementOf(o,f,s),not(equals(f,java.lang.Object::&lt;created&gt;))),beta::cast(x),beta::select(h,o,f))) &#10;\heuristics(simplify_heap_high_costs)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1693] selectOfStore, selectOfStore {&#10;\find(beta::select(store(h,o,f,x),o2,f2))&#10;\replacewith(if-then-else(and(and(equals(o,o2),equals(f,f2)),not(equals(f,java.lang.Object::&lt;created&gt;))),beta::cast(x),beta::select(h,o2,f2))) &#10;\heuristics(semantics_blasting)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1694] selectOfStoreEQ, selectOfStoreEQ {&#10;\assumes ([equals(store(h,o,f,x),EQ)]==&gt;[]) &#10;\find(beta::select(EQ,o2,f2))&#10;\sameUpdateLevel\replacewith(if-then-else(and(and(equals(o,o2),equals(f,f2)),not(equals(f,java.lang.Object::&lt;created&gt;))),beta::cast(x),beta::select(h,o2,f2))) &#10;\heuristics(simplify_heap_high_costs)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1695] seqConcatUnfoldLeft, seqConcatUnfoldLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \singleton(#nseLeft, #eRight);&#10;... }\] (post))&#10;\varcond(\new(#vLeftNew (program Variable), \typeof(#nseLeft (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseLeft) #vLeftNew = #nseLeft;&#10;  #v = \singleton(#vLeftNew, #eRight);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1696] seqConcatUnfoldRight, seqConcatUnfoldRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \singleton(#seLeft, #nseRight);&#10;... }\] (post))&#10;\varcond(\new(#vRightNew (program Variable), \typeof(#nseRight (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseRight) #vRightNew = #nseRight;&#10;  #v = \singleton(#seLeft, #vRightNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1697] seqConcatWithSeqEmpty1, seqConcatWithSeqEmpty1 {&#10;\find(seqConcat(seq,seqEmpty))&#10;\replacewith(seq) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1698] seqConcatWithSeqEmpty2, seqConcatWithSeqEmpty2 {&#10;\find(seqConcat(seqEmpty,seq))&#10;\replacewith(seq) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1699] seqDefOfSeq, seqDefOfSeq {&#10;\find(seqDef{u (variable)}(Z(0(#)),x,any::seqGet(s,u)))&#10;\varcond(\notFreeIn(v (variable), s (Seq term)), \notFreeIn(v (variable), x (int term)), \notFreeIn(u (variable), s (Seq term)), \notFreeIn(u (variable), x (int term)))&#10;\replacewith(if-then-else(equals(seqLen(s),x),s,if-then-else(gt(seqLen(s),x),seqSub(s,Z(0(#)),x),seqConcat(s,seqDef{v (variable)}(seqLen(s),x,seqGetOutside))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1700] seqDef_empty, seqDef_empty {&#10;\find(seqDef{uSub (variable)}(from,idx,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), idx (int term)), \notFreeIn(uSub (variable), from (int term)))&#10;\replacewith(seqEmpty) ;&#10;\add []==&gt;[leq(idx,from)] &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1701] seqDef_induction_lower, seqDef_induction_lower {&#10;\find(seqDef{uSub (variable)}(from,to,t))&#10;\varcond(\notFreeIn(uSub (variable), to (int term)), \notFreeIn(uSub (variable), from (int term)))&#10;\replacewith(seqConcat(if-then-else(lt(from,to),seqSingleton(subst{uSub (variable)}(from,t)),seqEmpty),seqDef{uSub (variable)}(add(from,Z(1(#))),to,t))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.012"/>
  <testcase name="[1702] seqDef_induction_lower_concrete, seqDef_induction_lower_concrete {&#10;\find(seqDef{uSub (variable)}(add(Z(neglit(1(#))),from),to,t))&#10;\varcond(\notFreeIn(uSub (variable), to (int term)), \notFreeIn(uSub (variable), from (int term)))&#10;\replacewith(seqConcat(if-then-else(lt(add(Z(neglit(1(#))),from),to),seqSingleton(subst{uSub (variable)}(add(Z(neglit(1(#))),from),t)),seqEmpty),seqDef{uSub (variable)}(from,to,t))) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1703] seqDef_induction_upper, seqDef_induction_upper {&#10;\find(seqDef{uSub (variable)}(from,to,t))&#10;\varcond(\notFreeIn(uSub (variable), to (int term)), \notFreeIn(uSub (variable), from (int term)))&#10;\replacewith(seqConcat(seqDef{uSub (variable)}(from,sub(to,Z(1(#))),t),if-then-else(lt(from,to),seqSingleton(subst{uSub (variable)}(sub(to,Z(1(#))),t)),seqEmpty))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1704] seqDef_induction_upper_concrete, seqDef_induction_upper_concrete {&#10;\find(seqDef{uSub (variable)}(from,add(Z(1(#)),to),t))&#10;\varcond(\notFreeIn(uSub (variable), to (int term)), \notFreeIn(uSub (variable), from (int term)))&#10;\replacewith(seqConcat(seqDef{uSub (variable)}(from,to,t),if-then-else(leq(from,to),seqSingleton(subst{uSub (variable)}(to,t)),seqEmpty))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1705] seqDef_lower_equals_upper, seqDef_lower_equals_upper {&#10;\find(seqDef{uSub (variable)}(idx,idx,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), idx (int term)))&#10;\replacewith(seqEmpty) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1706] seqDef_one_summand, seqDef_one_summand {&#10;\find(seqDef{uSub (variable)}(from,idx,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub (variable), idx (int term)), \notFreeIn(uSub (variable), from (int term)))&#10;\replacewith(if-then-else(equals(add(from,Z(1(#))),idx),seqSingleton(subst{uSub (variable)}(from,t)),seqDef{uSub (variable)}(from,idx,t))) &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1707] seqDef_split, seqDef_split {&#10;\find(seqDef{uSub (variable)}(from,to,t))&#10;\varcond(\notFreeIn(uSub1 (variable), t (any term)), \notFreeIn(uSub (variable), to (int term)), \notFreeIn(uSub (variable), idx (int term)), \notFreeIn(uSub (variable), from (int term)), \notFreeIn(uSub1 (variable), to (int term)), \notFreeIn(uSub1 (variable), idx (int term)), \notFreeIn(uSub1 (variable), from (int term)))&#10;\replacewith(if-then-else(and(leq(from,idx),lt(idx,to)),seqConcat(seqDef{uSub (variable)}(from,idx,t),seqDef{uSub1 (variable)}(i…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1708] seqDef_split_in_three, seqDef_split_in_three {&#10;\find(seqDef{uSub (variable)}(from,to,t))&#10;\sameUpdateLevel\varcond(\notFreeIn(uSub1 (variable), to (int term)), \notFreeIn(uSub (variable), from (int term)), \notFreeIn(uSub1 (variable), idx (int term)), \notFreeIn(uSub1 (variable), t (any term)), \notFreeIn(uSub (variable), idx (int term)))&#10;\replacewith(seqConcat(seqDef{uSub (variable)}(from,idx,t),seqConcat(seqSingleton(subst{uSub (variable)}(idx,t)),seqDef{uSub1 (variable)}(add(idx,Z(1(#))),to,subst{uSub (variable)}(uSub1,t))))) …" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1709] seqGetAlphaCast, seqGetAlphaCast {&#10;\find(alpha::seqGet(seq,at))&#10;\add [equals(alpha::cast(any::seqGet(seq,at)),alpha::seqGet(seq,at))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.014"/>
  <testcase name="[1710] seqGetUnfoldLeft, seqGetUnfoldLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = #nseLeft[#eRight];&#10;... }\] (post))&#10;\varcond(\new(#vLeftNew (program Variable), \typeof(#nseLeft (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseLeft) #vLeftNew = #nseLeft;&#10;  #v = #vLeftNew[#eRight];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1711] seqGetUnfoldRight, seqGetUnfoldRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = #seLeft[#nseRight];&#10;... }\] (post))&#10;\varcond(\new(#vRightNew (program Variable), \typeof(#nseRight (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseRight) #vRightNew = #nseRight;&#10;  #v = #seLeft[#vRightNew];&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1712] seqIndexOf, seqIndexOf {&#10;\find(seqIndexOf(s,t))&#10;\varcond(\notFreeIn(m (variable), t (any term)), \notFreeIn(m (variable), s (Seq term)), \notFreeIn(n (variable), t (any term)), \notFreeIn(n (variable), s (Seq term)))&#10;\add [imp(exists{n (variable)}(and(and(leq(Z(0(#)),n),lt(n,seqLen(s))),equals(any::seqGet(s,n),t))),and(and(and(leq(Z(0(#)),seqIndexOf(s,t)),lt(seqIndexOf(s,t),seqLen(s))),equals(any::seqGet(s,seqIndexOf(s,t)),t)),all{m (variable)}(imp(and(leq(Z(0(#)),m),lt(m,seqIndexOf(s,t))),not(equals(any::seqGet(s,m),…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1713] seqIndexOfUnfoldLeft, seqIndexOfUnfoldLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \indexOf(#nseLeft, #eRight);&#10;... }\] (post))&#10;\varcond(\new(#vLeftNew (program Variable), \typeof(#nseLeft (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseLeft) #vLeftNew = #nseLeft;&#10;  #v = \indexOf(#vLeftNew, #eRight);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1714] seqIndexOfUnfoldRight, seqIndexOfUnfoldRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \indexOf(#seLeft, #nseRight);&#10;... }\] (post))&#10;\varcond(\new(#vRightNew (program Variable), \typeof(#nseRight (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseRight) #vRightNew = #nseRight;&#10;  #v = \indexOf(#seLeft, #vRightNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1715] seqLengthUnfold, seqLengthUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = #nse.length;&#10;... }\] (post))&#10;\varcond(\new(#vNew (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #vNew = #nse;&#10;  #v = #vNew.length;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1716] seqOutsideValue, seqOutsideValue {&#10;\find(seqGetOutside)&#10;\add [all{s (variable)}(all{iv (variable)}(imp(or(lt(iv,Z(0(#))),leq(seqLen(s),iv)),equals(any::seqGet(s,iv),seqGetOutside))))]==&gt;[] &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1717] seqReverseOfSeqEmpty, seqReverseOfSeqEmpty {&#10;\find(seqReverse(seqEmpty))&#10;\replacewith(seqEmpty) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1718] seqReverseUnfold, seqReverseUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \seq_reverse(#nse);&#10;... }\] (post))&#10;\varcond(\new(#vNew (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #vNew = #nse;&#10;  #v = \seq_reverse(#vNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1719] seqSelfDefinition, seqSelfDefinition {&#10;\find(seq)&#10;\add [all{s (variable)}(equals(s,seqDef{u (variable)}(Z(0(#)),seqLen(s),any::seqGet(s,u))))]==&gt;[] &#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1720] seqSelfDefinitionEQ2, seqSelfDefinitionEQ2 {&#10;\assumes ([equals(seqLen(s),x)]==&gt;[]) &#10;\find(seqDef{u (variable)}(Z(0(#)),x,any::seqGet(s,u)))&#10;\sameUpdateLevel\varcond(\notFreeIn(u (variable), s (Seq term)), \notFreeIn(u (variable), x (int term)))&#10;\replacewith(s) &#10;\heuristics(simplify)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1721] seqSingletonUnfold, seqSingletonUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \seq_singleton(#nse);&#10;... }\] (post))&#10;\varcond(\new(#vNew (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #vNew = #nse;&#10;  #v = \seq_singleton(#vNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1722] seqSubUnfoldLeft, seqSubUnfoldLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \seq_sub(#nseLeft, #eMiddle, #eRight);&#10;... }\] (post))&#10;\varcond(\new(#vLeftNew (program Variable), \typeof(#nseLeft (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseLeft) #vLeftNew = #nseLeft;&#10;  #v = \seq_sub(#vLeftNew, #eMiddle, #eRight);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1723] seqSubUnfoldMiddle, seqSubUnfoldMiddle {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \seq_sub(#seLeft, #nseMiddle, #eRight);&#10;... }\] (post))&#10;\varcond(\new(#vMiddleNew (program Variable), \typeof(#nseMiddle (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseMiddle) #vMiddleNew = #nseMiddle;&#10;  #v = \seq_sub(#seLeft, #vMiddleNew, #eRight);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1724] seqSubUnfoldRight, seqSubUnfoldRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \seq_sub(#seLeft, #seMiddle, #nseRight);&#10;... }\] (post))&#10;\varcond(\new(#vRightNew (program Variable), \typeof(#nseRight (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseRight) #vRightNew = #nseRight;&#10;  #v = \seq_sub(#seLeft, #seMiddle, #vRightNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1725] sequentialToParallel1, sequentialToParallel1 {&#10;\find(update-application(u,update-application(u2,t)))&#10;\replacewith(update-application(parallel-upd(u,update-application(u,u2)),t)) &#10;\heuristics(update_join)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1726] sequentialToParallel2, sequentialToParallel2 {&#10;\find(update-application(u,update-application(u2,phi)))&#10;\replacewith(update-application(parallel-upd(u,update-application(u,u2)),phi)) &#10;\heuristics(update_join)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1727] sequentialToParallel3, sequentialToParallel3 {&#10;\find(update-application(u,update-application(u2,u3)))&#10;\replacewith(update-application(parallel-upd(u,update-application(u,u2)),u3)) &#10;\heuristics(update_join)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[1728] setIntersectUnfoldLeft, setIntersectUnfoldLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \intersect(#nseLeft, #eRight);&#10;... }\] (post))&#10;\varcond(\new(#vLeftNew (program Variable), \typeof(#nseLeft (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseLeft) #vLeftNew = #nseLeft;&#10;  #v = \intersect(#vLeftNew, #eRight);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1729] setIntersectUnfoldRight, setIntersectUnfoldRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \intersect(#seLeft, #nseRight);&#10;... }\] (post))&#10;\varcond(\new(#vRightNew (program Variable), \typeof(#nseRight (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseRight) #vRightNew = #nseRight;&#10;  #v = \intersect(#seLeft, #vRightNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1730] setJavaCardTransient, setJavaCardTransient {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  #jcsystemType.#setTransient(#se, #se1)@#jcsystemType;&#10;... }\] (post))&#10;\replacewith([]==&gt;[not(equals(#se,null))]) ;&#10;\replacewith([]==&gt;[update-application(elem-update(heap)(store(heap,#se,java.lang.Object::&lt;transient&gt;,#se1)),#allmodal(post))]) &#10;\heuristics(simplify_prog)&#10;Choices: (programRules:Java &amp; JavaCard:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1731] setMinusItself, setMinusItself {&#10;\find(setMinus(s,s))&#10;\replacewith(empty) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1732] setMinusOfUnion, setMinusOfUnion {&#10;\find(setMinus(union(s,s2),s3))&#10;\replacewith(union(setMinus(s,s3),setMinus(s2,s3))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1733] setMinusOfUnionEQ, setMinusOfUnionEQ {&#10;\assumes ([equals(union(s,s2),EQ)]==&gt;[]) &#10;\find(setMinus(EQ,s3))&#10;\sameUpdateLevel\replacewith(union(setMinus(s,s3),setMinus(s2,s3))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1734] setMinusSingleton, setMinusSingleton {&#10;\assumes ([]==&gt;[elementOf(o,f,s)]) &#10;\find(setMinus(s,singleton(o,f)))&#10;\replacewith(s) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1735] setMinusUnfoldLeft, setMinusUnfoldLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \set_minus(#nseLeft, #eRight);&#10;... }\] (post))&#10;\varcond(\new(#vLeftNew (program Variable), \typeof(#nseLeft (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseLeft) #vLeftNew = #nseLeft;&#10;  #v = \set_minus(#vLeftNew, #eRight);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1736] setMinusUnfoldRight, setMinusUnfoldRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \set_minus(#seLeft, #nseRight);&#10;... }\] (post))&#10;\varcond(\new(#vRightNew (program Variable), \typeof(#nseRight (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseRight) #vRightNew = #nseRight;&#10;  #v = \set_minus(#seLeft, #vRightNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1737] setMinusWithAllLocs, setMinusWithAllLocs {&#10;\find(setMinus(s,allLocs))&#10;\replacewith(empty) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1738] setMinusWithEmpty1, setMinusWithEmpty1 {&#10;\find(setMinus(s,empty))&#10;\replacewith(s) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1739] setMinusWithEmpty2, setMinusWithEmpty2 {&#10;\find(setMinus(empty,s))&#10;\replacewith(empty) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1740] setUnionUnfoldLeft, setUnionUnfoldLeft {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \set_union(#nseLeft, #eRight);&#10;... }\] (post))&#10;\varcond(\new(#vLeftNew (program Variable), \typeof(#nseLeft (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseLeft) #vLeftNew = #nseLeft;&#10;  #v = \set_union(#vLeftNew, #eRight);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1741] setUnionUnfoldRight, setUnionUnfoldRight {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \set_union(#seLeft, #nseRight);&#10;... }\] (post))&#10;\varcond(\new(#vRightNew (program Variable), \typeof(#nseRight (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseRight) #vRightNew = #nseRight;&#10;  #v = \set_union(#seLeft, #vRightNew);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1742] shiftLeftDef, shiftLeftDef {&#10;\find(shiftleft(left,right))&#10;\replacewith(if-then-else(lt(right,Z(0(#))),shiftrightPositiveShift(left,neg(right)),shiftleftPositiveShift(left,right))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1743] shiftLeftPositiveShiftDef, shiftLeftPositiveShiftDef {&#10;\find(shiftleftPositiveShift(left,right))&#10;\replacewith(mul(left,pow(Z(2(#)),right))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1744] shiftRightDef, shiftRightDef {&#10;\find(shiftright(left,right))&#10;\replacewith(if-then-else(lt(right,Z(0(#))),shiftleftPositiveShift(left,neg(right)),shiftrightPositiveShift(left,right))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1745] shiftRightPositiveShiftDef, shiftRightPositiveShiftDef {&#10;\find(shiftrightPositiveShift(left,right))&#10;\replacewith(div(left,pow(Z(2(#)),right))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1746] shift_paren_and, shift_paren_and {&#10;\find(and(assoc0,and(assoc1,assoc2)))&#10;\replacewith(and(and(assoc0,assoc1),assoc2)) &#10;\heuristics(cnf_andAssoc, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1747] shift_paren_or, shift_paren_or {&#10;\find(or(assoc0,or(assoc1,assoc2)))&#10;\replacewith(or(or(assoc0,assoc1),assoc2)) &#10;\heuristics(cnf_orAssoc, conjNormalForm)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1748] shiftleft_literals, shiftleft_literals {&#10;\find(shiftleft(Z(iz),Z(jz)))&#10;\replacewith(#ShiftLeft(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1749] shiftright_literals, shiftright_literals {&#10;\find(shiftright(Z(iz),Z(jz)))&#10;\replacewith(#ShiftRight(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1750] sign_case_distinction, sign_case_distinction {&#10;\add [geq(signCasesLeft,Z(1(#)))]==&gt;[] ;&#10;\add [equals(signCasesLeft,Z(0(#)))]==&gt;[] ;&#10;\add [leq(signCasesLeft,Z(neglit(1(#))))]==&gt;[] &#10;\heuristics(inEqSimp_signCases)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1751] simplifyIfThenElseUpdate1, simplifyIfThenElseUpdate1 {&#10;\find(if-then-else(phi,update-application(u1,t),update-application(u2,t)))&#10;\varcond(\simplifyIfThenElseUpdate(phi, u1, u2, t, result), )&#10;\replacewith(result) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1752] simplifyIfThenElseUpdate2, simplifyIfThenElseUpdate2 {&#10;\find(if-then-else(phi,t,update-application(u2,t)))&#10;\varcond(\simplifyIfThenElseUpdate(phi, u1, u2, t, result), )&#10;\replacewith(result) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1753] simplifyIfThenElseUpdate3, simplifyIfThenElseUpdate3 {&#10;\find(if-then-else(phi,update-application(u1,t),t))&#10;\varcond(\simplifyIfThenElseUpdate(phi, u1, u2, t, result), )&#10;\replacewith(result) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1754] simplifyIfThenElseUpdate4, simplifyIfThenElseUpdate4 {&#10;\find(if-then-else(phi,t,t))&#10;\varcond(\simplifyIfThenElseUpdate(phi, u1, u2, t, result), )&#10;\replacewith(result) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1755] simplifySelectOfAnon, simplifySelectOfAnon {&#10;\find(equals(beta::select(anon(h,s,h2),o,f),sk)==&gt;)&#10;\addrules [replaceKnownSelect {&#10;\find(beta::select(anon(h,s,h2),o,f))&#10;\inSequentState\replacewith(sk) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([equals(if-then-else(or(and(elementOf(o,f,s),not(equals(f,java.lang.Object::&lt;created&gt;))),elementOf(o,f,freshLocs(h))),beta::select(h2,o,f),beta::select(h,o,f)),sk)]==&gt;[]) &#10;\heuristics(simplify_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1756] simplifySelectOfAnonEQ, simplifySelectOfAnonEQ {&#10;\assumes ([equals(anon(h,s,h2),EQ)]==&gt;[]) &#10;\find(equals(beta::select(EQ,o,f),sk)==&gt;)&#10;\addrules [replaceKnownSelect {&#10;\find(beta::select(EQ,o,f))&#10;\inSequentState\replacewith(sk) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([equals(if-then-else(or(and(elementOf(o,f,s),not(equals(f,java.lang.Object::&lt;created&gt;))),elementOf(o,f,freshLocs(h))),beta::select(h2,o,f),beta::select(h,o,f)),sk)]==&gt;[]) &#10;\heuristics(simplify_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1757] simplifySelectOfCreate, simplifySelectOfCreate {&#10;\find(equals(beta::select(create(h,o),o2,f),sk)==&gt;)&#10;\addrules [replaceKnownSelect {&#10;\find(beta::select(create(h,o),o2,f))&#10;\inSequentState\replacewith(sk) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([equals(if-then-else(and(and(equals(o,o2),not(equals(o,null))),equals(f,java.lang.Object::&lt;created&gt;)),beta::cast(TRUE),beta::select(h,o2,f)),sk)]==&gt;[]) &#10;\heuristics(simplify_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1758] simplifySelectOfCreateEQ, simplifySelectOfCreateEQ {&#10;\assumes ([equals(create(h,o),EQ)]==&gt;[]) &#10;\find(equals(beta::select(EQ,o2,f),sk)==&gt;)&#10;\addrules [replaceKnownSelect {&#10;\find(beta::select(EQ,o2,f))&#10;\inSequentState\replacewith(sk) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([equals(if-then-else(and(and(equals(o,o2),not(equals(o,null))),equals(f,java.lang.Object::&lt;created&gt;)),beta::cast(TRUE),beta::select(h,o2,f)),sk)]==&gt;[]) &#10;\heuristics(simplify_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1759] simplifySelectOfMemset, simplifySelectOfMemset {&#10;\find(equals(beta::select(memset(h,s,x),o,f),sk)==&gt;)&#10;\addrules [replaceKnownSelect {&#10;\find(beta::select(memset(h,s,x),o,f))&#10;\inSequentState\replacewith(sk) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([equals(if-then-else(and(elementOf(o,f,s),not(equals(f,java.lang.Object::&lt;created&gt;))),x,beta::select(h,o,f)),sk)]==&gt;[]) &#10;\heuristics(simplify_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1760] simplifySelectOfMemsetEQ, simplifySelectOfMemsetEQ {&#10;\assumes ([equals(memset(h,s,x),EQ)]==&gt;[]) &#10;\find(equals(beta::select(EQ,o,f),sk)==&gt;)&#10;\addrules [replaceKnownSelect {&#10;\find(beta::select(EQ,o,f))&#10;\inSequentState\replacewith(sk) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([equals(if-then-else(and(elementOf(o,f,s),not(equals(f,java.lang.Object::&lt;created&gt;))),x,beta::select(h,o,f)),sk)]==&gt;[]) &#10;\heuristics(simplify_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1761] simplifySelectOfStore, simplifySelectOfStore {&#10;\find(equals(beta::select(store(h,o,f,x),o2,f2),sk)==&gt;)&#10;\addrules [replaceKnownSelect {&#10;\find(beta::select(store(h,o,f,x),o2,f2))&#10;\inSequentState\replacewith(sk) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([equals(if-then-else(and(and(equals(o,o2),equals(f,f2)),not(equals(f,java.lang.Object::&lt;created&gt;))),beta::cast(x),beta::select(h,o2,f2)),sk)]==&gt;[]) &#10;\heuristics(simplify_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1762] simplifySelectOfStoreEQ, simplifySelectOfStoreEQ {&#10;\assumes ([equals(store(h,o,f,x),EQ)]==&gt;[]) &#10;\find(equals(beta::select(EQ,o2,f2),sk)==&gt;)&#10;\addrules [replaceKnownSelect {&#10;\find(beta::select(EQ,o2,f2))&#10;\inSequentState\replacewith(sk) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}] \replacewith([equals(if-then-else(and(and(equals(o,o2),equals(f,f2)),not(equals(f,java.lang.Object::&lt;created&gt;))),beta::cast(x),beta::select(h,o2,f2)),sk)]==&gt;[]) &#10;\heuristics(simplify_select)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1763] simplifyUpdate1, simplifyUpdate1 {&#10;\find(update-application(u,t))&#10;\varcond(\dropEffectlessElementaries(u (update), t (any term), result (any term)), )&#10;\replacewith(result) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1764] simplifyUpdate2, simplifyUpdate2 {&#10;\find(update-application(u,phi))&#10;\varcond(\dropEffectlessElementaries(u (update), phi (formula), result (formula)), )&#10;\replacewith(result) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1765] simplifyUpdate3, simplifyUpdate3 {&#10;\find(update-application(u,u2))&#10;\varcond(\dropEffectlessElementaries(u (update), u2 (update), result (update)), )&#10;\replacewith(result) &#10;\heuristics(update_elim)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[1766] sinIsNaN, sinIsNaN {&#10;\find(sinDouble(arg))&#10;\add [imp(or(doubleIsNaN(arg),doubleIsInfinite(arg)),doubleIsNaN(sinDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1767] sinIsNotNaN, sinIsNotNaN {&#10;\find(sinDouble(arg))&#10;\add [imp(and(not(doubleIsNaN(arg)),not(doubleIsInfinite(arg))),not(doubleIsNaN(sinDouble(arg))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.013"/>
  <testcase name="[1768] sinRange2, sinRange2 {&#10;\find(sinDouble(arg))&#10;\add [imp(and(not(doubleIsNaN(arg)),not(doubleIsInfinite(arg))),and(geqDouble(sinDouble(arg),negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),leqDouble(sinDouble(arg),DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1769] sinRange3, sinRange3 {&#10;\find(sinDouble(arg))&#10;\add [imp(and(not(doubleIsNaN(arg)),not(doubleIsInfinite(arg))),and(geqDouble(mulDouble(sinDouble(arg),sinDouble(arg)),DFP(0(#))),leqDouble(mulDouble(sinDouble(arg),sinDouble(arg)),DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1770] sineIsNaNAlt, sineIsNaNAlt {&#10;\find(doubleIsNaN(sinDouble(arg)))&#10;\replacewith(or(doubleIsNaN(arg),doubleIsInfinite(arg))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1771] sineIsZero, sineIsZero {&#10;\find(sinDouble(arg))&#10;\add [imp(equals(arg,DFP(0(#))),equals(sinDouble(arg),DFP(0(#))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1772] sineRange, sineRange {&#10;\find(sinDouble(arg))&#10;\add [or(and(geqDouble(sinDouble(arg),negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),leqDouble(sinDouble(arg),DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),doubleIsNaN(sinDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1773] sineRangeAlt, sineRangeAlt {&#10;\find(==&gt;doubleIsNaN(sinDouble(arg)))&#10;\add [and(geqDouble(sinDouble(arg),negDouble(DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),leqDouble(sinDouble(arg),DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#))))))))))))))))))))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1774] singletonAssignment, singletonAssignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \singleton(#seObj.#a);&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#v (program Variable))(singleton(#seObj,#memberPVToField(#a))),#allmodal(post))) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1775] singletonEqualsEmpty, singletonEqualsEmpty {&#10;\find(equals(singleton(o,f),empty))&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1776] singletonUnfold, singletonUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #v = \singleton(#nseObj.#a);&#10;... }\] (post))&#10;\varcond(\new(#vObjNew (program Variable), \typeof(#nseObj (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nseObj) #vObjNew = #nseObj;&#10;  #v = \singleton(#vObjNew.#a);&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1777] sizeOfMapEmpty, sizeOfMapEmpty {&#10;\find(mapSize(mapEmpty))&#10;\sameUpdateLevel\replacewith(Z(0(#))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1778] sizeOfMapRemove, sizeOfMapRemove {&#10;\find(mapSize(mapRemove(m,key)))&#10;\add [imp(isFinite(m),equals(mapSize(mapRemove(m,key)),if-then-else(inDomain(m,key),sub(mapSize(m),Z(1(#))),mapSize(m))))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1779] sizeOfMapSingleton, sizeOfMapSingleton {&#10;\find(mapSize(mapSingleton(key,value)))&#10;\sameUpdateLevel\replacewith(Z(1(#))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1780] sizeOfMapUpdate, sizeOfMapUpdate {&#10;\find(mapSize(mapUpdate(m,key,value)))&#10;\add [imp(isFinite(m),equals(mapSize(mapUpdate(m,key,value)),if-then-else(inDomain(m,key),mapSize(m),add(mapSize(m),Z(1(#))))))]==&gt;[] &#10;\heuristics(inReachableStateImplication)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1781] sizeOfSeq2Map, sizeOfSeq2Map {&#10;\find(mapSize(seq2map(s)))&#10;\sameUpdateLevel\replacewith(seqLen(s)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1782] sortsDisjoint1, sortsDisjoint1 {&#10;\find(equals(x,y))&#10;\varcond(\not\sub(Null, G), \disjointModuloNull(G, H), )&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1783] sortsDisjoint2, sortsDisjoint2 {&#10;\find(equals(x,y))&#10;\varcond(\not\sub(Null, H), \disjointModuloNull(G, H), )&#10;\replacewith(false) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1784] sortsDisjointModuloNull, sortsDisjointModuloNull {&#10;\find(equals(x,y))&#10;\varcond(\strict\sub(Null, G), \strict\sub(Null, H), \disjointModuloNull(G, H), )&#10;\replacewith(and(equals(x,null),equals(y,null))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1785] special_constructor_call, special_constructor_call {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #scr&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  special-constructor-call(#scr)&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1786] splitEquation, splitEquation {&#10;\find(equals(splitEqLeft,splitEqRight))&#10;\replacewith(and(geq(splitEqLeft,splitEqRight),leq(splitEqLeft,splitEqRight))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1787] splitEquationSucc, splitEquationSucc {&#10;\find(==&gt;equals(splitEqLeft,splitEqRight))&#10;\replacewith([]==&gt;[leq(splitEqLeft,splitEqRight)]) ;&#10;\replacewith([]==&gt;[geq(splitEqLeft,splitEqRight)]) &#10;\heuristics(notHumanReadable, inEqSimp_split_eq, inEqSimp_nonLin)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1788] split_or_strong, split_or_strong {&#10;\find(or(b,c)==&gt;)&#10;\replacewith([c]==&gt;[b]) ;&#10;\replacewith([b]==&gt;[]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1789] sqrtIsInfinite, sqrtIsInfinite {&#10;\find(sqrtDouble(arg))&#10;\add [imp(and(doubleIsInfinite(arg),gtDouble(arg,DFP(0(#)))),and(doubleIsInfinite(sqrtDouble(arg)),gtDouble(sqrtDouble(arg),DFP(0(#)))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1790] sqrtIsNaN, sqrtIsNaN {&#10;\find(sqrtDouble(arg))&#10;\add [imp(or(doubleIsNaN(arg),ltDouble(arg,DFP(0(#)))),doubleIsNaN(sqrtDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1791] sqrtIsNotNaN, sqrtIsNotNaN {&#10;\find(sqrtDouble(arg))&#10;\add [imp(and(not(doubleIsNaN(arg)),geqDouble(arg,DFP(0(#)))),not(doubleIsNaN(sqrtDouble(arg))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1792] sqrtIsSmaller, sqrtIsSmaller {&#10;\find(sqrtDouble(arg))&#10;\add [imp(and(not(doubleIsInfinite(arg)),gtDouble(arg,DFP(8(0(4(7(1(0(0(0(8(8(1(4(2(8(1(7(0(6(4(#)))))))))))))))))))))),ltDouble(sqrtDouble(arg),arg))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1793] sqrtIsZero, sqrtIsZero {&#10;\find(sqrtDouble(arg))&#10;\add [imp(equals(arg,DFP(0(#))),equals(sqrtDouble(arg),DFP(0(#))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1794] square_nonneg, square_nonneg {&#10;\find(leq(Z(0(#)),mul(i0,i0)))&#10;\replacewith(true) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1795] startsWith, startsWith {&#10;\find(clStartsWith(sourceStr,searchStr))&#10;\replacewith(if-then-else(gt(seqLen(searchStr),seqLen(sourceStr)),false,equals(seqSub(sourceStr,Z(0(#)),seqLen(searchStr)),searchStr))) &#10;\heuristics(defOpsStartsEndsWith)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1796] staticMethodCall, staticMethodCall {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #se.#mn(#elist);&#10;... }\] (post))&#10;\varcond(\staticMethodReference(#se (program SimpleExpression), #mn (program MethodName), #elist (program Expression)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  method-call(#se.#mn(#elist))&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1797] staticMethodCallStaticViaTypereference, staticMethodCallStaticViaTypereference {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #t.#mn(#elist);&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  method-call(#t.#mn(#elist))&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.005"/>
  <testcase name="[1798] staticMethodCallStaticWithAssignmentViaTypereference, staticMethodCallStaticWithAssignmentViaTypereference {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #t.#mn(#elist);&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#lhs (program LeftHandSide))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#lhs) #v0;&#10;  method-call(#t.#mn(#elist))&#10;  #lhs = #v0;&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: (programRules:Java &amp; initialisation:disableStaticInitialisation)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1799] staticMethodCallWithAssignment, staticMethodCallWithAssignment {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #se.#mn(#elist);&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#lhs (program LeftHandSide))), \staticMethodReference(#se (program SimpleExpression), #mn (program MethodName), #elist (program Expression)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#lhs) #v0;&#10;  method-call(#se.#mn(#elist))&#10;  #lhs = #v0;&#10;... }\] (post)) &#10;\heuristics(method_expand)&#10;Choices: (programRules:Java &amp; initialisation:…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[1800] stringAssignment, stringAssignment {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #slit;&#10;... }\] (post))&#10;\sameUpdateLevel\add [not(equals(strPool(#slit),null)),equals(boolean::select(heap,strPool(#slit),java.lang.Object::&lt;created&gt;),TRUE)]==&gt;[] \replacewith(update-application(elem-update(#v (program Variable))(strPool(#slit)),#normalassign(post))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1801] stringConcat, stringConcat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #sstr1 + #sstr2;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(strContent(sk),seqConcat(strContent(#sstr1),strContent(#sstr2)))]==&gt;[equals(sk,null)] \replacewith(update-application(elem-update(#v (program Variable))(sk),update-application(elem-update(heap)(create(heap,sk)),#normalassign(post)))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[1802] stringConcatBooleanLeft, stringConcatBooleanLeft {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #seLeft + #sstrRight;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(strContent(sk),seqConcat(if-then-else(equals(#seLeft,TRUE),seqConcat(seqSingleton(C(6(1(1(#))))),seqConcat(seqSingleton(C(4(1(1(#))))),seqConcat(seqSingleton(C(7(1(1(#))))),seqSingleton(C(1(0(1(#)))))))),seqConcat(seqSingleton(C(2(0(1(#))))),seqConcat(seqSingleton(C(7(9(#)))),seqConcat(seqSingleton(C(8(0(1(#))))),seqConcat(seqSingleton(C(5(1(1(#))))),seqSingleton…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1803] stringConcatBooleanRight, stringConcatBooleanRight {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #sstrLeft + #seRight;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(strContent(sk),seqConcat(strContent(#sstrLeft),if-then-else(equals(#seRight,TRUE),seqConcat(seqSingleton(C(6(1(1(#))))),seqConcat(seqSingleton(C(4(1(1(#))))),seqConcat(seqSingleton(C(7(1(1(#))))),seqSingleton(C(1(0(1(#)))))))),seqConcat(seqSingleton(C(2(0(1(#))))),seqConcat(seqSingleton(C(7(9(#)))),seqConcat(seqSingleton(C(8(0(1(#))))),seqConcat(seqSingleton(C(5…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1804] stringConcatCharExpLeft, stringConcatCharExpLeft {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #seLeft + #sstrRight;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(strContent(sk),seqConcat(seqSingleton(#seLeft),strContent(#sstrRight)))]==&gt;[equals(sk,null)] \replacewith(update-application(elem-update(#v (program Variable))(sk),update-application(elem-update(heap)(create(heap,sk)),#normalassign(post)))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1805] stringConcatCharExpRight, stringConcatCharExpRight {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #sstrLeft + #seRight;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(strContent(sk),seqConcat(strContent(#sstrLeft),seqSingleton(#seRight)))]==&gt;[equals(sk,null)] \replacewith(update-application(elem-update(#v (program Variable))(sk),update-application(elem-update(heap)(create(heap,sk)),#normalassign(post)))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1806] stringConcatIntExpLeft, stringConcatIntExpLeft {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #seLeft + #sstrRight;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(strContent(sk),seqConcat(clTranslateInt(#seLeft),strContent(#sstrRight)))]==&gt;[equals(sk,null)] \replacewith(update-application(elem-update(#v (program Variable))(sk),update-application(elem-update(heap)(create(heap,sk)),#normalassign(post)))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1807] stringConcatIntExpRight, stringConcatIntExpRight {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #sstrLeft + #seRight;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(strContent(sk),seqConcat(strContent(#sstrLeft),clTranslateInt(#seRight)))]==&gt;[equals(sk,null)] \replacewith(update-application(elem-update(#v (program Variable))(sk),update-application(elem-update(heap)(create(heap,sk)),#normalassign(post)))) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1808] stringConcatObjectLeft, stringConcatObjectLeft {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #seLeft + #sstrRight;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(#seLeft,null),equals(strContent(sk),seqConcat(strContent(null),strContent(#sstrRight)))]==&gt;[equals(sk,null)] \replacewith(update-application(elem-update(#v (program Variable))(sk),update-application(elem-update(heap)(create(heap,sk)),#normalassign(post)))) ;&#10;\add []==&gt;[equals(#seLeft,null)] \replacewith(#normalassign ( (modal operator))\[{ ..&#10;  #v = #seLeft.toStri…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1809] stringConcatObjectRight, stringConcatObjectRight {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #v = #sstrLeft + #seRight;&#10;... }\] (post))&#10;\sameUpdateLevel\add [equals(#seRight,null),equals(strContent(sk),seqConcat(strContent(#sstrLeft),strContent(null)))]==&gt;[equals(sk,null)] \replacewith(update-application(elem-update(#v (program Variable))(sk),update-application(elem-update(heap)(create(heap,sk)),#normalassign(post)))) ;&#10;\add []==&gt;[equals(#seRight,null)] \replacewith(#normalassign ( (modal operator))\[{ ..&#10;  #v = #sstrLeft + …" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1810] sub, sub {&#10;\find(sub(i,i0))&#10;\replacewith(add(i,neg(i0))) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1811] subSeqComplete, subSeqComplete {&#10;\find(seqSub(seq,Z(0(#)),seqLen(seq)))&#10;\replacewith(seq) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1812] subSeqCompleteSeqDef, subSeqCompleteSeqDef {&#10;\find(seqSub(seqDef{i (variable)}(Z(0(#)),u,a),Z(0(#)),u))&#10;\replacewith(seqDef{i (variable)}(Z(0(#)),u,a)) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1813] subSeqCompleteSeqDefEQ, subSeqCompleteSeqDefEQ {&#10;\assumes ([equals(seqDef{i (variable)}(Z(0(#)),u,a),EQ)]==&gt;[]) &#10;\find(seqSub(EQ,Z(0(#)),u))&#10;\replacewith(seqDef{i (variable)}(Z(0(#)),u,a)) &#10;\heuristics(concrete, no_self_application)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1814] subSeqConcat, subSeqConcat {&#10;\find(seqSub(seqConcat(s1,s2),l,u))&#10;\replacewith(seqConcat(seqSub(s1,l,if-then-else(lt(seqLen(s1),u),seqLen(s1),u)),seqSub(s2,if-then-else(lt(l,seqLen(s1)),Z(0(#)),sub(l,seqLen(s1))),sub(u,seqLen(s1))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.003"/>
  <testcase name="[1815] subSeqConcatEQ, subSeqConcatEQ {&#10;\assumes ([equals(seqConcat(s1,s2),EQ)]==&gt;[]) &#10;\find(seqSub(EQ,l,u))&#10;\replacewith(seqConcat(seqSub(s1,l,if-then-else(lt(seqLen(s1),u),seqLen(s1),u)),seqSub(s2,if-then-else(lt(l,seqLen(s1)),Z(0(#)),sub(l,seqLen(s1))),sub(u,seqLen(s1))))) &#10;\heuristics(simplify_enlarging, no_self_application)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1816] subSeqEmpty, subSeqEmpty {&#10;\find(seqSub(seq,i,i))&#10;\replacewith(seqEmpty) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.009"/>
  <testcase name="[1817] subSeqHeadSeqDef, subSeqHeadSeqDef {&#10;\find(seqSub(seqConcat(seqDef{i (variable)}(Z(0(#)),u,a),seq),Z(0(#)),u))&#10;\replacewith(seqDef{i (variable)}(Z(0(#)),u,a)) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.01"/>
  <testcase name="[1818] subSeqHeadSeqDefEQ, subSeqHeadSeqDefEQ {&#10;\assumes ([equals(seqDef{i (variable)}(Z(0(#)),u,a),EQ)]==&gt;[]) &#10;\find(seqSub(seqConcat(EQ,seq),Z(0(#)),u))&#10;\replacewith(seqDef{i (variable)}(Z(0(#)),u,a)) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1819] subSeqSingleton, subSeqSingleton {&#10;\find(seqSub(seqSingleton(x),Z(0(#)),Z(1(#))))&#10;\replacewith(seqSingleton(x)) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1820] subSeqSingleton2, subSeqSingleton2 {&#10;\find(seqSub(seqSingleton(x),l,u))&#10;\replacewith(seqConcat(seqSub(seqEmpty,if-then-else(lt(l,Z(0(#))),l,Z(0(#))),if-then-else(lt(u,Z(0(#))),u,Z(0(#)))),seqConcat(if-then-else(and(leq(l,Z(0(#))),geq(u,Z(1(#)))),seqSingleton(x),seqEmpty),seqSub(seqEmpty,if-then-else(gt(l,Z(0(#))),l,Z(1(#))),if-then-else(gt(u,Z(0(#))),u,Z(1(#))))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1821] subSeqSingleton2EQ, subSeqSingleton2EQ {&#10;\assumes ([equals(seqSingleton(x),EQ)]==&gt;[]) &#10;\find(seqSub(EQ,l,u))&#10;\replacewith(seqConcat(seqSub(seqEmpty,if-then-else(lt(l,Z(0(#))),l,Z(0(#))),if-then-else(lt(u,Z(0(#))),u,Z(0(#)))),seqConcat(if-then-else(and(leq(l,Z(0(#))),geq(u,Z(1(#)))),seqSingleton(x),seqEmpty),seqSub(seqEmpty,if-then-else(gt(l,Z(0(#))),l,Z(1(#))),if-then-else(gt(u,Z(0(#))),u,Z(1(#))))))) &#10;\heuristics(simplify_enlarging, no_self_application)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1822] subSeqSingletonEQ, subSeqSingletonEQ {&#10;\assumes ([equals(seqSingleton(x),EQ)]==&gt;[]) &#10;\find(seqSub(EQ,Z(0(#)),Z(1(#))))&#10;\replacewith(seqSingleton(x)) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1823] subSeqTailEQL, subSeqTailEQL {&#10;\assumes ([equals(seqLen(seq),EQ)]==&gt;[]) &#10;\find(seqSub(seqConcat(seqSingleton(x),seq),Z(1(#)),add(Z(1(#)),EQ)))&#10;\sameUpdateLevel\replacewith(seq) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1824] subSeqTailEQR, subSeqTailEQR {&#10;\assumes ([equals(seqLen(seq),EQ)]==&gt;[]) &#10;\find(seqSub(seqConcat(seqSingleton(x),seq),Z(1(#)),add(EQ,Z(1(#)))))&#10;\sameUpdateLevel\replacewith(seq) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1825] subSeqTailL, subSeqTailL {&#10;\find(seqSub(seqConcat(seqSingleton(x),seq),Z(1(#)),add(Z(1(#)),seqLen(seq))))&#10;\replacewith(seq) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1826] subSeqTailR, subSeqTailR {&#10;\find(seqSub(seqConcat(seqSingleton(x),seq),Z(1(#)),add(seqLen(seq),Z(1(#)))))&#10;\replacewith(seq) &#10;\heuristics(concrete)&#10;Choices: sequences:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1827] sub_equations_left, sub_equations_left {&#10;\assumes ([equals(i,i0)]==&gt;[]) &#10;\find(equals(j,j0)==&gt;)&#10;\add [equals(sub(j,i),sub(j0,i0))]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1828] sub_equations_right, sub_equations_right {&#10;\assumes ([equals(i,i0)]==&gt;[]) &#10;\find(==&gt;equals(j,j0))&#10;\add []==&gt;[equals(sub(j,i),sub(j0,i0))] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1829] sub_literals, sub_literals {&#10;\find(sub(Z(iz),Z(jz)))&#10;\replacewith(#sub(Z(iz),Z(jz))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.01"/>
  <testcase name="[1830] sub_sub_elim, sub_sub_elim {&#10;\find(neg(neg(i)))&#10;\replacewith(i) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1831] sub_zero_1, sub_zero_1 {&#10;\find(Z(neglit(0(#))))&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1832] sub_zero_2, sub_zero_2 {&#10;\find(sub(i,Z(0(#))))&#10;\replacewith(i) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1833] subsetOfEmpty, subsetOfEmpty {&#10;\find(subset(s,empty))&#10;\replacewith(equals(s,empty)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1834] subsetOfIntersectWithItSelf1, subsetOfIntersectWithItSelf1 {&#10;\find(subset(s,intersect(s,s2)))&#10;\replacewith(subset(s,s2)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1835] subsetOfIntersectWithItSelf2, subsetOfIntersectWithItSelf2 {&#10;\find(subset(s,intersect(s2,s)))&#10;\replacewith(subset(s,s2)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1836] subsetOfIntersectWithItSelfEQ1, subsetOfIntersectWithItSelfEQ1 {&#10;\assumes ([equals(intersect(s,s2),EQ)]==&gt;[]) &#10;\find(subset(s,EQ))&#10;\sameUpdateLevel\replacewith(subset(s,s2)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1837] subsetOfIntersectWithItSelfEQ2, subsetOfIntersectWithItSelfEQ2 {&#10;\assumes ([equals(intersect(s2,s),EQ)]==&gt;[]) &#10;\find(subset(s,EQ))&#10;\sameUpdateLevel\replacewith(subset(s,s2)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1838] subsetOfItself, subsetOfItself {&#10;\find(subset(s,s))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1839] subsetOfUnionWithItSelf1, subsetOfUnionWithItSelf1 {&#10;\find(subset(s,union(s,s2)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1840] subsetOfUnionWithItSelf2, subsetOfUnionWithItSelf2 {&#10;\find(subset(s,union(s2,s)))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1841] subsetOfUnionWithItSelfEQ1, subsetOfUnionWithItSelfEQ1 {&#10;\assumes ([equals(union(s,s2),EQ)]==&gt;[]) &#10;\find(subset(s,EQ))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1842] subsetOfUnionWithItSelfEQ2, subsetOfUnionWithItSelfEQ2 {&#10;\assumes ([equals(union(s2,s),EQ)]==&gt;[]) &#10;\find(subset(s,EQ))&#10;\sameUpdateLevel\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1843] subsetSingletonLeft, subsetSingletonLeft {&#10;\find(subset(singleton(o,f),s))&#10;\replacewith(elementOf(o,f,s)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1844] subsetSingletonLeftEQ, subsetSingletonLeftEQ {&#10;\assumes ([equals(singleton(o,f),EQ)]==&gt;[]) &#10;\find(subset(EQ,s))&#10;\sameUpdateLevel\replacewith(elementOf(o,f,s)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1845] subsetSingletonRight, subsetSingletonRight {&#10;\find(subset(s,singleton(o,f)))&#10;\replacewith(or(equals(s,empty),equals(s,singleton(o,f)))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1846] subsetSingletonRightEQ, subsetSingletonRightEQ {&#10;\assumes ([equals(singleton(o,f),EQ)]==&gt;[]) &#10;\find(subset(s,EQ))&#10;\sameUpdateLevel\replacewith(or(equals(s,empty),equals(s,singleton(o,f)))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1847] subsetToElementOf, subsetToElementOf {&#10;\find(subset(s,s2))&#10;\varcond(\notFreeIn(fv (variable), s2 (LocSet term)), \notFreeIn(fv (variable), s (LocSet term)), \notFreeIn(ov (variable), s2 (LocSet term)), \notFreeIn(ov (variable), s (LocSet term)))&#10;\replacewith(all{ov (variable)}(all{fv (variable)}(imp(elementOf(ov,fv,s),elementOf(ov,fv,s2))))) &#10;\heuristics(semantics_blasting)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1848] subsetToElementOfRight, subsetToElementOfRight {&#10;\find(==&gt;subset(s,s2))&#10;\varcond(\notFreeIn(fv (variable), s2 (LocSet term)), \notFreeIn(fv (variable), s (LocSet term)), \notFreeIn(ov (variable), s2 (LocSet term)), \notFreeIn(ov (variable), s (LocSet term)))&#10;\replacewith([]==&gt;[all{ov (variable)}(all{fv (variable)}(imp(elementOf(ov,fv,s),elementOf(ov,fv,s2))))]) &#10;\heuristics(setEqualityBlastingRight)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1849] subsetUnionLeft, subsetUnionLeft {&#10;\find(subset(union(s,s2),s3))&#10;\replacewith(and(subset(s,s3),subset(s2,s3))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1850] subsetUnionLeftEQ, subsetUnionLeftEQ {&#10;\assumes ([equals(union(s,s2),EQ)]==&gt;[]) &#10;\find(subset(EQ,s3))&#10;\sameUpdateLevel\replacewith(and(subset(s,s3),subset(s2,s3))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1851] subsetWithAllLocs, subsetWithAllLocs {&#10;\find(subset(s,allLocs))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1852] subsetWithAllLocs2, subsetWithAllLocs2 {&#10;\find(subset(allLocs,s))&#10;\replacewith(equals(s,allLocs)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1853] subsetWithEmpty, subsetWithEmpty {&#10;\find(subset(empty,s))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1854] subsetWithSetMinusLeft, subsetWithSetMinusLeft {&#10;\find(subset(setMinus(s,s2),s3))&#10;\replacewith(subset(s,union(s2,s3))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1855] subsetWithSetMinusLeftEQ, subsetWithSetMinusLeftEQ {&#10;\assumes ([equals(setMinus(s,s2),EQ)]==&gt;[]) &#10;\find(subset(EQ,s3))&#10;\sameUpdateLevel\replacewith(subset(s,union(s2,s3))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.007"/>
  <testcase name="[1856] subst_to_eq, subst_to_eq {&#10;\find(subst{u (variable)}(t,target))&#10;\sameUpdateLevel\add [equals(sk,t)]==&gt;[] \replacewith(subst{u (variable)}(sk,target)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1857] subst_to_eq_for, subst_to_eq_for {&#10;\find(subst{u (variable)}(t,phi))&#10;\sameUpdateLevel\add [equals(sk,t)]==&gt;[] \replacewith(subst{u (variable)}(sk,phi)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1858] substringSubstring, substringSubstring {&#10;\find(seqSub(seqSub(str,innerStartIdx,innerEndIdx),outerStartIdx,outerEndIdx))&#10;\sameUpdateLevel\add [imp(and(and(and(and(and(geq(innerStartIdx,Z(0(#))),geq(innerEndIdx,innerStartIdx)),leq(innerEndIdx,seqLen(str))),geq(outerStartIdx,Z(0(#)))),geq(outerEndIdx,outerStartIdx)),leq(outerEndIdx,sub(innerEndIdx,innerStartIdx))),and(equals(seqSub(seqSub(str,innerStartIdx,innerEndIdx),outerStartIdx,outerEndIdx),newSym),equals(seqSub(str,add(outerStartIdx,innerStartIdx),add(innerStartIdx,outerEn…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1859] substringSubstring2, substringSubstring2 {&#10;\assumes ([equals(seqSub(str,innerStartIdx,innerEndIdx),innerSub)]==&gt;[]) &#10;\find(seqSub(innerSub,outerStartIdx,outerEndIdx))&#10;\sameUpdateLevel\add [imp(and(and(and(and(and(geq(innerStartIdx,Z(0(#))),geq(innerEndIdx,innerStartIdx)),leq(innerEndIdx,seqLen(str))),geq(outerStartIdx,Z(0(#)))),geq(outerEndIdx,outerStartIdx)),leq(outerEndIdx,sub(innerEndIdx,innerStartIdx))),and(equals(seqSub(innerSub,outerStartIdx,outerEndIdx),newSym),equals(seqSub(str,add(outerStartIdx,innerStartIdx),add(inne…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1860] sum_empty, sum_empty {&#10;\find(sum{x (variable)}(FALSE,t))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1861] sum_zero, sum_zero {&#10;\find(sum{x (variable)}(range,Z(0(#))))&#10;\replacewith(Z(0(#))) &#10;\heuristics(concrete)&#10;Choices: integerSimplificationRules:full}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1862] swapQuantifiersAll, swapQuantifiersAll {&#10;\find(all{u (variable)}(all{v (variable)}(phi)))&#10;\replacewith(all{v (variable)}(all{u (variable)}(phi))) &#10;\heuristics(swapQuantifiers)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1863] swapQuantifiersEx, swapQuantifiersEx {&#10;\find(exists{u (variable)}(exists{v (variable)}(phi)))&#10;\replacewith(exists{v (variable)}(exists{u (variable)}(phi))) &#10;\heuristics(swapQuantifiers)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1864] switch, switch {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #sw&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  switch-to-if(#sw)&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1865] switch_brackets, switch_brackets {&#10;\find(add(add(i,i0),i1))&#10;\replacewith(add(i,add(i0,i1))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1866] switch_params, switch_params {&#10;\find(add(i0,i1))&#10;\replacewith(add(i1,i0)) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1867] synchronizedBlockEmpty, synchronizedBlockEmpty {&#10;\find(==&gt;#allmodal ( (modal operator))\[{ ..&#10;  synchronized(#se) {}&#10;... }\] (post))&#10;\varcond(\isLocalVariable (#se (program SimpleExpression)), )&#10;\replacewith([]==&gt;[not(equals(#se,null))]) ;&#10;\replacewith([]==&gt;[#allmodal(post)]) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: (programRules:Java &amp; runtimeExceptions:ban)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1868] synchronizedBlockEmpty2, synchronizedBlockEmpty2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  synchronized(#cr) {}&#10;... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1869] synchronizedBlockEvalSync, synchronizedBlockEvalSync {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  synchronized(#nsencr) {&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\varcond(\new(#loc (program Variable), \typeof(#nsencr (program NonSimpleExpressionNoClassReference))), \isLocalVariable (#nsencr (program NonSimpleExpressionNoClassReference)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nsencr) #loc = #nsencr;&#10;  synchronized(#loc) {&#10;    #slist&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: program…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1870] tanIsNaN, tanIsNaN {&#10;\find(tanDouble(arg))&#10;\add [imp(or(doubleIsNaN(arg),doubleIsInfinite(arg)),doubleIsNaN(tanDouble(arg)))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1871] tanIsZero, tanIsZero {&#10;\find(tanDouble(arg))&#10;\add [imp(equals(arg,DFP(0(#))),equals(tanDouble(arg),DFP(0(#))))]==&gt;[] &#10;\heuristics(userTaclets1)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1872] theorem_of_archimedes, theorem_of_archimedes {&#10;\assumes ([gt(i0,sub(i1,Z(1(#))))]==&gt;[]) &#10;\find(lt(i0,i1)==&gt;)&#10;\replacewith([false]==&gt;[]) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1873] throwBox, throwBox {&#10;\find(#box ( (modal operator))\[{&#10;  throw #se;&#10;  #slist&#10;}\] (post))&#10;\replacewith(true) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1874] throwDiamond, throwDiamond {&#10;\find(#diamond ( (modal operator))\[{&#10;  throw #se;&#10;  #slist&#10;}\] (post))&#10;\replacewith(false) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1875] throwLabel, throwLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb:&#10;  throw #se;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  throw #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1876] throwLabelBlock, throwLabelBlock {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb:&#10;  {&#10;    throw #se;&#10;    #slist&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  throw #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1877] throwNull, throwNull {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  throw null;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  throw new java.lang.NullPointerException();&#10;... }\] (post)) &#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1878] throwUnfold, throwUnfold {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  throw #nse;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#nse (program NonSimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#nse) #v0 = #nse;&#10;  throw #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1879] throwUnfoldMore, throwUnfoldMore {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  throw #se;&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#se (program SimpleExpression))), \isLocalVariable (#se (program SimpleExpression)), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#se) #v0 = #se;&#10;  throw #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1880] times_minus_one_1, times_minus_one_1 {&#10;\find(mul(i,Z(neglit(1(#)))))&#10;\replacewith(neg(i)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1881] times_minus_one_2, times_minus_one_2 {&#10;\find(mul(Z(neglit(1(#))),i))&#10;\replacewith(neg(i)) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1882] times_one_1, times_one_1 {&#10;\find(mul(i,Z(1(#))))&#10;\replacewith(i) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1883] times_one_2, times_one_2 {&#10;\find(mul(Z(1(#)),i))&#10;\replacewith(i) &#10;\heuristics(simplify_int)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1884] times_zero_1, times_zero_1 {&#10;\find(mul(i,Z(0(#))))&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1885] times_zero_2, times_zero_2 {&#10;\find(mul(Z(0(#)),i))&#10;\replacewith(Z(0(#))) &#10;\heuristics(simplify_literals)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1886] translate#, translate# {&#10;\find(clTranslateInt(Z(#)))&#10;\replacewith(seqEmpty) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1887] translate0, translate0 {&#10;\find(clTranslateInt(Z(0(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(8(4(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1888] translate1, translate1 {&#10;\find(clTranslateInt(Z(1(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(9(4(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1889] translate2, translate2 {&#10;\find(clTranslateInt(Z(2(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(0(5(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1890] translate3, translate3 {&#10;\find(clTranslateInt(Z(3(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(1(5(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1891] translate4, translate4 {&#10;\find(clTranslateInt(Z(4(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(2(5(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1892] translate5, translate5 {&#10;\find(clTranslateInt(Z(5(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(3(5(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1893] translate6, translate6 {&#10;\find(clTranslateInt(Z(6(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(4(5(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1894] translate7, translate7 {&#10;\find(clTranslateInt(Z(7(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(5(5(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1895] translate8, translate8 {&#10;\find(clTranslateInt(Z(8(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(6(5(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1896] translate9, translate9 {&#10;\find(clTranslateInt(Z(9(iz))))&#10;\replacewith(seqConcat(clTranslateInt(Z(iz)),seqSingleton(C(7(5(#)))))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1897] translateCheckedAddInt, translateCheckedAddInt {&#10;\find(checkedAddInt(left,right))&#10;\replacewith(add(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1898] translateCheckedAddLong, translateCheckedAddLong {&#10;\find(checkedAddLong(left,right))&#10;\replacewith(add(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1899] translateCheckedBitwiseAndInt, translateCheckedBitwiseAndInt {&#10;\find(checkedBitwiseAndInt(left,right))&#10;\replacewith(binaryAnd(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1900] translateCheckedBitwiseAndLong, translateCheckedBitwiseAndLong {&#10;\find(checkedBitwiseAndLong(left,right))&#10;\replacewith(binaryAnd(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1901] translateCheckedBitwiseNegateInt, translateCheckedBitwiseNegateInt {&#10;\find(checkedBitwiseNegateInt(left))&#10;\replacewith(sub(neg(left),Z(1(#)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1902] translateCheckedBitwiseNegateLong, translateCheckedBitwiseNegateLong {&#10;\find(checkedBitwiseNegateLong(left))&#10;\replacewith(sub(neg(left),Z(1(#)))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1903] translateCheckedBitwiseOrInt, translateCheckedBitwiseOrInt {&#10;\find(checkedBitwiseOrInt(left,right))&#10;\replacewith(binaryOr(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1904] translateCheckedBitwiseOrLong, translateCheckedBitwiseOrLong {&#10;\find(checkedBitwiseOrLong(left,right))&#10;\replacewith(binaryOr(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1905] translateCheckedBitwiseXOrInt, translateCheckedBitwiseXOrInt {&#10;\find(checkedBitwiseXOrInt(left,right))&#10;\replacewith(binaryXOr(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1906] translateCheckedBitwiseXOrLong, translateCheckedBitwiseXOrLong {&#10;\find(checkedBitwiseXOrLong(left,right))&#10;\replacewith(binaryXOr(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1907] translateCheckedDivInt, translateCheckedDivInt {&#10;\find(checkedDivInt(left,right))&#10;\replacewith(jdiv(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1908] translateCheckedDivLong, translateCheckedDivLong {&#10;\find(checkedDivLong(left,right))&#10;\replacewith(jdiv(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1909] translateCheckedMulInt, translateCheckedMulInt {&#10;\find(checkedMulInt(left,right))&#10;\replacewith(mul(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1910] translateCheckedMulLong, translateCheckedMulLong {&#10;\find(checkedMulLong(left,right))&#10;\replacewith(mul(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1911] translateCheckedShiftLeftInt, translateCheckedShiftLeftInt {&#10;\find(checkedShiftLeftInt(left,right))&#10;\replacewith(shiftleft(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[1912] translateCheckedShiftLeftLong, translateCheckedShiftLeftLong {&#10;\find(checkedShiftLeftLong(left,right))&#10;\replacewith(shiftleft(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1913] translateCheckedShiftRightInt, translateCheckedShiftRightInt {&#10;\find(checkedShiftRightInt(left,right))&#10;\replacewith(shiftright(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1914] translateCheckedShiftRightLong, translateCheckedShiftRightLong {&#10;\find(checkedShiftRightLong(left,right))&#10;\replacewith(shiftright(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1915] translateCheckedSubInt, translateCheckedSubInt {&#10;\find(checkedSubInt(left,right))&#10;\replacewith(sub(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1916] translateCheckedSubLong, translateCheckedSubLong {&#10;\find(checkedSubLong(left,right))&#10;\replacewith(sub(left,right)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1917] translateCheckedUnaryMinusInt, translateCheckedUnaryMinusInt {&#10;\find(checkedUnaryMinusInt(left))&#10;\replacewith(neg(left)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1918] translateCheckedUnaryMinusLong, translateCheckedUnaryMinusLong {&#10;\find(checkedUnaryMinusLong(left))&#10;\replacewith(neg(left)) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1919] translateJavaAddInt, translateJavaAddInt {&#10;\find(javaAddInt(left,right))&#10;\replacewith(add(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1920] translateJavaAddLong, translateJavaAddLong {&#10;\find(javaAddLong(left,right))&#10;\replacewith(add(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1921] translateJavaBitwiseAndInt, translateJavaBitwiseAndInt {&#10;\find(javaBitwiseAndInt(left,right))&#10;\replacewith(binaryAnd(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1922] translateJavaBitwiseAndLong, translateJavaBitwiseAndLong {&#10;\find(javaBitwiseAndLong(left,right))&#10;\replacewith(binaryAnd(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1923] translateJavaBitwiseOrInt, translateJavaBitwiseOrInt {&#10;\find(javaBitwiseOrInt(left,right))&#10;\replacewith(binaryOr(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.011"/>
  <testcase name="[1924] translateJavaBitwiseOrLong, translateJavaBitwiseOrLong {&#10;\find(javaBitwiseOrLong(left,right))&#10;\replacewith(binaryOr(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1925] translateJavaBitwiseXOrInt, translateJavaBitwiseXOrInt {&#10;\find(javaBitwiseXOrInt(left,right))&#10;\replacewith(binaryXOr(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1926] translateJavaBitwiseXOrLong, translateJavaBitwiseXOrLong {&#10;\find(javaBitwiseXOrLong(left,right))&#10;\replacewith(binaryXOr(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1927] translateJavaCastByte, translateJavaCastByte {&#10;\find(javaCastByte(left))&#10;\replacewith(left) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1928] translateJavaCastChar, translateJavaCastChar {&#10;\find(javaCastChar(left))&#10;\replacewith(left) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1929] translateJavaCastInt, translateJavaCastInt {&#10;\find(javaCastInt(left))&#10;\replacewith(left) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1930] translateJavaCastLong, translateJavaCastLong {&#10;\find(javaCastLong(left))&#10;\replacewith(left) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1931] translateJavaCastShort, translateJavaCastShort {&#10;\find(javaCastShort(left))&#10;\replacewith(left) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1932] translateJavaDivInt, translateJavaDivInt {&#10;\find(javaDivInt(left,right))&#10;\replacewith(jdiv(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1933] translateJavaDivLong, translateJavaDivLong {&#10;\find(javaDivLong(left,right))&#10;\replacewith(jdiv(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1934] translateJavaMod, translateJavaMod {&#10;\find(javaMod(left,right))&#10;\replacewith(jmod(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1935] translateJavaMulInt, translateJavaMulInt {&#10;\find(javaMulInt(left,right))&#10;\replacewith(mul(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1936] translateJavaMulLong, translateJavaMulLong {&#10;\find(javaMulLong(left,right))&#10;\replacewith(mul(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1937] translateJavaShiftLeftInt, translateJavaShiftLeftInt {&#10;\find(javaShiftLeftInt(left,right))&#10;\replacewith(shiftleft(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1938] translateJavaShiftLeftLong, translateJavaShiftLeftLong {&#10;\find(javaShiftLeftLong(left,right))&#10;\replacewith(shiftleft(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1939] translateJavaShiftRightInt, translateJavaShiftRightInt {&#10;\find(javaShiftRightInt(left,right))&#10;\replacewith(shiftright(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1940] translateJavaShiftRightLong, translateJavaShiftRightLong {&#10;\find(javaShiftRightLong(left,right))&#10;\replacewith(shiftright(left,right)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1941] translateJavaSubInt, translateJavaSubInt {&#10;\find(javaSubInt(left,right))&#10;\replacewith(sub(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1942] translateJavaSubLong, translateJavaSubLong {&#10;\find(javaSubLong(left,right))&#10;\replacewith(sub(left,right)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1943] translateJavaUnaryMinusInt, translateJavaUnaryMinusInt {&#10;\find(javaUnaryMinusInt(left))&#10;\replacewith(neg(left)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1944] translateJavaUnaryMinusLong, translateJavaUnaryMinusLong {&#10;\find(javaUnaryMinusLong(left))&#10;\replacewith(neg(left)) &#10;\heuristics(simplify, javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1945] translateNegLit, translateNegLit {&#10;\find(clTranslateInt(Z(neglit(iz))))&#10;\replacewith(seqConcat(seqSingleton(C(5(4(#)))),clTranslateInt(Z(iz)))) &#10;\heuristics(integerToString)&#10;Choices: Strings:on}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1946] translatejavaBitwiseNegateInt, translatejavaBitwiseNegateInt {&#10;\find(javaBitwiseNegateInt(left))&#10;\replacewith(bitwiseNegateJint(left)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1947] translatejavaBitwiseNegateLong, translatejavaBitwiseNegateLong {&#10;\find(javaBitwiseNegateLong(left))&#10;\replacewith(bitwiseNegateJlong(left)) &#10;\heuristics(javaIntegerSemantics)&#10;Choices: (programRules:Java &amp; (intRules:arithmeticSemanticsIgnoringOF | intRules:arithmeticSemanticsCheckingOF))}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1948] true_left, true_left {&#10;\find(true==&gt;)&#10;\replacewith([]==&gt;[]) &#10;\heuristics(concrete)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1949] true_to_not_false, true_to_not_false {&#10;\find(equals(bo,TRUE))&#10;\replacewith(not(equals(bo,FALSE))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1950] tryBreak, tryBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    break;&#10;    #slist&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  break;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1951] tryBreakLabel, tryBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    break;&#10;    #slist&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  break;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1952] tryCatchFinallyThrow, tryCatchFinallyThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    throw #se;&#10;    #slist&#10;  } catch (#t #v0) {&#10;    #slist1&#10;  }#cs finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (#se == null) {&#10;    try {&#10;      throw new java.lang.NullPointerException();&#10;    } catch (#t #v0) {&#10;      #slist1&#10;    }#cs finally {&#10;      #slist2&#10;    }&#10;  } else if (#se instanceof #t) {&#10;    try {&#10;      #t #v0;&#10;      #v0 = (#t) #se;&#10;      #slist1&#10;    } finally {&#10;      #slist2&#10;…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1953] tryCatchThrow, tryCatchThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    throw #se;&#10;    #slist&#10;  } catch (#t #v0) {&#10;    #slist1&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (#se == null) {&#10;    try {&#10;      throw new java.lang.NullPointerException();&#10;    } catch (#t #v0) {&#10;      #slist1&#10;    }&#10;  } else if (#se instanceof #t) {&#10;    #t #v0;&#10;    #v0 = (#t) #se;&#10;    #slist1&#10;  } else {&#10;    throw #se;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1954] tryEmpty, tryEmpty {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {}#cs&#10;... }\] (post))&#10;\replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1955] tryFinallyBreak, tryFinallyBreak {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    break;&#10;    #slist&#10;  }#cs finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist2&#10;  }&#10;  break;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1956] tryFinallyBreakLabel, tryFinallyBreakLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    break;&#10;    #slist&#10;  }#cs finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist2&#10;  }&#10;  break;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.009"/>
  <testcase name="[1957] tryFinallyEmpty, tryFinallyEmpty {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {}#cs finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist2&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1958] tryFinallyReturn, tryFinallyReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    return #se;&#10;    #slist&#10;  }#cs finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#se (program SimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #typeof(#se) #v0 = #se;&#10;  {&#10;    #slist2&#10;  }&#10;  return #v0;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1959] tryFinallyReturnNoValue, tryFinallyReturnNoValue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    return;&#10;    #slist&#10;  }#cs finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist2&#10;  }&#10;  return;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1960] tryFinallyThrow, tryFinallyThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    throw #se;&#10;    #slist&#10;  } finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\varcond(\new(#v0 (program Variable), \typeof(#se (program SimpleExpression))))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (#se == null) {&#10;    {&#10;      #slist2&#10;    }&#10;    throw new java.lang.NullPointerException();&#10;  } else {&#10;    #typeof(#se) #v0 = #se;&#10;    {&#10;      #slist2&#10;    }&#10;    throw #v0;&#10;  }&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRul…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1961] tryMultipleCatchThrow, tryMultipleCatchThrow {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    throw #se;&#10;    #slist&#10;  } catch (#t #v0) {&#10;    #slist1&#10;  } catch (#t2 #v1) {&#10;    #slist3&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  if (#se == null) {&#10;    try {&#10;      throw new java.lang.NullPointerException();&#10;    } catch (#t #v0) {&#10;      #slist1&#10;    } catch (#t2 #v1) {&#10;      #slist3&#10;    }#cs&#10;  } else if (#se instanceof #t) {&#10;    #t #v0;&#10;    #v0 = (#t) #se;&#10;    #slist1&#10;  } else {&#10;    try {&#10;      th…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1962] tryReturn, tryReturn {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    return #se;&#10;    #slist&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  return #se;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1963] tryReturnNoValue, tryReturnNoValue {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    return;&#10;    #slist&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  return;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1964] try_continue_1, try_continue_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    continue;&#10;    #slist&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  continue;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1965] try_continue_2, try_continue_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    continue;&#10;    #slist&#10;  }#cs&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  continue;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1966] try_finally_continue_1, try_finally_continue_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    continue;&#10;    #slist&#10;  }#cs finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist2&#10;  }&#10;  continue;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1967] try_finally_continue_2, try_finally_continue_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  try {&#10;    continue;&#10;    #slist&#10;  }#cs finally {&#10;    #slist2&#10;  }&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  {&#10;    #slist2&#10;  }&#10;  continue;&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1968] typeEq, typeEq {&#10;\find(equals(s,t1)==&gt;)&#10;\add [equals(H::instance(s),TRUE),equals(G::instance(t1),TRUE)]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1969] typeEqDerived, typeEqDerived {&#10;\assumes ([equals(s,t1)]==&gt;[]) &#10;\find(H::instance(s))&#10;\sameUpdateLevel\replacewith(TRUE) &#10;\heuristics(concrete, simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1970] typeEqDerived2, typeEqDerived2 {&#10;\assumes ([equals(s,t1)]==&gt;[]) &#10;\find(G::instance(t1))&#10;\sameUpdateLevel\replacewith(TRUE) &#10;\heuristics(concrete, simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1971] typeStatic, typeStatic {&#10;\find(s)&#10;\sameUpdateLevel\add [equals(G::instance(s),TRUE)]==&gt;[] &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[1972] unaryMinusBigint, unaryMinusBigint {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #loc = -#seBigint;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(neg(#seBigint)),#allmodal(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1973] unaryMinusDouble, unaryMinusDouble {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = -#seDouble;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaUnaryMinusDouble(#seDouble)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1974] unaryMinusFloat, unaryMinusFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = -#seFloat;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaUnaryMinusFloat(#seFloat)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1975] unaryMinusInt, unaryMinusInt {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = -#seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaUnaryMinusInt(#seCharByteShortInt)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.002"/>
  <testcase name="[1976] unaryMinusLong, unaryMinusLong {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = -#seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(javaUnaryMinusLong(#seLong)),#normalassign(post))) &#10;\heuristics(executeIntegerAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1977] unionEqualsEmpty, unionEqualsEmpty {&#10;\find(equals(union(s,s2),empty))&#10;\replacewith(and(equals(s,empty),equals(s2,empty))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1978] unionEqualsEmptyEQ, unionEqualsEmptyEQ {&#10;\assumes ([equals(union(s,s2),EQ)]==&gt;[]) &#10;\find(equals(EQ,empty))&#10;\sameUpdateLevel\replacewith(and(equals(s,empty),equals(s2,empty))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1979] unionIntersectItself, unionIntersectItself {&#10;\find(union(intersect(s1,s2),s1))&#10;\replacewith(s1) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1980] unionIntersectItself_2, unionIntersectItself_2 {&#10;\find(union(intersect(s2,s1),s1))&#10;\replacewith(s1) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1981] unionIntersectItself_3, unionIntersectItself_3 {&#10;\find(union(union(s,intersect(s1,s2)),s1))&#10;\replacewith(union(s,s1)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1982] unionIntersectItself_4, unionIntersectItself_4 {&#10;\find(union(union(s,intersect(s2,s1)),s1))&#10;\replacewith(union(s,s1)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1983] unionIntersectItself_5, unionIntersectItself_5 {&#10;\find(union(union(intersect(s1,s2),s),s1))&#10;\replacewith(union(s,s1)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1984] unionIntersectItself_6, unionIntersectItself_6 {&#10;\find(union(union(intersect(s2,s1),s),s1))&#10;\replacewith(union(s,s1)) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1985] unionWithAllLocs, unionWithAllLocs {&#10;\find(union(allLocs,s))&#10;\replacewith(allLocs) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1986] unionWithAllLocsRight, unionWithAllLocsRight {&#10;\find(union(s,allLocs))&#10;\replacewith(allLocs) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1987] unionWithEmpty, unionWithEmpty {&#10;\find(union(empty,s))&#10;\replacewith(s) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1988] unionWithEmptyRight, unionWithEmptyRight {&#10;\find(union(s,empty))&#10;\replacewith(s) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1989] unionWithItself, unionWithItself {&#10;\find(union(s,s))&#10;\replacewith(s) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1990] unionWithSingletonEqualsUnionWithSingleton, unionWithSingletonEqualsUnionWithSingleton {&#10;\find(equals(union(s1,singleton(o,f)),union(s2,singleton(o,f))))&#10;\replacewith(equals(setMinus(s1,singleton(o,f)),setMinus(s2,singleton(o,f)))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1991] unionWithSingletonEqualsUnionWithSingleton_2, unionWithSingletonEqualsUnionWithSingleton_2 {&#10;\find(equals(union(singleton(o,f),s1),union(singleton(o,f),s2)))&#10;\replacewith(equals(setMinus(s1,singleton(o,f)),setMinus(s2,singleton(o,f)))) &#10;\heuristics(simplify)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1992] unsignedShiftRightJintDef, unsignedShiftRightJintDef {&#10;\find(unsignedshiftrightJint(left,right))&#10;\replacewith(if-then-else(geq(left,Z(0(#))),shiftrightJint(left,right),addJint(shiftrightJint(left,right),shiftleftJint(Z(2(#)),sub(Z(1(3(#))),mod(right,Z(2(3(#))))))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1993] unusedLabel, unusedLabel {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lb:&#10;  #s&#10;... }\] (post))&#10;\varcond(\not\freeLabelIn (#lb,#s), )&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #s&#10;... }\] (post)) &#10;\heuristics(simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[1994] unwindLoopScope, unwindLoopScope {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  while (#nse) #body&#10;... }\] (post))&#10;\varcond(\new(#x (program Variable), (type, sort): (boolean,boolean)))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  boolean #x;&#10;  loop-scope (#x) {&#10;    if (#nse) {&#10;      #body&#10;      continue;&#10;    } else {&#10;      break;&#10;    }&#10;  }&#10;... }\] (and(imp(equals(#x&lt;&lt;loopScopeIndex&gt;&gt;,TRUE),post),imp(equals(#x&lt;&lt;loopScopeIndex&gt;&gt;,FALSE),#allmodal ( (modal operator))\[{ ..&#10;  #reattachLoopInvariant(while (#nse) #body)&#10;...…" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1995] variableDeclaration, variableDeclaration {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #t #v0;&#10;... }\] (post))&#10;\addprogvars {#v0 (program Variable)} \replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.008"/>
  <testcase name="[1996] variableDeclarationAssign, variableDeclarationAssign {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #t #v0 = #vi;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #t #v0;&#10;  #v0 = #vi;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[1997] variableDeclarationFinal, variableDeclarationFinal {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  final #t #v0;&#10;... }\] (post))&#10;\addprogvars {#v0 (program Variable)} \replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1998] variableDeclarationFinalAssign, variableDeclarationFinalAssign {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  final #t #v0 = #vi;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  final #t #v0;&#10;  #v0 = #vi;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[1999] variableDeclarationGhost, variableDeclarationGhost {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  ghost #t #v0;&#10;... }\] (post))&#10;\addprogvars {#v0 (program Variable)} \replacewith(#allmodal(post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2000] variableDeclarationGhostAssign, variableDeclarationGhostAssign {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  ghost #t #v0 = #vi;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  ghost #t #v0;&#10;  #v0 = #vi;&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2001] variableDeclarationMult, variableDeclarationMult {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #multvardecl&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  multiple-var-decl(#multvardecl)&#10;... }\] (post)) &#10;\heuristics(simplify_prog_subset, simplify_prog)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2002] wellFormedAnon, wellFormedAnon {&#10;\find(wellFormed(anon(h,s,h2)))&#10;\succedentPolarity\replacewith(and(wellFormed(h),wellFormed(h2))) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2003] wellFormedAnonEQ, wellFormedAnonEQ {&#10;\assumes ([equals(anon(h,s,h2),EQ)]==&gt;[]) &#10;\find(wellFormed(EQ))&#10;\sameUpdateLevel\succedentPolarity\replacewith(and(wellFormed(h),wellFormed(h2))) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2004] wellFormedCreate, wellFormedCreate {&#10;\find(wellFormed(create(h,o)))&#10;\succedentPolarity\replacewith(wellFormed(h)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2005] wellFormedMemsetArrayObject, wellFormedMemsetArrayObject {&#10;\find(wellFormed(memset(h,arrayRange(ar,lo,up),x)))&#10;\succedentPolarity\varcond(\hasSort(\elemSort(ar (java.lang.Object term)), alpha), )&#10;\replacewith(and(wellFormed(h),or(equals(x,null),and(equals(boolean::select(h,x,java.lang.Object::&lt;created&gt;),TRUE),arrayStoreValid(ar,x))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2006] wellFormedMemsetArrayPrimitive, wellFormedMemsetArrayPrimitive {&#10;\find(wellFormed(memset(h,arrayRange(ar,lo,up),x)))&#10;\succedentPolarity\varcond(\hasSort(\elemSort(ar (java.lang.Object term)), alpha), \not\sub(beta, java.lang.Object), \not\sub(beta, LocSet), \sub(beta, alpha), )&#10;\replacewith(wellFormed(h)) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2007] wellFormedStoreArray, wellFormedStoreArray {&#10;\find(wellFormed(store(h,o,arr(idx),x)))&#10;\succedentPolarity\varcond(\hasSort(\elemSort(o (java.lang.Object term)), alpha), )&#10;\replacewith(and(wellFormed(h),or(equals(x,null),and(equals(boolean::select(h,x,java.lang.Object::&lt;created&gt;),TRUE),arrayStoreValid(o,x))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2008] wellFormedStoreLocSet, wellFormedStoreLocSet {&#10;\find(wellFormed(store(h,o,f,x)))&#10;\succedentPolarity\varcond(\fieldType(f (Field term), alpha), \sub(LocSet, alpha), )&#10;\replacewith(and(wellFormed(h),createdInHeap(x,h))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2009] wellFormedStoreLocSetEQ, wellFormedStoreLocSetEQ {&#10;\assumes ([equals(store(h,o,f,x),EQ)]==&gt;[]) &#10;\find(wellFormed(EQ))&#10;\sameUpdateLevel\succedentPolarity\replacewith(and(wellFormed(h),createdInHeap(x,h))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2010] wellFormedStoreObject, wellFormedStoreObject {&#10;\find(wellFormed(store(h,o,f,x)))&#10;\succedentPolarity\varcond(\fieldType(f (Field term), alpha), )&#10;\replacewith(and(wellFormed(h),or(equals(x,null),and(equals(boolean::select(h,x,java.lang.Object::&lt;created&gt;),TRUE),equals(alpha::instance(x),TRUE))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2011] wellFormedStoreObjectEQ, wellFormedStoreObjectEQ {&#10;\assumes ([equals(store(h,o,f,x),EQ)]==&gt;[]) &#10;\find(wellFormed(EQ))&#10;\sameUpdateLevel\succedentPolarity\varcond(\fieldType(f (Field term), alpha), )&#10;\replacewith(and(wellFormed(h),or(equals(x,null),and(equals(boolean::select(h,x,java.lang.Object::&lt;created&gt;),TRUE),equals(alpha::instance(x),TRUE))))) &#10;\heuristics(simplify_enlarging)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2012] wellFormedStorePrimitive, wellFormedStorePrimitive {&#10;\find(wellFormed(store(h,o,f,x)))&#10;\succedentPolarity\varcond(\fieldType(f (Field term), alpha), \not\sub(beta, java.lang.Object), \not\sub(beta, LocSet), \sub(beta, alpha), )&#10;\replacewith(wellFormed(h)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.006"/>
  <testcase name="[2013] wellFormedStorePrimitiveArray, wellFormedStorePrimitiveArray {&#10;\find(wellFormed(store(h,o,arr(idx),x)))&#10;\succedentPolarity\varcond(\hasSort(\elemSort(o (java.lang.Object term)), alpha), \not\sub(beta, java.lang.Object), \not\sub(beta, LocSet), \sub(beta, alpha), )&#10;\replacewith(wellFormed(h)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2014] wellFormedStorePrimitiveEQ, wellFormedStorePrimitiveEQ {&#10;\assumes ([equals(store(h,o,f,x),EQ)]==&gt;[]) &#10;\find(wellFormed(EQ))&#10;\sameUpdateLevel\succedentPolarity\varcond(\not\sub(beta, java.lang.Object), \not\sub(beta, LocSet), )&#10;\replacewith(wellFormed(h)) &#10;\heuristics(concrete)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2015] wideningCastIntToFloat, wideningCastIntToFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (float) #seCharByteShortInt;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(float::cast(#seCharByteShortInt)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2016] wideningCastLongToFloat, wideningCastLongToFloat {&#10;\find(#normalassign ( (modal operator))\[{ ..&#10;  #loc = (float) #seLong;&#10;... }\] (post))&#10;\replacewith(update-application(elem-update(#loc (program Variable))(float::cast(#seLong)),#normalassign(post))) &#10;\heuristics(executeFloatAssignment)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2017] widening_identity_cast_1, widening_identity_cast_1 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (byte) #seByte;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seByte;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2018] widening_identity_cast_10, widening_identity_cast_10 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (long) #seByteShortInt;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seByteShortInt;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2019] widening_identity_cast_11, widening_identity_cast_11 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (long) #seLong;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seLong;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2020] widening_identity_cast_12, widening_identity_cast_12 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (int) #seChar;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seChar;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.004"/>
  <testcase name="[2021] widening_identity_cast_13, widening_identity_cast_13 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (long) #seChar;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seChar;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2022] widening_identity_cast_2, widening_identity_cast_2 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (short) #seByte;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seByte;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2023] widening_identity_cast_3, widening_identity_cast_3 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (char) #seChar;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seChar;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2024] widening_identity_cast_4, widening_identity_cast_4 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (short) #seShort;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seShort;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2025] widening_identity_cast_5, widening_identity_cast_5 {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (int) #seByteShortInt;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seByteShortInt;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: programRules:Java}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.007"/>
  <testcase name="[2026] widening_identity_cast_bigint, widening_identity_cast_bigint {&#10;\find(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = (\bigint) #seAny;&#10;... }\] (post))&#10;\replacewith(#allmodal ( (modal operator))\[{ ..&#10;  #lhs = #seAny;&#10;... }\] (post)) &#10;\heuristics(simplify_expression)&#10;Choices: (programRules:Java &amp; bigint:on)}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2027] writePermission, writePermission {&#10;\find(writePermission(p))&#10;\replacewith(writePermissionObject(currentThread,p)) &#10;\heuristics(simplify_enlarging)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2028] writePermissionObject, writePermissionObject {&#10;\find(writePermissionObject(o,p))&#10;\replacewith(true) &#10;\heuristics(concrete)&#10;Choices: permissions:off}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2029] xorJIntDef, xorJIntDef {&#10;\find(xorJint(left,right))&#10;\replacewith(moduloInt(binaryXOr(left,right))) &#10;\heuristics(simplify)&#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2030] zadd_left_cancel0, zadd_left_cancel0 {&#10;\find(equals(i0,add(i0,i1)))&#10;\replacewith(equals(i1,Z(0(#)))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.001"/>
  <testcase name="[2031] zero_leq_mult_iff, zero_leq_mult_iff {&#10;\find(leq(Z(0(#)),mul(i0,i1)))&#10;\replacewith(or(and(leq(Z(0(#)),i0),leq(Z(0(#)),i1)),and(leq(i0,Z(0(#))),leq(i1,Z(0(#)))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <testcase name="[2032] zero_less_mult_iff, zero_less_mult_iff {&#10;\find(lt(Z(0(#)),mul(i0,i1)))&#10;\replacewith(or(and(lt(Z(0(#)),i0),lt(Z(0(#)),i1)),and(lt(i0,Z(0(#))),lt(i1,Z(0(#)))))) &#10;Choices: true}&#10;" classname="de.uka.ilkd.key.nparser.TestTacletEquality" time="0.0"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
