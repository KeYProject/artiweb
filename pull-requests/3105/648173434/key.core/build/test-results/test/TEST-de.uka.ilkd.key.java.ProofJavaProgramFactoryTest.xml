<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" tests="5" skipped="0" failures="0" errors="0" timestamp="2023-04-14T18:51:00" hostname="fv-az365-720" time="19.077">
  <properties/>
  <testcase name="testAttachCommentsCompilationUnit_LockSpec()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="1.411"/>
  <testcase name="testAttachCommentsCompilationUnit_AssertsFalse()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.072"/>
  <testcase name="testAttachCommentsCompilationUnit_Steinhofel1()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.118"/>
  <testcase name="testAttachCommentsCompilationUnit_SetStatements()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.119"/>
  <testcase name="testAttachCommentsCompilationUnit_SmansEtAlArrayList()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.213"/>
  <system-out><![CDATA[2516       WARN  Test worker     d.u.i.k.s.ProofSettings   No proof-settings could be loaded, using defaults java.io.FileNotFoundException: C:\Users\runneradmin\.key\proof-settings.props (The system cannot find the path specified)
	at java.base/java.io.FileInputStream.open0(Native Method)

3266       DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/proof/rules/ldt.key 
3266       DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/proof/rules/ldt.key 
8644       DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file src\test\resources\testcase\dummyTrue.key 
8660       DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
8675       DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
12536      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from src\test\resources\testcase\dummyTrue.key 
12661      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading public interface LockSpec {

    /*@ model_behavior
        accessible<heap> fpLock();
        accessible<permissions> fpPerm();
        mod[...] 
13537      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest (1/58) -- recoder.java.declaration.InterfaceDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
(52/52) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(45/45) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(38/38) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(31/31) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(26/26) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(21/21) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(16/16) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(11/11) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(6/6) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(61/61) -- de.uka.ilkd.key.java.recoderext.JMLTransformer$1
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
  * /*@instance ghost @*/
(69/69) -- recoder.java.declaration.MethodDeclaration
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
(69/69) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(77/77) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior         requires spec.lockStat
(77/77) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(97/97) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(96/96) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(94/94) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(93/93) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(92/92) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(91/91) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(90/90) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(87/87) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(82/82) -- recoder.java.reference.TypeReference
  * /*@ non_null @*/
(104/108) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
 
15570      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file src\test\resources\testcase\dummyTrue.key 
15570      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
15585      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
19134      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from src\test\resources\testcase\dummyTrue.key 
19149      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading class AssertsFalse {

    /*@ normal_behavior
      @  requires true;
      @*/
    void m() {
        int x = 7;
        //@ assert false[...] 
19228      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest recoder.java.CompilationUnit@10/2 
20635      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file src\test\resources\testcase\dummyTrue.key 
20635      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
20635      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
23417      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from src\test\resources\testcase\dummyTrue.key 
23433      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading // reported by Dominic Steinhöfel
// issues #1 https://git.key-project.org/key/key/-/issues/1

class Steinhoefel1 {

    /*@ public normal_b[...] 
23542      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest recoder.java.CompilationUnit@34/0 
24777      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file src\test\resources\testcase\dummyTrue.key 
24792      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
24792      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
27453      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from src\test\resources\testcase\dummyTrue.key 
27469      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading /* 
 * looks a bit similar to Throwable in javaRedux
 * added to test !399 (parsing of @set annotations in method/constructor)
 *
 */

publ[...] 
27578      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest recoder.java.CompilationUnit@27/2 
28805      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file src\test\resources\testcase\dummyTrue.key 
28820      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Reading KeY file file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
28820      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from file:/D:/a/key/key/key.core/build/resources/main/de/uka/ilkd/key/java/JavaRedux/java/lang/String.key 
31462      DEBUG Test worker     d.u.i.k.p.i.KeYFile       Read specifications obtained when parsing the Java files (usually JML and Strings.key) from src\test\resources\testcase\dummyTrue.key 
31462      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading class ArrayList {
    private int count;
    private /*@nullable@*/ Object[] items;

    /*@ normal_behavior
      @ assignable \nothing;
 [...] 
31681      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest (71/71) -- recoder.java.CompilationUnit
  * /*@ accessible \inv: footprint;       @ invariant
  * /*@ model \locset footprint;       @ accessible fo
(1/71) -- recoder.java.declaration.ClassDeclaration
  * /*@ accessible \inv: footprint;       @ invariant
  * /*@ model \locset footprint;       @ accessible fo
(67/67) -- recoder.java.declaration.FieldDeclaration
  * /*@ accessible \inv: footprint;       @ invariant
  * /*@ model \locset footprint;       @ accessible fo
  * /*@model @*/
(3/3) -- recoder.java.reference.TypeReference
  * /*@nullable@*/
(3/12) -- recoder.java.declaration.ConstructorDeclaration
  * /*@ normal_behavior       @ assignable \nothing;
(22/35) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior       @ assignable footprint;
(22/22) -- recoder.java.declaration.ParameterDeclaration
  * /*@nullable@*/
(29/31) -- recoder.java.statement.For
  * /*@ loop_invariant 0 <= i && i <= count
(44/46) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior       @ requires 0 <= i && i <
  * /*@nullable@*/
(55/57) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior       @ assignable \nothing;
 
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
