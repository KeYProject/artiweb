<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" tests="5" skipped="0" failures="1" errors="0" timestamp="2023-04-25T13:14:46" hostname="fv-az269-523" time="13.39">
  <properties/>
  <testcase name="testAttachCommentsCompilationUnit_LockSpec()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.758">
    <failure message="org.opentest4j.AssertionFailedError: Difference in attached comments ==&gt; expected: &lt;(1/58) -- recoder.java.declaration.InterfaceDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;(52/52) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model two_state @*/&#10;(45/45) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model two_state @*/&#10;(38/38) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model two_state @*/&#10;(31/31) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(26/26) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(21/21) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(16/16) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(11/11) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(6/6) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(61/61) -- de.uka.ilkd.key.java.recoderext.JMLTransformer$1&#10;  * //@ public instance ghost LockSpec spec;&#10;  * /*@ normal_behavior         requires spec.lockStat&#10;  * /*@instance ghost @*/&#10;(69/69) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ public instance ghost LockSpec spec;&#10;  * /*@ normal_behavior         requires spec.lockStat&#10;(69/69) -- recoder.java.declaration.modifier.Native&#10;  * /*@ helper @*/&#10;(77/77) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ normal_behavior         requires spec.lockStat&#10;(77/77) -- recoder.java.declaration.modifier.Native&#10;  * /*@ helper @*/&#10;(97/97) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(96/96) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(94/94) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model two_state @*/&#10;(93/93) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model two_state @*/&#10;(92/92) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(91/91) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(90/90) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(87/87) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(82/82) -- recoder.java.reference.TypeReference&#10;  * /*@ non_null @*/&#10;(104/108) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;&gt; but was: &lt;(1/58) -- recoder.java.declaration.InterfaceDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;(52/52) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model two_state @*/&#10;(45/45) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model two_state @*/&#10;(38/38) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model two_state @*/&#10;(31/31) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(26/26) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(21/21) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(16/16) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(11/11) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(6/6) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fp();&#10;  * /*@ model_behavior         accessible&lt;heap&gt; fpLock&#10;  * /*@ model_behavior         accessible&lt;heap&gt; \nothi&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \&#10;  * /*@ model_behavior         requires \old(lockRef()&#10;  * /*@model @*/&#10;(61/61) -- de.uka.ilkd.key.java.recoderext.JMLTransformer$1&#10;  * //@ public instance ghost LockSpec spec;&#10;  * /*@ normal_behavior         requires spec.lockStat&#10;  * /*@instance ghost @*/&#10;(69/69) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ public instance ghost LockSpec spec;&#10;  * /*@ normal_behavior         requires spec.lockStat&#10;(69/69) -- recoder.java.declaration.modifier.Native&#10;  * /*@ helper @*/&#10;(77/77) -- recoder.java.declaration.MethodDeclaration&#10;  * /*@ normal_behavior         requires spec.lockStat&#10;(77/77) -- recoder.java.declaration.modifier.Native&#10;  * /*@ helper @*/&#10;(97/97) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(96/96) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(94/94) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model two_state @*/&#10;(93/93) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model two_state @*/&#10;(92/92) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(91/91) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(90/90) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(87/87) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;  * /*@model @*/&#10;(82/82) -- recoder.java.reference.TypeReference&#10;  * /*@ non_null @*/&#10;(104/109) -- recoder.java.declaration.MethodDeclaration&#10;  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;&#10;  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;&#10;  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock&#10;  * /*@ model boolean lockState(boolean locked) {&#10;  * /*@ model \locset fp() { return \singleton(this.va&#10;  * /*@ model \locset fpPerm() { return \singleton(thi&#10;  * /*@ model \locset fpLock() { return \singleton(thi&#10;  * /*@ model two_state boolean lockTransfer() { retur&#10;  * /*@ model two_state boolean unlockTransfer() { ret&#10;  * /*@ model Lock lockRef() { return this.lock; } @*/&#10;  * /*@ model boolean lockStatus(boolean locked) { ret&#10;  * /*@ normal_behavior          requires lockStatus(\&#10;(-1/-1) -- recoder.java.statement.EmptyStatement&#10;  * //@ assert lockStatus(\dl_FALSE());&#10;&gt;" type="org.opentest4j.AssertionFailedError">org.opentest4j.AssertionFailedError: Difference in attached comments ==&gt; expected: &lt;(1/58) -- recoder.java.declaration.InterfaceDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
(52/52) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(45/45) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(38/38) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(31/31) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(26/26) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(21/21) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(16/16) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(11/11) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(6/6) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(61/61) -- de.uka.ilkd.key.java.recoderext.JMLTransformer$1
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
  * /*@instance ghost @*/
(69/69) -- recoder.java.declaration.MethodDeclaration
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
(69/69) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(77/77) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior         requires spec.lockStat
(77/77) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(97/97) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(96/96) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(94/94) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(93/93) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(92/92) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(91/91) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(90/90) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(87/87) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(82/82) -- recoder.java.reference.TypeReference
  * /*@ non_null @*/
(104/108) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
&gt; but was: &lt;(1/58) -- recoder.java.declaration.InterfaceDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
(52/52) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(45/45) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(38/38) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(31/31) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(26/26) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(21/21) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(16/16) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(11/11) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(6/6) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heap&gt; fp();
  * /*@ model_behavior         accessible&lt;heap&gt; fpLock
  * /*@ model_behavior         accessible&lt;heap&gt; \nothi
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         accessible&lt;heapAtPre&gt; \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(61/61) -- de.uka.ilkd.key.java.recoderext.JMLTransformer$1
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
  * /*@instance ghost @*/
(69/69) -- recoder.java.declaration.MethodDeclaration
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
(69/69) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(77/77) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior         requires spec.lockStat
(77/77) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(97/97) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(96/96) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(94/94) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(93/93) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(92/92) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(91/91) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(90/90) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(87/87) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(82/82) -- recoder.java.reference.TypeReference
  * /*@ non_null @*/
(104/109) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &amp;&amp;
  * //@ accessible&lt;heap&gt; \inv : this.lock, lock.spec;
  * //@ accessible&lt;permissions&gt; \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
(-1/-1) -- recoder.java.statement.EmptyStatement
  * //@ assert lockStatus(\dl_FALSE());
&gt;
	at app//org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at app//org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at app//org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)
	at app//org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:182)
	at app//org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:1153)
	at app//de.uka.ilkd.key.java.ProofJavaProgramFactoryTest.testAttachCommentsCompilationUnit_LockSpec(ProofJavaProgramFactoryTest.java:166)
	at java.base@17.0.6/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.6/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.6/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.6/java.lang.reflect.Method.invoke(Method.java:568)
	at app//org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at app//org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at app//org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at app//org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at app//org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at app//org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.6/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base@17.0.6/java.util.ArrayList.forEach(ArrayList.java:1511)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at app//org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at app//org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at app//org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at app//org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at app//org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at app//org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at app//org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at app//org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.processAllTestClasses(JUnitPlatformTestClassProcessor.java:110)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor$CollectAllTestClassesExecutor.access$000(JUnitPlatformTestClassProcessor.java:90)
	at org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor.stop(JUnitPlatformTestClassProcessor.java:85)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:62)
	at java.base@17.0.6/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base@17.0.6/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base@17.0.6/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base@17.0.6/java.lang.reflect.Method.invoke(Method.java:568)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
	at jdk.proxy1/jdk.proxy1.$Proxy2.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker$3.run(TestWorker.java:193)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.executeAndMaintainThreadName(TestWorker.java:129)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:100)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:60)
	at org.gradle.process.internal.worker.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:56)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:113)
	at org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:65)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.run(GradleWorkerMain.java:69)
	at app//worker.org.gradle.process.internal.worker.GradleWorkerMain.main(GradleWorkerMain.java:74)
</failure>
  </testcase>
  <testcase name="testAttachCommentsCompilationUnit_AssertsFalse()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.063"/>
  <testcase name="testAttachCommentsCompilationUnit_Steinhofel1()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.105"/>
  <testcase name="testAttachCommentsCompilationUnit_SetStatements()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.096"/>
  <testcase name="testAttachCommentsCompilationUnit_SmansEtAlArrayList()" classname="de.uka.ilkd.key.java.ProofJavaProgramFactoryTest" time="0.145"/>
  <system-out><![CDATA[1543       WARN  Test worker     d.u.i.k.s.ProofSettings   No proof-settings could be loaded, using defaults java.io.FileNotFoundException: C:\Users\runneradmin\.key\proof-settings.props (The system cannot find the path specified)
	at java.base/java.io.FileInputStream.open0(Native Method)

9491       DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading public interface LockSpec {

    /*@ model_behavior
        accessible<heap> fpLock();
        accessible<permissions> fpPerm();
        mod[...] 
9929       DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest (1/58) -- recoder.java.declaration.InterfaceDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
(52/52) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(45/45) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(38/38) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model two_state @*/
(31/31) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(26/26) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(21/21) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(16/16) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(11/11) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(6/6) -- recoder.java.declaration.MethodDeclaration
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heap> fp();
  * /*@ model_behavior         accessible<heap> fpLock
  * /*@ model_behavior         accessible<heap> \nothi
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         accessible<heapAtPre> \
  * /*@ model_behavior         requires \old(lockRef()
  * /*@model @*/
(61/61) -- de.uka.ilkd.key.java.recoderext.JMLTransformer$1
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
  * /*@instance ghost @*/
(69/69) -- recoder.java.declaration.MethodDeclaration
  * //@ public instance ghost LockSpec spec;
  * /*@ normal_behavior         requires spec.lockStat
(69/69) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(77/77) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior         requires spec.lockStat
(77/77) -- recoder.java.declaration.modifier.Native
  * /*@ helper @*/
(97/97) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(96/96) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(94/94) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(93/93) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model two_state @*/
(92/92) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(91/91) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(90/90) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(87/87) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
  * /*@model @*/
(82/82) -- recoder.java.reference.TypeReference
  * /*@ non_null @*/
(104/109) -- recoder.java.declaration.MethodDeclaration
  * //@ invariant this.lock != \dl_currentThread() &&
  * //@ accessible<heap> \inv : this.lock, lock.spec;
  * //@ accessible<permissions> \inv : this.lock, lock
  * /*@ model boolean lockState(boolean locked) {
  * /*@ model \locset fp() { return \singleton(this.va
  * /*@ model \locset fpPerm() { return \singleton(thi
  * /*@ model \locset fpLock() { return \singleton(thi
  * /*@ model two_state boolean lockTransfer() { retur
  * /*@ model two_state boolean unlockTransfer() { ret
  * /*@ model Lock lockRef() { return this.lock; } @*/
  * /*@ model boolean lockStatus(boolean locked) { ret
  * /*@ normal_behavior          requires lockStatus(\
(-1/-1) -- recoder.java.statement.EmptyStatement
  * //@ assert lockStatus(\dl_FALSE());
 
13742      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading class AssertsFalse {

    /*@ normal_behavior
      @  requires true;
      @*/
    void m() {
        int x = 7;
        //@ assert false[...] 
13804      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest recoder.java.CompilationUnit@10/2 
16844      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading // reported by Dominic Steinhöfel
// issues #1 https://git.key-project.org/key/key/-/issues/1

class Steinhoefel1 {

    /*@ public normal_b[...] 
16953      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest recoder.java.CompilationUnit@34/0 
19816      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading /* 
 * looks a bit similar to Throwable in javaRedux
 * added to test !399 (parsing of @set annotations in method/constructor)
 *
 */

publ[...] 
19910      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest recoder.java.CompilationUnit@27/2 
22655      DEBUG Test worker     d.u.i.k.j.Recoder2KeY     Reading class ArrayList {
    private int count;
    private /*@nullable@*/ Object[] items;

    /*@ normal_behavior
      @ assignable \nothing;
 [...] 
22796      DEBUG Test worker     d.u.i.k.j.ProofJavaProgramFactoryTest (71/71) -- recoder.java.CompilationUnit
  * /*@ accessible \inv: footprint;       @ invariant
  * /*@ model \locset footprint;       @ accessible fo
(1/71) -- recoder.java.declaration.ClassDeclaration
  * /*@ accessible \inv: footprint;       @ invariant
  * /*@ model \locset footprint;       @ accessible fo
(67/67) -- recoder.java.declaration.FieldDeclaration
  * /*@ accessible \inv: footprint;       @ invariant
  * /*@ model \locset footprint;       @ accessible fo
  * /*@model @*/
(3/3) -- recoder.java.reference.TypeReference
  * /*@nullable@*/
(3/12) -- recoder.java.declaration.ConstructorDeclaration
  * /*@ normal_behavior       @ assignable \nothing;
(22/35) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior       @ assignable footprint;
(22/22) -- recoder.java.declaration.ParameterDeclaration
  * /*@nullable@*/
(29/31) -- recoder.java.statement.For
  * /*@ loop_invariant 0 <= i && i <= count
(44/46) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior       @ requires 0 <= i && i <
  * /*@nullable@*/
(55/57) -- recoder.java.declaration.MethodDeclaration
  * /*@ normal_behavior       @ assignable \nothing;
 
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
